<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="229.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="229.00"> </text><svg id="frames" x="10" width="1180" total_samples="59284262030"><g><title>[unknown] (16,609,339 samples, 0.03%)</title><rect x="0.0001%" y="149" width="0.0280%" height="15" fill="rgb(227,0,7)" fg:x="34489" fg:w="16609339"/><text x="0.2501%" y="159.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_all_moves (16,609,339 samples, 0.03%)</title><rect x="0.0001%" y="133" width="0.0280%" height="15" fill="rgb(217,0,24)" fg:x="34489" fg:w="16609339"/><text x="0.2501%" y="143.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_hv (16,609,339 samples, 0.03%)</title><rect x="0.0001%" y="117" width="0.0280%" height="15" fill="rgb(221,193,54)" fg:x="34489" fg:w="16609339"/><text x="0.2501%" y="127.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (11,069,483 samples, 0.02%)</title><rect x="0.0094%" y="101" width="0.0187%" height="15" fill="rgb(248,212,6)" fg:x="5574345" fg:w="11069483"/><text x="0.2594%" y="111.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push_unchecked (11,069,483 samples, 0.02%)</title><rect x="0.0094%" y="85" width="0.0187%" height="15" fill="rgb(208,68,35)" fg:x="5574345" fg:w="11069483"/><text x="0.2594%" y="95.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (11,069,483 samples, 0.02%)</title><rect x="0.0094%" y="69" width="0.0187%" height="15" fill="rgb(232,128,0)" fg:x="5574345" fg:w="11069483"/><text x="0.2594%" y="79.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (22,184,810 samples, 0.04%)</title><rect x="0.4867%" y="117" width="0.0374%" height="15" fill="rgb(207,160,47)" fg:x="288535030" fg:w="22184810"/><text x="0.7367%" y="127.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (22,184,810 samples, 0.04%)</title><rect x="0.4867%" y="101" width="0.0374%" height="15" fill="rgb(228,23,34)" fg:x="288535030" fg:w="22184810"/><text x="0.7367%" y="111.50"></text></g><g><title>core::cmp::PartialEq::ne (27,736,938 samples, 0.05%)</title><rect x="0.5241%" y="117" width="0.0468%" height="15" fill="rgb(218,30,26)" fg:x="310719840" fg:w="27736938"/><text x="0.7741%" y="127.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (27,736,938 samples, 0.05%)</title><rect x="0.5241%" y="101" width="0.0468%" height="15" fill="rgb(220,122,19)" fg:x="310719840" fg:w="27736938"/><text x="0.7741%" y="111.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (61,850,616 samples, 0.10%)</title><rect x="0.5709%" y="117" width="0.1043%" height="15" fill="rgb(250,228,42)" fg:x="338456778" fg:w="61850616"/><text x="0.8209%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (27,721,370 samples, 0.05%)</title><rect x="0.6285%" y="101" width="0.0468%" height="15" fill="rgb(240,193,28)" fg:x="372586024" fg:w="27721370"/><text x="0.8785%" y="111.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_dg (156,127,885 samples, 0.26%)</title><rect x="0.4306%" y="133" width="0.2634%" height="15" fill="rgb(216,20,37)" fg:x="255270656" fg:w="156127885"/><text x="0.6806%" y="143.50"></text></g><g><title>core::cmp::PartialEq::ne (33,272,191 samples, 0.06%)</title><rect x="0.9869%" y="117" width="0.0561%" height="15" fill="rgb(206,188,39)" fg:x="585106005" fg:w="33272191"/><text x="1.2369%" y="127.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (33,272,191 samples, 0.06%)</title><rect x="0.9869%" y="101" width="0.0561%" height="15" fill="rgb(217,207,13)" fg:x="585106005" fg:w="33272191"/><text x="1.2369%" y="111.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (993,684,275 samples, 1.68%)</title><rect x="1.0431%" y="117" width="1.6761%" height="15" fill="rgb(231,73,38)" fg:x="618378196" fg:w="993684275"/><text x="1.2931%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (388,490,290 samples, 0.66%)</title><rect x="2.0639%" y="101" width="0.6553%" height="15" fill="rgb(225,20,46)" fg:x="1223572181" fg:w="388490290"/><text x="2.3139%" y="111.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as arrayvec::arrayvec_impl::ArrayVecImpl&gt;::len (11,109,686 samples, 0.02%)</title><rect x="3.4588%" y="69" width="0.0187%" height="15" fill="rgb(210,31,41)" fg:x="2050528091" fg:w="11109686"/><text x="3.7088%" y="79.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::len (11,109,686 samples, 0.02%)</title><rect x="3.4588%" y="53" width="0.0187%" height="15" fill="rgb(221,200,47)" fg:x="2050528091" fg:w="11109686"/><text x="3.7088%" y="63.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (488,446,088 samples, 0.82%)</title><rect x="2.7192%" y="117" width="0.8239%" height="15" fill="rgb(226,26,5)" fg:x="1612062471" fg:w="488446088"/><text x="2.9692%" y="127.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push_unchecked (466,248,798 samples, 0.79%)</title><rect x="2.7567%" y="101" width="0.7865%" height="15" fill="rgb(249,33,26)" fg:x="1634259761" fg:w="466248798"/><text x="3.0067%" y="111.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (466,248,798 samples, 0.79%)</title><rect x="2.7567%" y="85" width="0.7865%" height="15" fill="rgb(235,183,28)" fg:x="1634259761" fg:w="466248798"/><text x="3.0067%" y="95.50"></text></g><g><title>core::ptr::write (38,870,782 samples, 0.07%)</title><rect x="3.4775%" y="69" width="0.0656%" height="15" fill="rgb(221,5,38)" fg:x="2061637777" fg:w="38870782"/><text x="3.7275%" y="79.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_hv (1,827,889,374 samples, 3.08%)</title><rect x="0.6939%" y="133" width="3.0833%" height="15" fill="rgb(247,18,42)" fg:x="411398541" fg:w="1827889374"/><text x="0.9439%" y="143.50">shi..</text></g><g><title>shiro::engine::move_gen::masks::pext_hv_lookup (138,779,356 samples, 0.23%)</title><rect x="3.5431%" y="117" width="0.2341%" height="15" fill="rgb(241,131,45)" fg:x="2100508559" fg:w="138779356"/><text x="3.7931%" y="127.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (44,396,314 samples, 0.07%)</title><rect x="3.7023%" y="101" width="0.0749%" height="15" fill="rgb(249,31,29)" fg:x="2194891601" fg:w="44396314"/><text x="3.9523%" y="111.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (44,396,314 samples, 0.07%)</title><rect x="3.7023%" y="85" width="0.0749%" height="15" fill="rgb(225,111,53)" fg:x="2194891601" fg:w="44396314"/><text x="3.9523%" y="95.50"></text></g><g><title>core::slice::index::get_noubcheck (44,396,314 samples, 0.07%)</title><rect x="3.7023%" y="69" width="0.0749%" height="15" fill="rgb(238,160,17)" fg:x="2194891601" fg:w="44396314"/><text x="3.9523%" y="79.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_king_castle (16,631,632 samples, 0.03%)</title><rect x="3.7772%" y="133" width="0.0281%" height="15" fill="rgb(214,148,48)" fg:x="2239287915" fg:w="16631632"/><text x="4.0272%" y="143.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (11,098,664 samples, 0.02%)</title><rect x="3.7865%" y="117" width="0.0187%" height="15" fill="rgb(232,36,49)" fg:x="2244820883" fg:w="11098664"/><text x="4.0365%" y="127.50"></text></g><g><title>shiro::engine::common::chess_move::Move::with_target (11,098,664 samples, 0.02%)</title><rect x="3.7865%" y="101" width="0.0187%" height="15" fill="rgb(209,103,24)" fg:x="2244820883" fg:w="11098664"/><text x="4.0365%" y="111.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_target (11,098,664 samples, 0.02%)</title><rect x="3.7865%" y="85" width="0.0187%" height="15" fill="rgb(229,88,8)" fg:x="2244820883" fg:w="11098664"/><text x="4.0365%" y="95.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_target_checked (11,098,664 samples, 0.02%)</title><rect x="3.7865%" y="69" width="0.0187%" height="15" fill="rgb(213,181,19)" fg:x="2244820883" fg:w="11098664"/><text x="4.0365%" y="79.50"></text></g><g><title>&lt;modular_bitfield::specifiers::B6 as modular_bitfield::Specifier&gt;::into_bytes (11,098,664 samples, 0.02%)</title><rect x="3.7865%" y="53" width="0.0187%" height="15" fill="rgb(254,191,54)" fg:x="2244820883" fg:w="11098664"/><text x="4.0365%" y="63.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (116,384,040 samples, 0.20%)</title><rect x="3.8333%" y="117" width="0.1963%" height="15" fill="rgb(241,83,37)" fg:x="2272547485" fg:w="116384040"/><text x="4.0833%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (66,503,169 samples, 0.11%)</title><rect x="3.9174%" y="101" width="0.1122%" height="15" fill="rgb(233,36,39)" fg:x="2322428356" fg:w="66503169"/><text x="4.1674%" y="111.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_king_normal (182,924,207 samples, 0.31%)</title><rect x="3.8053%" y="133" width="0.3086%" height="15" fill="rgb(226,3,54)" fg:x="2255919547" fg:w="182924207"/><text x="4.0553%" y="143.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (49,912,229 samples, 0.08%)</title><rect x="4.0296%" y="117" width="0.0842%" height="15" fill="rgb(245,192,40)" fg:x="2388931525" fg:w="49912229"/><text x="4.2796%" y="127.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push_unchecked (44,374,609 samples, 0.07%)</title><rect x="4.0390%" y="101" width="0.0749%" height="15" fill="rgb(238,167,29)" fg:x="2394469145" fg:w="44374609"/><text x="4.2890%" y="111.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (44,374,609 samples, 0.07%)</title><rect x="4.0390%" y="85" width="0.0749%" height="15" fill="rgb(232,182,51)" fg:x="2394469145" fg:w="44374609"/><text x="4.2890%" y="95.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitOr&gt;::bitor (16,664,583 samples, 0.03%)</title><rect x="4.4421%" y="117" width="0.0281%" height="15" fill="rgb(231,60,39)" fg:x="2633458282" fg:w="16664583"/><text x="4.6921%" y="127.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitOr&gt;::bitor (16,664,583 samples, 0.03%)</title><rect x="4.4421%" y="101" width="0.0281%" height="15" fill="rgb(208,69,12)" fg:x="2633458282" fg:w="16664583"/><text x="4.6921%" y="111.50"></text></g><g><title>core::cmp::PartialEq::ne (77,553,421 samples, 0.13%)</title><rect x="4.4795%" y="117" width="0.1308%" height="15" fill="rgb(235,93,37)" fg:x="2655666152" fg:w="77553421"/><text x="4.7295%" y="127.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (77,553,421 samples, 0.13%)</title><rect x="4.4795%" y="101" width="0.1308%" height="15" fill="rgb(213,116,39)" fg:x="2655666152" fg:w="77553421"/><text x="4.7295%" y="111.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (389,722,610 samples, 0.66%)</title><rect x="4.6104%" y="117" width="0.6574%" height="15" fill="rgb(222,207,29)" fg:x="2733219573" fg:w="389722610"/><text x="4.8604%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (177,316,080 samples, 0.30%)</title><rect x="4.9686%" y="101" width="0.2991%" height="15" fill="rgb(206,96,30)" fg:x="2945626103" fg:w="177316080"/><text x="5.2186%" y="111.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_knight (919,437,452 samples, 1.55%)</title><rect x="4.1138%" y="133" width="1.5509%" height="15" fill="rgb(218,138,4)" fg:x="2438843754" fg:w="919437452"/><text x="4.3638%" y="143.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (235,339,023 samples, 0.40%)</title><rect x="5.2677%" y="117" width="0.3970%" height="15" fill="rgb(250,191,14)" fg:x="3122942183" fg:w="235339023"/><text x="5.5177%" y="127.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push_unchecked (207,659,079 samples, 0.35%)</title><rect x="5.3144%" y="101" width="0.3503%" height="15" fill="rgb(239,60,40)" fg:x="3150622127" fg:w="207659079"/><text x="5.5644%" y="111.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (207,659,079 samples, 0.35%)</title><rect x="5.3144%" y="85" width="0.3503%" height="15" fill="rgb(206,27,48)" fg:x="3150622127" fg:w="207659079"/><text x="5.5644%" y="95.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as arrayvec::arrayvec_impl::ArrayVecImpl&gt;::len (11,085,413 samples, 0.02%)</title><rect x="5.6460%" y="69" width="0.0187%" height="15" fill="rgb(225,35,8)" fg:x="3347195793" fg:w="11085413"/><text x="5.8960%" y="79.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::len (11,085,413 samples, 0.02%)</title><rect x="5.6460%" y="53" width="0.0187%" height="15" fill="rgb(250,213,24)" fg:x="3347195793" fg:w="11085413"/><text x="5.8960%" y="63.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (22,185,862 samples, 0.04%)</title><rect x="5.7674%" y="117" width="0.0374%" height="15" fill="rgb(247,123,22)" fg:x="3419187183" fg:w="22185862"/><text x="6.0174%" y="127.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (22,185,862 samples, 0.04%)</title><rect x="5.7674%" y="101" width="0.0374%" height="15" fill="rgb(231,138,38)" fg:x="3419187183" fg:w="22185862"/><text x="6.0174%" y="111.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitXorAssign&gt;::bitxor_assign (16,641,508 samples, 0.03%)</title><rect x="5.8049%" y="117" width="0.0281%" height="15" fill="rgb(231,145,46)" fg:x="3441373045" fg:w="16641508"/><text x="6.0549%" y="127.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitXorAssign&gt;::bitxor_assign (16,641,508 samples, 0.03%)</title><rect x="5.8049%" y="101" width="0.0281%" height="15" fill="rgb(251,118,11)" fg:x="3441373045" fg:w="16641508"/><text x="6.0549%" y="111.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::Not&gt;::not (27,730,895 samples, 0.05%)</title><rect x="5.8329%" y="117" width="0.0468%" height="15" fill="rgb(217,147,25)" fg:x="3458014553" fg:w="27730895"/><text x="6.0829%" y="127.50"></text></g><g><title>&lt;u64 as core::ops::bit::Not&gt;::not (27,730,895 samples, 0.05%)</title><rect x="5.8329%" y="101" width="0.0468%" height="15" fill="rgb(247,81,37)" fg:x="3458014553" fg:w="27730895"/><text x="6.0829%" y="111.50"></text></g><g><title>core::cmp::PartialEq::ne (11,093,148 samples, 0.02%)</title><rect x="5.8891%" y="117" width="0.0187%" height="15" fill="rgb(209,12,38)" fg:x="3491291714" fg:w="11093148"/><text x="6.1391%" y="127.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (11,093,148 samples, 0.02%)</title><rect x="5.8891%" y="101" width="0.0187%" height="15" fill="rgb(227,1,9)" fg:x="3491291714" fg:w="11093148"/><text x="6.1391%" y="111.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (33,407,042 samples, 0.06%)</title><rect x="5.9078%" y="117" width="0.0564%" height="15" fill="rgb(248,47,43)" fg:x="3502384862" fg:w="33407042"/><text x="6.1578%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (27,866,509 samples, 0.05%)</title><rect x="5.9171%" y="101" width="0.0470%" height="15" fill="rgb(221,10,30)" fg:x="3507925395" fg:w="27866509"/><text x="6.1671%" y="111.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push_unchecked (35,167,822 samples, 0.06%)</title><rect x="5.9641%" y="101" width="0.0593%" height="15" fill="rgb(210,229,1)" fg:x="3535791904" fg:w="35167822"/><text x="6.2141%" y="111.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (35,167,822 samples, 0.06%)</title><rect x="5.9641%" y="85" width="0.0593%" height="15" fill="rgb(222,148,37)" fg:x="3535791904" fg:w="35167822"/><text x="6.2141%" y="95.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (40,709,634 samples, 0.07%)</title><rect x="5.9641%" y="117" width="0.0687%" height="15" fill="rgb(234,67,33)" fg:x="3535791904" fg:w="40709634"/><text x="6.2141%" y="127.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push_unchecked (16,627,499 samples, 0.03%)</title><rect x="6.0328%" y="101" width="0.0280%" height="15" fill="rgb(247,98,35)" fg:x="3576501538" fg:w="16627499"/><text x="6.2828%" y="111.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (16,627,499 samples, 0.03%)</title><rect x="6.0328%" y="85" width="0.0280%" height="15" fill="rgb(247,138,52)" fg:x="3576501538" fg:w="16627499"/><text x="6.2828%" y="95.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_pawn_captures (240,389,491 samples, 0.41%)</title><rect x="5.6647%" y="133" width="0.4055%" height="15" fill="rgb(213,79,30)" fg:x="3358281206" fg:w="240389491"/><text x="5.9147%" y="143.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_promotions (22,169,159 samples, 0.04%)</title><rect x="6.0328%" y="117" width="0.0374%" height="15" fill="rgb(246,177,23)" fg:x="3576501538" fg:w="22169159"/><text x="6.2828%" y="127.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (22,170,921 samples, 0.04%)</title><rect x="6.2010%" y="117" width="0.0374%" height="15" fill="rgb(230,62,27)" fg:x="3676235981" fg:w="22170921"/><text x="6.4510%" y="127.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (22,170,921 samples, 0.04%)</title><rect x="6.2010%" y="101" width="0.0374%" height="15" fill="rgb(216,154,8)" fg:x="3676235981" fg:w="22170921"/><text x="6.4510%" y="111.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAndAssign&gt;::bitand_assign (22,160,726 samples, 0.04%)</title><rect x="6.2384%" y="117" width="0.0374%" height="15" fill="rgb(244,35,45)" fg:x="3698406902" fg:w="22160726"/><text x="6.4884%" y="127.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAndAssign&gt;::bitand_assign (22,160,726 samples, 0.04%)</title><rect x="6.2384%" y="101" width="0.0374%" height="15" fill="rgb(251,115,12)" fg:x="3698406902" fg:w="22160726"/><text x="6.4884%" y="111.50"></text></g><g><title>core::cmp::PartialEq::ne (27,667,574 samples, 0.05%)</title><rect x="6.2758%" y="117" width="0.0467%" height="15" fill="rgb(240,54,50)" fg:x="3720567628" fg:w="27667574"/><text x="6.5258%" y="127.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (27,667,574 samples, 0.05%)</title><rect x="6.2758%" y="101" width="0.0467%" height="15" fill="rgb(233,84,52)" fg:x="3720567628" fg:w="27667574"/><text x="6.5258%" y="111.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (208,940,236 samples, 0.35%)</title><rect x="6.3318%" y="117" width="0.3524%" height="15" fill="rgb(207,117,47)" fg:x="3753779215" fg:w="208940236"/><text x="6.5818%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (164,642,684 samples, 0.28%)</title><rect x="6.4066%" y="101" width="0.2777%" height="15" fill="rgb(249,43,39)" fg:x="3798076767" fg:w="164642684"/><text x="6.6566%" y="111.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::unbounded_shr (22,162,642 samples, 0.04%)</title><rect x="6.6843%" y="117" width="0.0374%" height="15" fill="rgb(209,38,44)" fg:x="3962719451" fg:w="22162642"/><text x="6.9343%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::unbounded_shr (22,162,642 samples, 0.04%)</title><rect x="6.6843%" y="101" width="0.0374%" height="15" fill="rgb(236,212,23)" fg:x="3962719451" fg:w="22162642"/><text x="6.9343%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::unchecked_shr (22,162,642 samples, 0.04%)</title><rect x="6.6843%" y="85" width="0.0374%" height="15" fill="rgb(242,79,21)" fg:x="3962719451" fg:w="22162642"/><text x="6.9343%" y="95.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (94,265,781 samples, 0.16%)</title><rect x="6.7217%" y="117" width="0.1590%" height="15" fill="rgb(211,96,35)" fg:x="3984882093" fg:w="94265781"/><text x="6.9717%" y="127.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push_unchecked (66,583,694 samples, 0.11%)</title><rect x="6.7683%" y="101" width="0.1123%" height="15" fill="rgb(253,215,40)" fg:x="4012564180" fg:w="66583694"/><text x="7.0183%" y="111.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (66,583,694 samples, 0.11%)</title><rect x="6.7683%" y="85" width="0.1123%" height="15" fill="rgb(211,81,21)" fg:x="4012564180" fg:w="66583694"/><text x="7.0183%" y="95.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as arrayvec::arrayvec_impl::ArrayVecImpl&gt;::len (33,374,015 samples, 0.06%)</title><rect x="6.8244%" y="69" width="0.0563%" height="15" fill="rgb(208,190,38)" fg:x="4045773859" fg:w="33374015"/><text x="7.0744%" y="79.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::len (33,374,015 samples, 0.06%)</title><rect x="6.8244%" y="53" width="0.0563%" height="15" fill="rgb(235,213,38)" fg:x="4045773859" fg:w="33374015"/><text x="7.0744%" y="63.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push_unchecked (11,079,744 samples, 0.02%)</title><rect x="6.9368%" y="101" width="0.0187%" height="15" fill="rgb(237,122,38)" fg:x="4112410583" fg:w="11079744"/><text x="7.1868%" y="111.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (11,079,744 samples, 0.02%)</title><rect x="6.9368%" y="85" width="0.0187%" height="15" fill="rgb(244,218,35)" fg:x="4112410583" fg:w="11079744"/><text x="7.1868%" y="95.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_all_moves (4,112,376,263 samples, 6.94%)</title><rect x="0.0281%" y="149" width="6.9367%" height="15" fill="rgb(240,68,47)" fg:x="16643828" fg:w="4112376263"/><text x="0.2781%" y="159.50">shiro::en..</text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_pawn_pushes (530,349,394 samples, 0.89%)</title><rect x="6.0702%" y="133" width="0.8946%" height="15" fill="rgb(210,16,53)" fg:x="3598670697" fg:w="530349394"/><text x="6.3202%" y="143.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_promotions (49,872,217 samples, 0.08%)</title><rect x="6.8807%" y="117" width="0.0841%" height="15" fill="rgb(235,124,12)" fg:x="4079147874" fg:w="49872217"/><text x="7.1307%" y="127.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (116,275,763 samples, 0.20%)</title><rect x="7.3669%" y="101" width="0.1961%" height="15" fill="rgb(224,169,11)" fg:x="4367432082" fg:w="116275763"/><text x="7.6169%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (55,362,884 samples, 0.09%)</title><rect x="7.4697%" y="85" width="0.0934%" height="15" fill="rgb(250,166,2)" fg:x="4428344961" fg:w="55362884"/><text x="7.7197%" y="95.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (99,685,539 samples, 0.17%)</title><rect x="7.5631%" y="101" width="0.1681%" height="15" fill="rgb(242,216,29)" fg:x="4483707845" fg:w="99685539"/><text x="7.8131%" y="111.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push_unchecked (99,685,539 samples, 0.17%)</title><rect x="7.5631%" y="85" width="0.1681%" height="15" fill="rgb(230,116,27)" fg:x="4483707845" fg:w="99685539"/><text x="7.8131%" y="95.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (99,685,539 samples, 0.17%)</title><rect x="7.5631%" y="69" width="0.1681%" height="15" fill="rgb(228,99,48)" fg:x="4483707845" fg:w="99685539"/><text x="7.8131%" y="79.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_dg (249,207,653 samples, 0.42%)</title><rect x="7.3482%" y="117" width="0.4204%" height="15" fill="rgb(253,11,6)" fg:x="4356352862" fg:w="249207653"/><text x="7.5982%" y="127.50"></text></g><g><title>shiro::engine::move_gen::masks::pext_dg_lookup (22,167,131 samples, 0.04%)</title><rect x="7.7312%" y="101" width="0.0374%" height="15" fill="rgb(247,143,39)" fg:x="4583393384" fg:w="22167131"/><text x="7.9812%" y="111.50"></text></g><g><title>core::cmp::PartialEq::ne (16,654,339 samples, 0.03%)</title><rect x="7.7966%" y="101" width="0.0281%" height="15" fill="rgb(236,97,10)" fg:x="4622179691" fg:w="16654339"/><text x="8.0466%" y="111.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (16,654,339 samples, 0.03%)</title><rect x="7.7966%" y="85" width="0.0281%" height="15" fill="rgb(233,208,19)" fg:x="4622179691" fg:w="16654339"/><text x="8.0466%" y="95.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (265,962,203 samples, 0.45%)</title><rect x="7.8247%" y="101" width="0.4486%" height="15" fill="rgb(216,164,2)" fg:x="4638834030" fg:w="265962203"/><text x="8.0747%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (149,621,268 samples, 0.25%)</title><rect x="8.0210%" y="85" width="0.2524%" height="15" fill="rgb(220,129,5)" fg:x="4755174965" fg:w="149621268"/><text x="8.2710%" y="95.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (83,156,708 samples, 0.14%)</title><rect x="8.2734%" y="101" width="0.1403%" height="15" fill="rgb(242,17,10)" fg:x="4904796233" fg:w="83156708"/><text x="8.5234%" y="111.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push_unchecked (77,598,311 samples, 0.13%)</title><rect x="8.2827%" y="85" width="0.1309%" height="15" fill="rgb(242,107,0)" fg:x="4910354630" fg:w="77598311"/><text x="8.5327%" y="95.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (77,598,311 samples, 0.13%)</title><rect x="8.2827%" y="69" width="0.1309%" height="15" fill="rgb(251,28,31)" fg:x="4910354630" fg:w="77598311"/><text x="8.5327%" y="79.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_hv (426,696,450 samples, 0.72%)</title><rect x="7.7686%" y="117" width="0.7197%" height="15" fill="rgb(233,223,10)" fg:x="4605560515" fg:w="426696450"/><text x="8.0186%" y="127.50"></text></g><g><title>shiro::engine::move_gen::masks::pext_hv_lookup (44,304,024 samples, 0.07%)</title><rect x="8.4136%" y="101" width="0.0747%" height="15" fill="rgb(215,21,27)" fg:x="4987952941" fg:w="44304024"/><text x="8.6636%" y="111.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (11,070,607 samples, 0.02%)</title><rect x="8.4697%" y="85" width="0.0187%" height="15" fill="rgb(232,23,21)" fg:x="5021186358" fg:w="11070607"/><text x="8.7197%" y="95.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (11,070,607 samples, 0.02%)</title><rect x="8.4697%" y="69" width="0.0187%" height="15" fill="rgb(244,5,23)" fg:x="5021186358" fg:w="11070607"/><text x="8.7197%" y="79.50"></text></g><g><title>core::slice::index::get_noubcheck (11,070,607 samples, 0.02%)</title><rect x="8.4697%" y="53" width="0.0187%" height="15" fill="rgb(226,81,46)" fg:x="5021186358" fg:w="11070607"/><text x="8.7197%" y="63.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (6,002,178 samples, 0.01%)</title><rect x="8.4884%" y="101" width="0.0101%" height="15" fill="rgb(247,70,30)" fg:x="5032256965" fg:w="6002178"/><text x="8.7384%" y="111.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (6,002,178 samples, 0.01%)</title><rect x="8.4884%" y="85" width="0.0101%" height="15" fill="rgb(212,68,19)" fg:x="5032256965" fg:w="6002178"/><text x="8.7384%" y="95.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push_unchecked (16,610,323 samples, 0.03%)</title><rect x="8.5078%" y="85" width="0.0280%" height="15" fill="rgb(240,187,13)" fg:x="5043799716" fg:w="16610323"/><text x="8.7578%" y="95.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (16,610,323 samples, 0.03%)</title><rect x="8.5078%" y="69" width="0.0280%" height="15" fill="rgb(223,113,26)" fg:x="5043799716" fg:w="16610323"/><text x="8.7578%" y="79.50"></text></g><g><title>core::ptr::write (11,070,542 samples, 0.02%)</title><rect x="8.5172%" y="53" width="0.0187%" height="15" fill="rgb(206,192,2)" fg:x="5049339497" fg:w="11070542"/><text x="8.7672%" y="63.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_king_castle (33,694,885 samples, 0.06%)</title><rect x="8.4884%" y="117" width="0.0568%" height="15" fill="rgb(241,108,4)" fg:x="5032256965" fg:w="33694885"/><text x="8.7384%" y="127.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (27,692,707 samples, 0.05%)</title><rect x="8.4985%" y="101" width="0.0467%" height="15" fill="rgb(247,173,49)" fg:x="5038259143" fg:w="27692707"/><text x="8.7485%" y="111.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (27,702,738 samples, 0.05%)</title><rect x="8.5545%" y="101" width="0.0467%" height="15" fill="rgb(224,114,35)" fg:x="5071488811" fg:w="27702738"/><text x="8.8045%" y="111.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_king_normal (38,781,436 samples, 0.07%)</title><rect x="8.5452%" y="117" width="0.0654%" height="15" fill="rgb(245,159,27)" fg:x="5065951850" fg:w="38781436"/><text x="8.7952%" y="127.50"></text></g><g><title>core::cmp::PartialEq::ne (33,232,164 samples, 0.06%)</title><rect x="8.6480%" y="101" width="0.0561%" height="15" fill="rgb(245,172,44)" fg:x="5126889340" fg:w="33232164"/><text x="8.8980%" y="111.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (33,232,164 samples, 0.06%)</title><rect x="8.6480%" y="85" width="0.0561%" height="15" fill="rgb(236,23,11)" fg:x="5126889340" fg:w="33232164"/><text x="8.8980%" y="95.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (49,830,770 samples, 0.08%)</title><rect x="8.7040%" y="101" width="0.0841%" height="15" fill="rgb(205,117,38)" fg:x="5160121504" fg:w="49830770"/><text x="8.9540%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (38,759,130 samples, 0.07%)</title><rect x="8.7227%" y="85" width="0.0654%" height="15" fill="rgb(237,72,25)" fg:x="5171193144" fg:w="38759130"/><text x="8.9727%" y="95.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_knight (143,989,845 samples, 0.24%)</title><rect x="8.6106%" y="117" width="0.2429%" height="15" fill="rgb(244,70,9)" fg:x="5104733286" fg:w="143989845"/><text x="8.8606%" y="127.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (38,770,857 samples, 0.07%)</title><rect x="8.7881%" y="101" width="0.0654%" height="15" fill="rgb(217,125,39)" fg:x="5209952274" fg:w="38770857"/><text x="9.0381%" y="111.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push_unchecked (33,232,160 samples, 0.06%)</title><rect x="8.7974%" y="85" width="0.0561%" height="15" fill="rgb(235,36,10)" fg:x="5215490971" fg:w="33232160"/><text x="9.0474%" y="95.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (33,232,160 samples, 0.06%)</title><rect x="8.7974%" y="69" width="0.0561%" height="15" fill="rgb(251,123,47)" fg:x="5215490971" fg:w="33232160"/><text x="9.0474%" y="79.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (11,082,644 samples, 0.02%)</title><rect x="8.8909%" y="101" width="0.0187%" height="15" fill="rgb(221,13,13)" fg:x="5270875285" fg:w="11082644"/><text x="9.1409%" y="111.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (11,082,644 samples, 0.02%)</title><rect x="8.8909%" y="85" width="0.0187%" height="15" fill="rgb(238,131,9)" fg:x="5270875285" fg:w="11082644"/><text x="9.1409%" y="95.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (22,155,760 samples, 0.04%)</title><rect x="8.9189%" y="101" width="0.0374%" height="15" fill="rgb(211,50,8)" fg:x="5287493301" fg:w="22155760"/><text x="9.1689%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (22,155,760 samples, 0.04%)</title><rect x="8.9189%" y="85" width="0.0374%" height="15" fill="rgb(245,182,24)" fg:x="5287493301" fg:w="22155760"/><text x="9.1689%" y="95.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push_unchecked (27,688,827 samples, 0.05%)</title><rect x="8.9656%" y="85" width="0.0467%" height="15" fill="rgb(242,14,37)" fg:x="5315188209" fg:w="27688827"/><text x="9.2156%" y="95.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (27,688,827 samples, 0.05%)</title><rect x="8.9656%" y="69" width="0.0467%" height="15" fill="rgb(246,228,12)" fg:x="5315188209" fg:w="27688827"/><text x="9.2156%" y="79.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_pawn_captures (99,696,957 samples, 0.17%)</title><rect x="8.8535%" y="117" width="0.1682%" height="15" fill="rgb(213,55,15)" fg:x="5248723131" fg:w="99696957"/><text x="9.1035%" y="127.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (38,771,027 samples, 0.07%)</title><rect x="8.9563%" y="101" width="0.0654%" height="15" fill="rgb(209,9,3)" fg:x="5309649061" fg:w="38771027"/><text x="9.2063%" y="111.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (34,911,227 samples, 0.06%)</title><rect x="9.0875%" y="101" width="0.0589%" height="15" fill="rgb(230,59,30)" fg:x="5387480728" fg:w="34911227"/><text x="9.3375%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (23,828,731 samples, 0.04%)</title><rect x="9.1062%" y="85" width="0.0402%" height="15" fill="rgb(209,121,21)" fg:x="5398563224" fg:w="23828731"/><text x="9.3562%" y="95.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push_unchecked (38,772,568 samples, 0.07%)</title><rect x="9.1651%" y="85" width="0.0654%" height="15" fill="rgb(220,109,13)" fg:x="5433466226" fg:w="38772568"/><text x="9.4151%" y="95.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (38,772,568 samples, 0.07%)</title><rect x="9.1651%" y="69" width="0.0654%" height="15" fill="rgb(232,18,1)" fg:x="5433466226" fg:w="38772568"/><text x="9.4151%" y="79.50"></text></g><g><title>[unknown] (5,514,140,113 samples, 9.30%)</title><rect x="0.0001%" y="165" width="9.3012%" height="15" fill="rgb(215,41,42)" fg:x="34489" fg:w="5514140113"/><text x="0.2501%" y="175.50">[unknown]</text></g><g><title>shiro::engine::move_gen::gen_moves (1,385,154,511 samples, 2.34%)</title><rect x="6.9648%" y="149" width="2.3365%" height="15" fill="rgb(224,123,36)" fg:x="4129020091" fg:w="1385154511"/><text x="7.2148%" y="159.50">s..</text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_all_moves (1,163,352,602 samples, 1.96%)</title><rect x="7.3389%" y="133" width="1.9623%" height="15" fill="rgb(240,125,3)" fg:x="4350822000" fg:w="1163352602"/><text x="7.5889%" y="143.50">s..</text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_pawn_pushes (165,754,514 samples, 0.28%)</title><rect x="9.0217%" y="117" width="0.2796%" height="15" fill="rgb(205,98,50)" fg:x="5348420088" fg:w="165754514"/><text x="9.2717%" y="127.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (86,241,732 samples, 0.15%)</title><rect x="9.1558%" y="101" width="0.1455%" height="15" fill="rgb(205,185,37)" fg:x="5427932870" fg:w="86241732"/><text x="9.4058%" y="111.50"></text></g><g><title>shiro::engine::common::chess_move::Move::with_start (41,935,808 samples, 0.07%)</title><rect x="9.2305%" y="85" width="0.0707%" height="15" fill="rgb(238,207,15)" fg:x="5472238794" fg:w="41935808"/><text x="9.4805%" y="95.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_start (41,935,808 samples, 0.07%)</title><rect x="9.2305%" y="69" width="0.0707%" height="15" fill="rgb(213,199,42)" fg:x="5472238794" fg:w="41935808"/><text x="9.4805%" y="79.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_start_checked (41,935,808 samples, 0.07%)</title><rect x="9.2305%" y="53" width="0.0707%" height="15" fill="rgb(235,201,11)" fg:x="5472238794" fg:w="41935808"/><text x="9.4805%" y="63.50"></text></g><g><title>&lt;modular_bitfield::specifiers::B6 as modular_bitfield::Specifier&gt;::into_bytes (41,935,808 samples, 0.07%)</title><rect x="9.2305%" y="37" width="0.0707%" height="15" fill="rgb(207,46,11)" fg:x="5472238794" fg:w="41935808"/><text x="9.4805%" y="47.50"></text></g><g><title>core::core_arch::x86_64::bmi2::_pext_u64 (516,481,057 samples, 0.87%)</title><rect x="9.3012%" y="165" width="0.8712%" height="15" fill="rgb(241,35,35)" fg:x="5514174602" fg:w="516481057"/><text x="9.5512%" y="175.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (94,431,657 samples, 0.16%)</title><rect x="10.9125%" y="133" width="0.1593%" height="15" fill="rgb(243,32,47)" fg:x="6469406396" fg:w="94431657"/><text x="11.1625%" y="143.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (94,431,657 samples, 0.16%)</title><rect x="10.9125%" y="117" width="0.1593%" height="15" fill="rgb(247,202,23)" fg:x="6469406396" fg:w="94431657"/><text x="11.1625%" y="127.50"></text></g><g><title>core::cmp::PartialEq::ne (160,828,482 samples, 0.27%)</title><rect x="11.0718%" y="133" width="0.2713%" height="15" fill="rgb(219,102,11)" fg:x="6563838053" fg:w="160828482"/><text x="11.3218%" y="143.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (160,828,482 samples, 0.27%)</title><rect x="11.0718%" y="117" width="0.2713%" height="15" fill="rgb(243,110,44)" fg:x="6563838053" fg:w="160828482"/><text x="11.3218%" y="127.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (199,316,466 samples, 0.34%)</title><rect x="11.3431%" y="133" width="0.3362%" height="15" fill="rgb(222,74,54)" fg:x="6724666535" fg:w="199316466"/><text x="11.5931%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (60,890,576 samples, 0.10%)</title><rect x="11.5766%" y="117" width="0.1027%" height="15" fill="rgb(216,99,12)" fg:x="6863092425" fg:w="60890576"/><text x="11.8266%" y="127.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (99,679,747 samples, 0.17%)</title><rect x="11.6793%" y="133" width="0.1681%" height="15" fill="rgb(226,22,26)" fg:x="6923983001" fg:w="99679747"/><text x="11.9293%" y="143.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push_unchecked (83,073,412 samples, 0.14%)</title><rect x="11.7073%" y="117" width="0.1401%" height="15" fill="rgb(217,163,10)" fg:x="6940589336" fg:w="83073412"/><text x="11.9573%" y="127.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (83,073,412 samples, 0.14%)</title><rect x="11.7073%" y="101" width="0.1401%" height="15" fill="rgb(213,25,53)" fg:x="6940589336" fg:w="83073412"/><text x="11.9573%" y="111.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_dg (698,742,671 samples, 1.18%)</title><rect x="10.6968%" y="149" width="1.1786%" height="15" fill="rgb(252,105,26)" fg:x="6341526626" fg:w="698742671"/><text x="10.9468%" y="159.50"></text></g><g><title>shiro::engine::move_gen::masks::pext_dg_lookup (16,606,549 samples, 0.03%)</title><rect x="11.8474%" y="133" width="0.0280%" height="15" fill="rgb(220,39,43)" fg:x="7023662748" fg:w="16606549"/><text x="12.0974%" y="143.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (77,771,981 samples, 0.13%)</title><rect x="12.5133%" y="133" width="0.1312%" height="15" fill="rgb(229,68,48)" fg:x="7418437826" fg:w="77771981"/><text x="12.7633%" y="143.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (77,771,981 samples, 0.13%)</title><rect x="12.5133%" y="117" width="0.1312%" height="15" fill="rgb(252,8,32)" fg:x="7418437826" fg:w="77771981"/><text x="12.7633%" y="127.50"></text></g><g><title>core::cmp::PartialEq::ne (361,104,711 samples, 0.61%)</title><rect x="12.6445%" y="133" width="0.6091%" height="15" fill="rgb(223,20,43)" fg:x="7496209807" fg:w="361104711"/><text x="12.8945%" y="143.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (361,104,711 samples, 0.61%)</title><rect x="12.6445%" y="117" width="0.6091%" height="15" fill="rgb(229,81,49)" fg:x="7496209807" fg:w="361104711"/><text x="12.8945%" y="127.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (4,966,385,607 samples, 8.38%)</title><rect x="13.2536%" y="133" width="8.3772%" height="15" fill="rgb(236,28,36)" fg:x="7857314518" fg:w="4966385607"/><text x="13.5036%" y="143.50">shiro::engin..</text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (1,942,560,845 samples, 3.28%)</title><rect x="18.3542%" y="117" width="3.2767%" height="15" fill="rgb(249,185,26)" fg:x="10881139280" fg:w="1942560845"/><text x="18.6042%" y="127.50">cor..</text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (2,335,122,969 samples, 3.94%)</title><rect x="21.6309%" y="133" width="3.9389%" height="15" fill="rgb(249,174,33)" fg:x="12823700125" fg:w="2335122969"/><text x="21.8809%" y="143.50">shir..</text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push_unchecked (2,229,595,763 samples, 3.76%)</title><rect x="21.8089%" y="117" width="3.7609%" height="15" fill="rgb(233,201,37)" fg:x="12929227331" fg:w="2229595763"/><text x="22.0589%" y="127.50">arra..</text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (2,229,595,763 samples, 3.76%)</title><rect x="21.8089%" y="101" width="3.7609%" height="15" fill="rgb(221,78,26)" fg:x="12929227331" fg:w="2229595763"/><text x="22.0589%" y="111.50">arra..</text></g><g><title>core::ptr::write (11,116,119 samples, 0.02%)</title><rect x="25.5510%" y="85" width="0.0188%" height="15" fill="rgb(250,127,30)" fg:x="15147706975" fg:w="11116119"/><text x="25.8010%" y="95.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_hv (8,424,263,205 samples, 14.21%)</title><rect x="11.8754%" y="149" width="14.2099%" height="15" fill="rgb(230,49,44)" fg:x="7040269297" fg:w="8424263205"/><text x="12.1254%" y="159.50">shiro::engine::move_ge..</text></g><g><title>shiro::engine::move_gen::masks::pext_hv_lookup (305,709,408 samples, 0.52%)</title><rect x="25.5697%" y="133" width="0.5157%" height="15" fill="rgb(229,67,23)" fg:x="15158823094" fg:w="305709408"/><text x="25.8197%" y="143.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (33,666,446 samples, 0.06%)</title><rect x="26.0286%" y="117" width="0.0568%" height="15" fill="rgb(249,83,47)" fg:x="15430866056" fg:w="33666446"/><text x="26.2786%" y="127.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (33,666,446 samples, 0.06%)</title><rect x="26.0286%" y="101" width="0.0568%" height="15" fill="rgb(215,43,3)" fg:x="15430866056" fg:w="33666446"/><text x="26.2786%" y="111.50"></text></g><g><title>core::slice::index::get_noubcheck (33,666,446 samples, 0.06%)</title><rect x="26.0286%" y="85" width="0.0568%" height="15" fill="rgb(238,154,13)" fg:x="15430866056" fg:w="33666446"/><text x="26.2786%" y="95.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_king_castle (16,643,426 samples, 0.03%)</title><rect x="26.0854%" y="149" width="0.0281%" height="15" fill="rgb(219,56,2)" fg:x="15464532502" fg:w="16643426"/><text x="26.3354%" y="159.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (11,109,763 samples, 0.02%)</title><rect x="26.0947%" y="133" width="0.0187%" height="15" fill="rgb(233,0,4)" fg:x="15470066165" fg:w="11109763"/><text x="26.3447%" y="143.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (260,829,828 samples, 0.44%)</title><rect x="26.1416%" y="133" width="0.4400%" height="15" fill="rgb(235,30,7)" fg:x="15497844407" fg:w="260829828"/><text x="26.3916%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (160,953,118 samples, 0.27%)</title><rect x="26.3101%" y="117" width="0.2715%" height="15" fill="rgb(250,79,13)" fg:x="15597721117" fg:w="160953118"/><text x="26.5601%" y="127.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_king_normal (327,447,230 samples, 0.55%)</title><rect x="26.1135%" y="149" width="0.5523%" height="15" fill="rgb(211,146,34)" fg:x="15481175928" fg:w="327447230"/><text x="26.3635%" y="159.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (49,948,923 samples, 0.08%)</title><rect x="26.5815%" y="133" width="0.0843%" height="15" fill="rgb(228,22,38)" fg:x="15758674235" fg:w="49948923"/><text x="26.8315%" y="143.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push_unchecked (33,282,138 samples, 0.06%)</title><rect x="26.6097%" y="117" width="0.0561%" height="15" fill="rgb(235,168,5)" fg:x="15775341020" fg:w="33282138"/><text x="26.8597%" y="127.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (33,282,138 samples, 0.06%)</title><rect x="26.6097%" y="101" width="0.0561%" height="15" fill="rgb(221,155,16)" fg:x="15775341020" fg:w="33282138"/><text x="26.8597%" y="111.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitOr&gt;::bitor (49,953,597 samples, 0.08%)</title><rect x="26.7032%" y="133" width="0.0843%" height="15" fill="rgb(215,215,53)" fg:x="15830769988" fg:w="49953597"/><text x="26.9532%" y="143.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitOr&gt;::bitor (49,953,597 samples, 0.08%)</title><rect x="26.7032%" y="117" width="0.0843%" height="15" fill="rgb(223,4,10)" fg:x="15830769988" fg:w="49953597"/><text x="26.9532%" y="127.50"></text></g><g><title>core::cmp::PartialEq::ne (34,214,497 samples, 0.06%)</title><rect x="26.7968%" y="133" width="0.0577%" height="15" fill="rgb(234,103,6)" fg:x="15886279691" fg:w="34214497"/><text x="27.0468%" y="143.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (34,214,497 samples, 0.06%)</title><rect x="26.7968%" y="117" width="0.0577%" height="15" fill="rgb(227,97,0)" fg:x="15886279691" fg:w="34214497"/><text x="27.0468%" y="127.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (11,075,834 samples, 0.02%)</title><rect x="26.8545%" y="133" width="0.0187%" height="15" fill="rgb(234,150,53)" fg:x="15920494188" fg:w="11075834"/><text x="27.1045%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (11,075,834 samples, 0.02%)</title><rect x="26.8545%" y="117" width="0.0187%" height="15" fill="rgb(228,201,54)" fg:x="15920494188" fg:w="11075834"/><text x="27.1045%" y="127.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_knight (128,480,520 samples, 0.22%)</title><rect x="26.6658%" y="149" width="0.2167%" height="15" fill="rgb(222,22,37)" fg:x="15808623158" fg:w="128480520"/><text x="26.9158%" y="159.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (100,204,833 samples, 0.17%)</title><rect x="27.0042%" y="133" width="0.1690%" height="15" fill="rgb(237,53,32)" fg:x="16009266561" fg:w="100204833"/><text x="27.2542%" y="143.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (100,204,833 samples, 0.17%)</title><rect x="27.0042%" y="117" width="0.1690%" height="15" fill="rgb(233,25,53)" fg:x="16009266561" fg:w="100204833"/><text x="27.2542%" y="127.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitXorAssign&gt;::bitxor_assign (16,674,412 samples, 0.03%)</title><rect x="27.1826%" y="133" width="0.0281%" height="15" fill="rgb(210,40,34)" fg:x="16115030316" fg:w="16674412"/><text x="27.4326%" y="143.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitXorAssign&gt;::bitxor_assign (16,674,412 samples, 0.03%)</title><rect x="27.1826%" y="117" width="0.0281%" height="15" fill="rgb(241,220,44)" fg:x="16115030316" fg:w="16674412"/><text x="27.4326%" y="127.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::Shr&lt;__RhsT&gt;&gt;::shr (22,222,198 samples, 0.04%)</title><rect x="27.2201%" y="133" width="0.0375%" height="15" fill="rgb(235,28,35)" fg:x="16137249306" fg:w="22222198"/><text x="27.4701%" y="143.50"></text></g><g><title>&lt;u64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (22,222,198 samples, 0.04%)</title><rect x="27.2201%" y="117" width="0.0375%" height="15" fill="rgb(210,56,17)" fg:x="16137249306" fg:w="22222198"/><text x="27.4701%" y="127.50"></text></g><g><title>core::cmp::PartialEq::ne (16,650,162 samples, 0.03%)</title><rect x="27.2576%" y="133" width="0.0281%" height="15" fill="rgb(224,130,29)" fg:x="16159471504" fg:w="16650162"/><text x="27.5076%" y="143.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (16,650,162 samples, 0.03%)</title><rect x="27.2576%" y="117" width="0.0281%" height="15" fill="rgb(235,212,8)" fg:x="16159471504" fg:w="16650162"/><text x="27.5076%" y="127.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_pawn_captures (251,325,394 samples, 0.42%)</title><rect x="26.8825%" y="149" width="0.4239%" height="15" fill="rgb(223,33,50)" fg:x="15937103678" fg:w="251325394"/><text x="27.1325%" y="159.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (12,307,406 samples, 0.02%)</title><rect x="27.2857%" y="133" width="0.0208%" height="15" fill="rgb(219,149,13)" fg:x="16176121666" fg:w="12307406"/><text x="27.5357%" y="143.50"></text></g><g><title>shiro::engine::common::chess_move::Move::with_start (12,307,406 samples, 0.02%)</title><rect x="27.2857%" y="117" width="0.0208%" height="15" fill="rgb(250,156,29)" fg:x="16176121666" fg:w="12307406"/><text x="27.5357%" y="127.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_start (12,307,406 samples, 0.02%)</title><rect x="27.2857%" y="101" width="0.0208%" height="15" fill="rgb(216,193,19)" fg:x="16176121666" fg:w="12307406"/><text x="27.5357%" y="111.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_start_checked (12,307,406 samples, 0.02%)</title><rect x="27.2857%" y="85" width="0.0208%" height="15" fill="rgb(216,135,14)" fg:x="16176121666" fg:w="12307406"/><text x="27.5357%" y="95.50"></text></g><g><title>&lt;modular_bitfield::specifiers::B6 as modular_bitfield::Specifier&gt;::into_bytes (12,307,406 samples, 0.02%)</title><rect x="27.2857%" y="69" width="0.0208%" height="15" fill="rgb(241,47,5)" fg:x="16176121666" fg:w="12307406"/><text x="27.5357%" y="79.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (49,994,942 samples, 0.08%)</title><rect x="27.4936%" y="133" width="0.0843%" height="15" fill="rgb(233,42,35)" fg:x="16299397378" fg:w="49994942"/><text x="27.7436%" y="143.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (49,994,942 samples, 0.08%)</title><rect x="27.4936%" y="117" width="0.0843%" height="15" fill="rgb(231,13,6)" fg:x="16299397378" fg:w="49994942"/><text x="27.7436%" y="127.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAndAssign&gt;::bitand_assign (27,724,208 samples, 0.05%)</title><rect x="27.5780%" y="133" width="0.0468%" height="15" fill="rgb(207,181,40)" fg:x="16349392320" fg:w="27724208"/><text x="27.8280%" y="143.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAndAssign&gt;::bitand_assign (27,724,208 samples, 0.05%)</title><rect x="27.5780%" y="117" width="0.0468%" height="15" fill="rgb(254,173,49)" fg:x="16349392320" fg:w="27724208"/><text x="27.8280%" y="127.50"></text></g><g><title>core::cmp::PartialEq::ne (16,686,980 samples, 0.03%)</title><rect x="27.6247%" y="133" width="0.0281%" height="15" fill="rgb(221,1,38)" fg:x="16377116528" fg:w="16686980"/><text x="27.8747%" y="143.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (16,686,980 samples, 0.03%)</title><rect x="27.6247%" y="117" width="0.0281%" height="15" fill="rgb(206,124,46)" fg:x="16377116528" fg:w="16686980"/><text x="27.8747%" y="127.50"></text></g><g><title>shiro::engine::common::constants::rank_from_pos (11,093,620 samples, 0.02%)</title><rect x="27.6529%" y="133" width="0.0187%" height="15" fill="rgb(249,21,11)" fg:x="16393803508" fg:w="11093620"/><text x="27.9029%" y="143.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::Shr&lt;__RhsT&gt;&gt;::shr (11,093,620 samples, 0.02%)</title><rect x="27.6529%" y="117" width="0.0187%" height="15" fill="rgb(222,201,40)" fg:x="16393803508" fg:w="11093620"/><text x="27.9029%" y="127.50"></text></g><g><title>&lt;u64 as core::ops::bit::Shr&lt;usize&gt;&gt;::shr (11,093,620 samples, 0.02%)</title><rect x="27.6529%" y="101" width="0.0187%" height="15" fill="rgb(235,61,29)" fg:x="16393803508" fg:w="11093620"/><text x="27.9029%" y="111.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::unbounded_shr (27,759,753 samples, 0.05%)</title><rect x="27.6716%" y="133" width="0.0468%" height="15" fill="rgb(219,207,3)" fg:x="16404897128" fg:w="27759753"/><text x="27.9216%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::unbounded_shr (27,759,753 samples, 0.05%)</title><rect x="27.6716%" y="117" width="0.0468%" height="15" fill="rgb(222,56,46)" fg:x="16404897128" fg:w="27759753"/><text x="27.9216%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::unchecked_shr (27,759,753 samples, 0.05%)</title><rect x="27.6716%" y="101" width="0.0468%" height="15" fill="rgb(239,76,54)" fg:x="16404897128" fg:w="27759753"/><text x="27.9216%" y="111.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_all_moves (10,418,628,829 samples, 17.57%)</title><rect x="10.1724%" y="165" width="17.5740%" height="15" fill="rgb(231,124,27)" fg:x="6030655659" fg:w="10418628829"/><text x="10.4224%" y="175.50">shiro::engine::move_gen::Mo..</text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_pawn_pushes (260,855,416 samples, 0.44%)</title><rect x="27.3065%" y="149" width="0.4400%" height="15" fill="rgb(249,195,6)" fg:x="16188429072" fg:w="260855416"/><text x="27.5565%" y="159.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_promotions (11,088,662 samples, 0.02%)</title><rect x="27.7278%" y="133" width="0.0187%" height="15" fill="rgb(237,174,47)" fg:x="16438195826" fg:w="11088662"/><text x="27.9778%" y="143.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (16,624,394 samples, 0.03%)</title><rect x="29.6009%" y="149" width="0.0280%" height="15" fill="rgb(206,201,31)" fg:x="17548661034" fg:w="16624394"/><text x="29.8509%" y="159.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (16,624,394 samples, 0.03%)</title><rect x="29.6009%" y="133" width="0.0280%" height="15" fill="rgb(231,57,52)" fg:x="17548661034" fg:w="16624394"/><text x="29.8509%" y="143.50"></text></g><g><title>core::cmp::PartialEq::ne (11,091,450 samples, 0.02%)</title><rect x="29.6756%" y="133" width="0.0187%" height="15" fill="rgb(248,177,22)" fg:x="17592976556" fg:w="11091450"/><text x="29.9256%" y="143.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (11,091,450 samples, 0.02%)</title><rect x="29.6756%" y="117" width="0.0187%" height="15" fill="rgb(215,211,37)" fg:x="17592976556" fg:w="11091450"/><text x="29.9256%" y="127.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_check_and_pin_masks (60,954,624 samples, 0.10%)</title><rect x="29.6289%" y="149" width="0.1028%" height="15" fill="rgb(241,128,51)" fg:x="17565285428" fg:w="60954624"/><text x="29.8789%" y="159.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (16,610,612 samples, 0.03%)</title><rect x="29.7037%" y="133" width="0.0280%" height="15" fill="rgb(227,165,31)" fg:x="17609629440" fg:w="16610612"/><text x="29.9537%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (11,073,218 samples, 0.02%)</title><rect x="29.7131%" y="117" width="0.0187%" height="15" fill="rgb(228,167,24)" fg:x="17615166834" fg:w="11073218"/><text x="29.9631%" y="127.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitOrAssign&gt;::bitor_assign (11,059,655 samples, 0.02%)</title><rect x="29.7504%" y="133" width="0.0187%" height="15" fill="rgb(228,143,12)" fg:x="17637323267" fg:w="11059655"/><text x="30.0004%" y="143.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitOrAssign&gt;::bitor_assign (11,059,655 samples, 0.02%)</title><rect x="29.7504%" y="117" width="0.0187%" height="15" fill="rgb(249,149,8)" fg:x="17637323267" fg:w="11059655"/><text x="30.0004%" y="127.50"></text></g><g><title>core::cmp::PartialEq::ne (33,262,171 samples, 0.06%)</title><rect x="29.7691%" y="133" width="0.0561%" height="15" fill="rgb(243,35,44)" fg:x="17648382922" fg:w="33262171"/><text x="30.0191%" y="143.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (33,262,171 samples, 0.06%)</title><rect x="29.7691%" y="117" width="0.0561%" height="15" fill="rgb(246,89,9)" fg:x="17648382922" fg:w="33262171"/><text x="30.0191%" y="127.50"></text></g><g><title>shiro::engine::move_gen::masks::pext_dg_lookup (16,611,707 samples, 0.03%)</title><rect x="29.8626%" y="133" width="0.0280%" height="15" fill="rgb(233,213,13)" fg:x="17703822187" fg:w="16611707"/><text x="30.1126%" y="143.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::new (1,276,692,774 samples, 2.15%)</title><rect x="27.7465%" y="165" width="2.1535%" height="15" fill="rgb(233,141,41)" fg:x="16449284488" fg:w="1276692774"/><text x="27.9965%" y="175.50">s..</text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_seen_by_enemy (99,737,210 samples, 0.17%)</title><rect x="29.7317%" y="149" width="0.1682%" height="15" fill="rgb(239,167,4)" fg:x="17626240052" fg:w="99737210"/><text x="29.9817%" y="159.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (38,866,190 samples, 0.07%)</title><rect x="37.4316%" y="117" width="0.0656%" height="15" fill="rgb(209,217,16)" fg:x="22191070467" fg:w="38866190"/><text x="37.6816%" y="127.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (38,866,190 samples, 0.07%)</title><rect x="37.4316%" y="101" width="0.0656%" height="15" fill="rgb(219,88,35)" fg:x="22191070467" fg:w="38866190"/><text x="37.6816%" y="111.50"></text></g><g><title>core::cmp::PartialEq::ne (144,294,575 samples, 0.24%)</title><rect x="37.4972%" y="117" width="0.2434%" height="15" fill="rgb(220,193,23)" fg:x="22229936657" fg:w="144294575"/><text x="37.7472%" y="127.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (144,294,575 samples, 0.24%)</title><rect x="37.4972%" y="101" width="0.2434%" height="15" fill="rgb(230,90,52)" fg:x="22229936657" fg:w="144294575"/><text x="37.7472%" y="111.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (166,161,053 samples, 0.28%)</title><rect x="37.7406%" y="117" width="0.2803%" height="15" fill="rgb(252,106,19)" fg:x="22374231232" fg:w="166161053"/><text x="37.9906%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (60,914,190 samples, 0.10%)</title><rect x="37.9181%" y="101" width="0.1027%" height="15" fill="rgb(206,74,20)" fg:x="22479478095" fg:w="60914190"/><text x="38.1681%" y="111.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (160,966,483 samples, 0.27%)</title><rect x="38.0209%" y="117" width="0.2715%" height="15" fill="rgb(230,138,44)" fg:x="22540392285" fg:w="160966483"/><text x="38.2709%" y="127.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push_unchecked (138,815,024 samples, 0.23%)</title><rect x="38.0582%" y="101" width="0.2342%" height="15" fill="rgb(235,182,43)" fg:x="22562543744" fg:w="138815024"/><text x="38.3082%" y="111.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (138,815,024 samples, 0.23%)</title><rect x="38.0582%" y="85" width="0.2342%" height="15" fill="rgb(242,16,51)" fg:x="22562543744" fg:w="138815024"/><text x="38.3082%" y="95.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_dg (676,683,942 samples, 1.14%)</title><rect x="37.2257%" y="133" width="1.1414%" height="15" fill="rgb(248,9,4)" fg:x="22068995640" fg:w="676683942"/><text x="37.4757%" y="143.50"></text></g><g><title>shiro::engine::move_gen::masks::pext_dg_lookup (44,320,814 samples, 0.07%)</title><rect x="38.2924%" y="117" width="0.0748%" height="15" fill="rgb(210,31,22)" fg:x="22701358768" fg:w="44320814"/><text x="38.5424%" y="127.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (11,086,580 samples, 0.02%)</title><rect x="38.3484%" y="101" width="0.0187%" height="15" fill="rgb(239,54,39)" fg:x="22734593002" fg:w="11086580"/><text x="38.5984%" y="111.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (11,086,580 samples, 0.02%)</title><rect x="38.3484%" y="85" width="0.0187%" height="15" fill="rgb(230,99,41)" fg:x="22734593002" fg:w="11086580"/><text x="38.5984%" y="95.50"></text></g><g><title>core::slice::index::get_noubcheck (11,086,580 samples, 0.02%)</title><rect x="38.3484%" y="69" width="0.0187%" height="15" fill="rgb(253,106,12)" fg:x="22734593002" fg:w="11086580"/><text x="38.5984%" y="79.50"></text></g><g><title>core::cmp::PartialEq::ne (489,888,830 samples, 0.83%)</title><rect x="39.1729%" y="117" width="0.8263%" height="15" fill="rgb(213,46,41)" fg:x="23223381255" fg:w="489888830"/><text x="39.4229%" y="127.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (489,888,830 samples, 0.83%)</title><rect x="39.1729%" y="101" width="0.8263%" height="15" fill="rgb(215,133,35)" fg:x="23223381255" fg:w="489888830"/><text x="39.4229%" y="111.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (4,912,273,680 samples, 8.29%)</title><rect x="39.9993%" y="117" width="8.2860%" height="15" fill="rgb(213,28,5)" fg:x="23713270085" fg:w="4912273680"/><text x="40.2493%" y="127.50">shiro::engin..</text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (2,223,216,839 samples, 3.75%)</title><rect x="44.5351%" y="101" width="3.7501%" height="15" fill="rgb(215,77,49)" fg:x="26402326926" fg:w="2223216839"/><text x="44.7851%" y="111.50">core..</text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (1,957,322,090 samples, 3.30%)</title><rect x="48.2852%" y="117" width="3.3016%" height="15" fill="rgb(248,100,22)" fg:x="28625543765" fg:w="1957322090"/><text x="48.5352%" y="127.50">shi..</text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push_unchecked (1,790,641,910 samples, 3.02%)</title><rect x="48.5664%" y="101" width="3.0204%" height="15" fill="rgb(208,67,9)" fg:x="28792223945" fg:w="1790641910"/><text x="48.8164%" y="111.50">arr..</text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (1,790,641,910 samples, 3.02%)</title><rect x="48.5664%" y="85" width="3.0204%" height="15" fill="rgb(219,133,21)" fg:x="28792223945" fg:w="1790641910"/><text x="48.8164%" y="95.50">arr..</text></g><g><title>core::ptr::write (11,108,081 samples, 0.02%)</title><rect x="51.5681%" y="69" width="0.0187%" height="15" fill="rgb(246,46,29)" fg:x="30571757774" fg:w="11108081"/><text x="51.8181%" y="79.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_hv (8,047,534,104 samples, 13.57%)</title><rect x="38.3671%" y="133" width="13.5745%" height="15" fill="rgb(246,185,52)" fg:x="22745679582" fg:w="8047534104"/><text x="38.6171%" y="143.50">shiro::engine::move_g..</text></g><g><title>shiro::engine::move_gen::masks::pext_hv_lookup (210,347,831 samples, 0.35%)</title><rect x="51.5868%" y="117" width="0.3548%" height="15" fill="rgb(252,136,11)" fg:x="30582865855" fg:w="210347831"/><text x="51.8368%" y="127.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (33,783,898 samples, 0.06%)</title><rect x="51.8846%" y="101" width="0.0570%" height="15" fill="rgb(219,138,53)" fg:x="30759429788" fg:w="33783898"/><text x="52.1346%" y="111.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (33,783,898 samples, 0.06%)</title><rect x="51.8846%" y="85" width="0.0570%" height="15" fill="rgb(211,51,23)" fg:x="30759429788" fg:w="33783898"/><text x="52.1346%" y="95.50"></text></g><g><title>core::slice::index::get_noubcheck (33,783,898 samples, 0.06%)</title><rect x="51.8846%" y="69" width="0.0570%" height="15" fill="rgb(247,221,28)" fg:x="30759429788" fg:w="33783898"/><text x="52.1346%" y="79.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_king_castle (11,076,882 samples, 0.02%)</title><rect x="51.9416%" y="133" width="0.0187%" height="15" fill="rgb(251,222,45)" fg:x="30793213686" fg:w="11076882"/><text x="52.1916%" y="143.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_king_normal (22,202,498 samples, 0.04%)</title><rect x="51.9603%" y="133" width="0.0375%" height="15" fill="rgb(217,162,53)" fg:x="30804290568" fg:w="22202498"/><text x="52.2103%" y="143.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (11,098,460 samples, 0.02%)</title><rect x="51.9790%" y="117" width="0.0187%" height="15" fill="rgb(229,93,14)" fg:x="30815394606" fg:w="11098460"/><text x="52.2290%" y="127.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitOr&gt;::bitor (11,109,785 samples, 0.02%)</title><rect x="51.9978%" y="117" width="0.0187%" height="15" fill="rgb(209,67,49)" fg:x="30826493066" fg:w="11109785"/><text x="52.2478%" y="127.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitOr&gt;::bitor (11,109,785 samples, 0.02%)</title><rect x="51.9978%" y="101" width="0.0187%" height="15" fill="rgb(213,87,29)" fg:x="30826493066" fg:w="11109785"/><text x="52.2478%" y="111.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_knight (16,662,283 samples, 0.03%)</title><rect x="51.9978%" y="133" width="0.0281%" height="15" fill="rgb(205,151,52)" fg:x="30826493066" fg:w="16662283"/><text x="52.2478%" y="143.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::Shl&lt;__RhsT&gt;&gt;::shl (11,102,695 samples, 0.02%)</title><rect x="52.0446%" y="117" width="0.0187%" height="15" fill="rgb(253,215,39)" fg:x="30854250414" fg:w="11102695"/><text x="52.2946%" y="127.50"></text></g><g><title>&lt;u64 as core::ops::bit::Shl&lt;i32&gt;&gt;::shl (11,102,695 samples, 0.02%)</title><rect x="52.0446%" y="101" width="0.0187%" height="15" fill="rgb(221,220,41)" fg:x="30854250414" fg:w="11102695"/><text x="52.2946%" y="111.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_pawn_captures (33,289,218 samples, 0.06%)</title><rect x="52.0259%" y="133" width="0.0562%" height="15" fill="rgb(218,133,21)" fg:x="30843155349" fg:w="33289218"/><text x="52.2759%" y="143.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (11,749,049 samples, 0.02%)</title><rect x="52.0820%" y="117" width="0.0198%" height="15" fill="rgb(221,193,43)" fg:x="30876444567" fg:w="11749049"/><text x="52.3320%" y="127.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (11,749,049 samples, 0.02%)</title><rect x="52.0820%" y="101" width="0.0198%" height="15" fill="rgb(240,128,52)" fg:x="30876444567" fg:w="11749049"/><text x="52.3320%" y="111.50"></text></g><g><title>core::cmp::PartialEq::ne (11,068,878 samples, 0.02%)</title><rect x="52.1018%" y="117" width="0.0187%" height="15" fill="rgb(253,114,12)" fg:x="30888193616" fg:w="11068878"/><text x="52.3518%" y="127.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (11,068,878 samples, 0.02%)</title><rect x="52.1018%" y="101" width="0.0187%" height="15" fill="rgb(215,223,47)" fg:x="30888193616" fg:w="11068878"/><text x="52.3518%" y="111.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (94,130,051 samples, 0.16%)</title><rect x="52.1205%" y="117" width="0.1588%" height="15" fill="rgb(248,225,23)" fg:x="30899262494" fg:w="94130051"/><text x="52.3705%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (83,055,922 samples, 0.14%)</title><rect x="52.1392%" y="101" width="0.1401%" height="15" fill="rgb(250,108,0)" fg:x="30910336623" fg:w="83055922"/><text x="52.3892%" y="111.50"></text></g><g><title>shiro::engine::move_gen::gen_moves (13,306,259,062 samples, 22.44%)</title><rect x="29.9000%" y="165" width="22.4448%" height="15" fill="rgb(228,208,7)" fg:x="17725977262" fg:w="13306259062"/><text x="30.1500%" y="175.50">shiro::engine::move_gen::gen_moves</text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_all_moves (8,979,858,976 samples, 15.15%)</title><rect x="37.1977%" y="149" width="15.1471%" height="15" fill="rgb(244,45,10)" fg:x="22052377348" fg:w="8979858976"/><text x="37.4477%" y="159.50">shiro::engine::move_gen..</text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_pawn_pushes (155,791,757 samples, 0.26%)</title><rect x="52.0820%" y="133" width="0.2628%" height="15" fill="rgb(207,125,25)" fg:x="30876444567" fg:w="155791757"/><text x="52.3320%" y="143.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (33,290,632 samples, 0.06%)</title><rect x="52.2887%" y="117" width="0.0562%" height="15" fill="rgb(210,195,18)" fg:x="30998945692" fg:w="33290632"/><text x="52.5387%" y="127.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push_unchecked (27,753,087 samples, 0.05%)</title><rect x="52.2980%" y="101" width="0.0468%" height="15" fill="rgb(249,80,12)" fg:x="31004483237" fg:w="27753087"/><text x="52.5480%" y="111.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (27,753,087 samples, 0.05%)</title><rect x="52.2980%" y="85" width="0.0468%" height="15" fill="rgb(221,65,9)" fg:x="31004483237" fg:w="27753087"/><text x="52.5480%" y="95.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as arrayvec::arrayvec_impl::ArrayVecImpl&gt;::len (11,073,239 samples, 0.02%)</title><rect x="52.3261%" y="69" width="0.0187%" height="15" fill="rgb(235,49,36)" fg:x="31021163085" fg:w="11073239"/><text x="52.5761%" y="79.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::len (11,073,239 samples, 0.02%)</title><rect x="52.3261%" y="53" width="0.0187%" height="15" fill="rgb(225,32,20)" fg:x="31021163085" fg:w="11073239"/><text x="52.5761%" y="63.50"></text></g><g><title>&lt;shiro::engine::core::BoardState as core::clone::Clone&gt;::clone (1,883,294,431 samples, 3.18%)</title><rect x="71.1652%" y="149" width="3.1767%" height="15" fill="rgb(215,141,46)" fg:x="42189769086" fg:w="1883294431"/><text x="71.4152%" y="159.50">&lt;sh..</text></g><g><title>[libc.so.6] (1,883,294,431 samples, 3.18%)</title><rect x="71.1652%" y="133" width="3.1767%" height="15" fill="rgb(250,160,47)" fg:x="42189769086" fg:w="1883294431"/><text x="71.4152%" y="143.50">[li..</text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAndAssign&gt;::bitand_assign (94,409,900 samples, 0.16%)</title><rect x="74.3513%" y="149" width="0.1592%" height="15" fill="rgb(216,222,40)" fg:x="44078607663" fg:w="94409900"/><text x="74.6013%" y="159.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAndAssign&gt;::bitand_assign (94,409,900 samples, 0.16%)</title><rect x="74.3513%" y="133" width="0.1592%" height="15" fill="rgb(234,217,39)" fg:x="44078607663" fg:w="94409900"/><text x="74.6013%" y="143.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitOrAssign&gt;::bitor_assign (1,472,623,966 samples, 2.48%)</title><rect x="74.5105%" y="149" width="2.4840%" height="15" fill="rgb(207,178,40)" fg:x="44173017563" fg:w="1472623966"/><text x="74.7605%" y="159.50">&lt;s..</text></g><g><title>&lt;u64 as core::ops::bit::BitOrAssign&gt;::bitor_assign (1,472,623,966 samples, 2.48%)</title><rect x="74.5105%" y="133" width="2.4840%" height="15" fill="rgb(221,136,13)" fg:x="44173017563" fg:w="1472623966"/><text x="74.7605%" y="143.50">&lt;u..</text></g><g><title>[libc.so.6] (11,734,627,030 samples, 19.79%)</title><rect x="77.0039%" y="149" width="19.7938%" height="15" fill="rgb(249,199,10)" fg:x="45651187286" fg:w="11734627030"/><text x="77.2539%" y="159.50">[libc.so.6]</text></g><g><title>shiro::engine::common::chess_move::Move::start (122,170,708 samples, 0.21%)</title><rect x="96.8070%" y="149" width="0.2061%" height="15" fill="rgb(249,222,13)" fg:x="57391344468" fg:w="122170708"/><text x="97.0570%" y="159.50"></text></g><g><title>shiro::engine::common::chess_move::Move::start_or_err (122,170,708 samples, 0.21%)</title><rect x="96.8070%" y="133" width="0.2061%" height="15" fill="rgb(244,185,38)" fg:x="57391344468" fg:w="122170708"/><text x="97.0570%" y="143.50"></text></g><g><title>modular_bitfield::private::proc::read_specifier (122,170,708 samples, 0.21%)</title><rect x="96.8070%" y="117" width="0.2061%" height="15" fill="rgb(236,202,9)" fg:x="57391344468" fg:w="122170708"/><text x="97.0570%" y="127.50"></text></g><g><title>&lt;modular_bitfield::private::push_pop::PushBuffer&lt;u8&gt; as modular_bitfield::private::traits::PushBits&gt;::push_bits (122,170,708 samples, 0.21%)</title><rect x="96.8070%" y="101" width="0.2061%" height="15" fill="rgb(250,229,37)" fg:x="57391344468" fg:w="122170708"/><text x="97.0570%" y="111.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (16,663,593 samples, 0.03%)</title><rect x="97.0974%" y="117" width="0.0281%" height="15" fill="rgb(206,174,23)" fg:x="57563453815" fg:w="16663593"/><text x="97.3474%" y="127.50"></text></g><g><title>&lt;shiro::engine::core::PieceType as modular_bitfield::Specifier&gt;::from_bytes (11,113,460 samples, 0.02%)</title><rect x="97.1255%" y="101" width="0.0187%" height="15" fill="rgb(211,33,43)" fg:x="57580117408" fg:w="11113460"/><text x="97.3755%" y="111.50"></text></g><g><title>shiro::engine::core::BoardState::get_peice_bb_mut (88,782,108 samples, 0.15%)</title><rect x="97.0225%" y="149" width="0.1498%" height="15" fill="rgb(245,58,50)" fg:x="57519074097" fg:w="88782108"/><text x="97.2725%" y="159.50"></text></g><g><title>shiro::engine::core::Piece::ptype (44,402,390 samples, 0.07%)</title><rect x="97.0974%" y="133" width="0.0749%" height="15" fill="rgb(244,68,36)" fg:x="57563453815" fg:w="44402390"/><text x="97.3474%" y="143.50"></text></g><g><title>shiro::engine::core::Piece::ptype_or_err (27,738,797 samples, 0.05%)</title><rect x="97.1255%" y="117" width="0.0468%" height="15" fill="rgb(232,229,15)" fg:x="57580117408" fg:w="27738797"/><text x="97.3755%" y="127.50"></text></g><g><title>modular_bitfield::private::proc::read_specifier (16,625,337 samples, 0.03%)</title><rect x="97.1442%" y="101" width="0.0280%" height="15" fill="rgb(254,30,23)" fg:x="57591230868" fg:w="16625337"/><text x="97.3942%" y="111.50"></text></g><g><title>&lt;modular_bitfield::private::push_pop::PushBuffer&lt;u8&gt; as modular_bitfield::private::traits::PushBits&gt;::push_bits (16,625,337 samples, 0.03%)</title><rect x="97.1442%" y="85" width="0.0280%" height="15" fill="rgb(235,160,14)" fg:x="57591230868" fg:w="16625337"/><text x="97.3942%" y="95.50"></text></g><g><title>shiro::engine::core::Flags::set_has_ep (116,590,399 samples, 0.20%)</title><rect x="97.1816%" y="149" width="0.1967%" height="15" fill="rgb(212,155,44)" fg:x="57613391272" fg:w="116590399"/><text x="97.4316%" y="159.50"></text></g><g><title>shiro::engine::core::Flags::set_has_ep_checked (116,590,399 samples, 0.20%)</title><rect x="97.1816%" y="133" width="0.1967%" height="15" fill="rgb(226,2,50)" fg:x="57613391272" fg:w="116590399"/><text x="97.4316%" y="143.50"></text></g><g><title>modular_bitfield::private::proc::write_specifier (116,590,399 samples, 0.20%)</title><rect x="97.1816%" y="117" width="0.1967%" height="15" fill="rgb(234,177,6)" fg:x="57613391272" fg:w="116590399"/><text x="97.4316%" y="127.50"></text></g><g><title>&lt;shiro::engine::core::Alliance as modular_bitfield::Specifier&gt;::from_bytes (11,099,376 samples, 0.02%)</title><rect x="97.3783%" y="117" width="0.0187%" height="15" fill="rgb(217,24,9)" fg:x="57729981671" fg:w="11099376"/><text x="97.6283%" y="127.50"></text></g><g><title>shiro::engine::core::Flags::turn (122,153,418 samples, 0.21%)</title><rect x="97.3783%" y="149" width="0.2060%" height="15" fill="rgb(220,13,46)" fg:x="57729981671" fg:w="122153418"/><text x="97.6283%" y="159.50"></text></g><g><title>shiro::engine::core::Flags::turn_or_err (122,153,418 samples, 0.21%)</title><rect x="97.3783%" y="133" width="0.2060%" height="15" fill="rgb(239,221,27)" fg:x="57729981671" fg:w="122153418"/><text x="97.6283%" y="143.50"></text></g><g><title>modular_bitfield::private::proc::read_specifier (111,054,042 samples, 0.19%)</title><rect x="97.3970%" y="117" width="0.1873%" height="15" fill="rgb(222,198,25)" fg:x="57741081047" fg:w="111054042"/><text x="97.6470%" y="127.50"></text></g><g><title>&lt;modular_bitfield::private::push_pop::PushBuffer&lt;u8&gt; as modular_bitfield::private::traits::PushBits&gt;::push_bits (111,054,042 samples, 0.19%)</title><rect x="97.3970%" y="101" width="0.1873%" height="15" fill="rgb(211,99,13)" fg:x="57741081047" fg:w="111054042"/><text x="97.6470%" y="111.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (22,191,327 samples, 0.04%)</title><rect x="97.5843%" y="133" width="0.0374%" height="15" fill="rgb(232,111,31)" fg:x="57852135089" fg:w="22191327"/><text x="97.8343%" y="143.50"></text></g><g><title>shiro::engine::core::Piece::ptype (105,520,196 samples, 0.18%)</title><rect x="97.5843%" y="149" width="0.1780%" height="15" fill="rgb(245,82,37)" fg:x="57852135089" fg:w="105520196"/><text x="97.8343%" y="159.50"></text></g><g><title>shiro::engine::core::Piece::ptype_or_err (83,328,869 samples, 0.14%)</title><rect x="97.6217%" y="133" width="0.1406%" height="15" fill="rgb(227,149,46)" fg:x="57874326416" fg:w="83328869"/><text x="97.8717%" y="143.50"></text></g><g><title>modular_bitfield::private::proc::read_specifier (83,328,869 samples, 0.14%)</title><rect x="97.6217%" y="117" width="0.1406%" height="15" fill="rgb(218,36,50)" fg:x="57874326416" fg:w="83328869"/><text x="97.8717%" y="127.50"></text></g><g><title>&lt;modular_bitfield::private::push_pop::PushBuffer&lt;u8&gt; as modular_bitfield::private::traits::PushBits&gt;::push_bits (83,328,869 samples, 0.14%)</title><rect x="97.6217%" y="101" width="0.1406%" height="15" fill="rgb(226,80,48)" fg:x="57874326416" fg:w="83328869"/><text x="97.8717%" y="111.50"></text></g><g><title>shiro::engine::perft::make_move (26,947,585,233 samples, 45.45%)</title><rect x="52.3448%" y="165" width="45.4549%" height="15" fill="rgb(238,224,15)" fg:x="31032236324" fg:w="26947585233"/><text x="52.5948%" y="175.50">shiro::engine::perft::make_move</text></g><g><title>shiro::engine::core::Piece::with_color (22,166,272 samples, 0.04%)</title><rect x="97.7623%" y="149" width="0.0374%" height="15" fill="rgb(241,136,10)" fg:x="57957655285" fg:w="22166272"/><text x="98.0123%" y="159.50"></text></g><g><title>shiro::engine::core::Piece::set_color (22,166,272 samples, 0.04%)</title><rect x="97.7623%" y="133" width="0.0374%" height="15" fill="rgb(208,32,45)" fg:x="57957655285" fg:w="22166272"/><text x="98.0123%" y="143.50"></text></g><g><title>shiro::engine::core::Piece::set_color_checked (22,166,272 samples, 0.04%)</title><rect x="97.7623%" y="117" width="0.0374%" height="15" fill="rgb(207,135,9)" fg:x="57957655285" fg:w="22166272"/><text x="98.0123%" y="127.50"></text></g><g><title>modular_bitfield::private::proc::write_specifier (22,166,272 samples, 0.04%)</title><rect x="97.7623%" y="101" width="0.0374%" height="15" fill="rgb(206,86,44)" fg:x="57957655285" fg:w="22166272"/><text x="98.0123%" y="111.50"></text></g><g><title>&lt;arrayvec::arrayvec::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (205,260,986 samples, 0.35%)</title><rect x="99.0733%" y="149" width="0.3462%" height="15" fill="rgb(245,177,15)" fg:x="58734859455" fg:w="205260986"/><text x="99.3233%" y="159.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::len (66,555,500 samples, 0.11%)</title><rect x="99.3072%" y="133" width="0.1123%" height="15" fill="rgb(206,64,50)" fg:x="58873564941" fg:w="66555500"/><text x="99.5572%" y="143.50"></text></g><g><title>[libc.so.6] (194,252,981 samples, 0.33%)</title><rect x="99.4195%" y="149" width="0.3277%" height="15" fill="rgb(234,36,40)" fg:x="58940120441" fg:w="194252981"/><text x="99.6695%" y="159.50"></text></g><g><title>all (59,284,262,030 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(213,64,8)" fg:x="0" fg:w="59284262030"/><text x="0.2500%" y="207.50"></text></g><g><title>game (59,284,262,030 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(210,75,36)" fg:x="0" fg:w="59284262030"/><text x="0.2500%" y="191.50">game</text></g><g><title>shiro::engine::perft::perft_simple (1,304,440,473 samples, 2.20%)</title><rect x="97.7997%" y="165" width="2.2003%" height="15" fill="rgb(229,88,21)" fg:x="57979821557" fg:w="1304440473"/><text x="98.0497%" y="175.50">s..</text></g><g><title>core::ptr::drop_in_place&lt;arrayvec::arrayvec::ArrayVec&lt;shiro::engine::common::chess_move::Move,256_usize&gt;&gt; (149,888,608 samples, 0.25%)</title><rect x="99.7472%" y="149" width="0.2528%" height="15" fill="rgb(252,204,47)" fg:x="59134373422" fg:w="149888608"/><text x="99.9972%" y="159.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as core::ops::drop::Drop&gt;::drop (149,888,608 samples, 0.25%)</title><rect x="99.7472%" y="133" width="0.2528%" height="15" fill="rgb(208,77,27)" fg:x="59134373422" fg:w="149888608"/><text x="99.9972%" y="143.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::clear (149,888,608 samples, 0.25%)</title><rect x="99.7472%" y="117" width="0.2528%" height="15" fill="rgb(221,76,26)" fg:x="59134373422" fg:w="149888608"/><text x="99.9972%" y="127.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::clear (149,888,608 samples, 0.25%)</title><rect x="99.7472%" y="101" width="0.2528%" height="15" fill="rgb(225,139,18)" fg:x="59134373422" fg:w="149888608"/><text x="99.9972%" y="111.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::truncate (149,888,608 samples, 0.25%)</title><rect x="99.7472%" y="85" width="0.2528%" height="15" fill="rgb(230,137,11)" fg:x="59134373422" fg:w="149888608"/><text x="99.9972%" y="95.50"></text></g></svg></svg>