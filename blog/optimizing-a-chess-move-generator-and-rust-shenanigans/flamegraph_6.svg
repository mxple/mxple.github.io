<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="229.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="229.00"> </text><svg id="frames" x="10" width="1180" total_samples="49629927326"><g><title>[game] (27,498,879 samples, 0.06%)</title><rect x="0.0000%" y="165" width="0.0554%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="27498879"/><text x="0.2500%" y="175.50"></text></g><g><title>shiro::engine::move_gen::gen_moves (27,498,879 samples, 0.06%)</title><rect x="0.0000%" y="149" width="0.0554%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="27498879"/><text x="0.2500%" y="159.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (55,071,698 samples, 0.11%)</title><rect x="0.7319%" y="117" width="0.1110%" height="15" fill="rgb(221,193,54)" fg:x="363240068" fg:w="55071698"/><text x="0.9819%" y="127.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (55,071,698 samples, 0.11%)</title><rect x="0.7319%" y="101" width="0.1110%" height="15" fill="rgb(248,212,6)" fg:x="363240068" fg:w="55071698"/><text x="0.9819%" y="111.50"></text></g><g><title>core::cmp::PartialEq::ne (89,242,493 samples, 0.18%)</title><rect x="0.8429%" y="117" width="0.1798%" height="15" fill="rgb(208,68,35)" fg:x="418311766" fg:w="89242493"/><text x="1.0929%" y="127.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (89,242,493 samples, 0.18%)</title><rect x="0.8429%" y="101" width="0.1798%" height="15" fill="rgb(232,128,0)" fg:x="418311766" fg:w="89242493"/><text x="1.0929%" y="111.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_rightmost (24,546,524 samples, 0.05%)</title><rect x="1.0227%" y="117" width="0.0495%" height="15" fill="rgb(207,160,47)" fg:x="507554259" fg:w="24546524"/><text x="1.2727%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::trailing_zeros (16,628,443 samples, 0.03%)</title><rect x="1.0386%" y="101" width="0.0335%" height="15" fill="rgb(228,23,34)" fg:x="515472340" fg:w="16628443"/><text x="1.2886%" y="111.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (117,210,697 samples, 0.24%)</title><rect x="1.0721%" y="117" width="0.2362%" height="15" fill="rgb(218,30,26)" fg:x="532100783" fg:w="117210697"/><text x="1.3221%" y="127.50"></text></g><g><title>shiro::engine::common::movelist::MoveList::emplace_bytes (117,210,697 samples, 0.24%)</title><rect x="1.0721%" y="101" width="0.2362%" height="15" fill="rgb(220,122,19)" fg:x="532100783" fg:w="117210697"/><text x="1.3221%" y="111.50"></text></g><g><title>core::ptr::write (38,906,410 samples, 0.08%)</title><rect x="1.2299%" y="85" width="0.0784%" height="15" fill="rgb(250,228,42)" fg:x="610405070" fg:w="38906410"/><text x="1.4799%" y="95.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_dg (417,294,026 samples, 0.84%)</title><rect x="0.5766%" y="133" width="0.8408%" height="15" fill="rgb(240,193,28)" fg:x="286154180" fg:w="417294026"/><text x="0.8266%" y="143.50"></text></g><g><title>shiro::engine::move_gen::masks::pext_dg_lookup (54,136,726 samples, 0.11%)</title><rect x="1.3083%" y="117" width="0.1091%" height="15" fill="rgb(216,20,37)" fg:x="649311480" fg:w="54136726"/><text x="1.5583%" y="127.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (11,001,199 samples, 0.02%)</title><rect x="1.3952%" y="101" width="0.0222%" height="15" fill="rgb(206,188,39)" fg:x="692447007" fg:w="11001199"/><text x="1.6452%" y="111.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (11,001,199 samples, 0.02%)</title><rect x="1.3952%" y="85" width="0.0222%" height="15" fill="rgb(217,207,13)" fg:x="692447007" fg:w="11001199"/><text x="1.6452%" y="95.50"></text></g><g><title>core::slice::index::get_noubcheck (11,001,199 samples, 0.02%)</title><rect x="1.3952%" y="69" width="0.0222%" height="15" fill="rgb(231,73,38)" fg:x="692447007" fg:w="11001199"/><text x="1.6452%" y="79.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (5,504,652 samples, 0.01%)</title><rect x="2.1384%" y="117" width="0.0111%" height="15" fill="rgb(225,20,46)" fg:x="1061303449" fg:w="5504652"/><text x="2.3884%" y="127.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (5,504,652 samples, 0.01%)</title><rect x="2.1384%" y="101" width="0.0111%" height="15" fill="rgb(210,31,41)" fg:x="1061303449" fg:w="5504652"/><text x="2.3884%" y="111.50"></text></g><g><title>core::cmp::PartialEq::ne (1,008,533,307 samples, 2.03%)</title><rect x="2.1495%" y="117" width="2.0321%" height="15" fill="rgb(221,200,47)" fg:x="1066808101" fg:w="1008533307"/><text x="2.3995%" y="127.50">c..</text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (1,008,533,307 samples, 2.03%)</title><rect x="2.1495%" y="101" width="2.0321%" height="15" fill="rgb(226,26,5)" fg:x="1066808101" fg:w="1008533307"/><text x="2.3995%" y="111.50">&lt;..</text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_rightmost (749,005,329 samples, 1.51%)</title><rect x="4.1816%" y="117" width="1.5092%" height="15" fill="rgb(249,33,26)" fg:x="2075341408" fg:w="749005329"/><text x="4.4316%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::trailing_zeros (275,329,362 samples, 0.55%)</title><rect x="5.1360%" y="101" width="0.5548%" height="15" fill="rgb(235,183,28)" fg:x="2549017375" fg:w="275329362"/><text x="5.3860%" y="111.50"></text></g><g><title>[unknown] (5,495,810 samples, 0.01%)</title><rect x="8.4092%" y="85" width="0.0111%" height="15" fill="rgb(221,5,38)" fg:x="4173497110" fg:w="5495810"/><text x="8.6592%" y="95.50"></text></g><g><title>[unknown] (5,495,810 samples, 0.01%)</title><rect x="8.4092%" y="69" width="0.0111%" height="15" fill="rgb(247,18,42)" fg:x="4173497110" fg:w="5495810"/><text x="8.6592%" y="79.50"></text></g><g><title>[unknown] (5,495,810 samples, 0.01%)</title><rect x="8.4092%" y="53" width="0.0111%" height="15" fill="rgb(241,131,45)" fg:x="4173497110" fg:w="5495810"/><text x="8.6592%" y="63.50"></text></g><g><title>[unknown] (5,495,810 samples, 0.01%)</title><rect x="8.4092%" y="37" width="0.0111%" height="15" fill="rgb(249,31,29)" fg:x="4173497110" fg:w="5495810"/><text x="8.6592%" y="47.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (1,965,907,632 samples, 3.96%)</title><rect x="5.6908%" y="117" width="3.9611%" height="15" fill="rgb(225,111,53)" fg:x="2824346737" fg:w="1965907632"/><text x="5.9408%" y="127.50">shir..</text></g><g><title>shiro::engine::common::movelist::MoveList::emplace_bytes (1,965,907,632 samples, 3.96%)</title><rect x="5.6908%" y="101" width="3.9611%" height="15" fill="rgb(238,160,17)" fg:x="2824346737" fg:w="1965907632"/><text x="5.9408%" y="111.50">shir..</text></g><g><title>core::ptr::write (611,261,449 samples, 1.23%)</title><rect x="8.4203%" y="85" width="1.2316%" height="15" fill="rgb(214,148,48)" fg:x="4178992920" fg:w="611261449"/><text x="8.6703%" y="95.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_hv (4,340,092,761 samples, 8.74%)</title><rect x="1.4174%" y="133" width="8.7449%" height="15" fill="rgb(232,36,49)" fg:x="703448206" fg:w="4340092761"/><text x="1.6674%" y="143.50">shiro::engin..</text></g><g><title>shiro::engine::move_gen::masks::pext_hv_lookup (253,286,598 samples, 0.51%)</title><rect x="9.6519%" y="117" width="0.5104%" height="15" fill="rgb(209,103,24)" fg:x="4790254369" fg:w="253286598"/><text x="9.9019%" y="127.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (148,614,206 samples, 0.30%)</title><rect x="9.8629%" y="101" width="0.2994%" height="15" fill="rgb(229,88,8)" fg:x="4894926761" fg:w="148614206"/><text x="10.1129%" y="111.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (148,614,206 samples, 0.30%)</title><rect x="9.8629%" y="85" width="0.2994%" height="15" fill="rgb(213,181,19)" fg:x="4894926761" fg:w="148614206"/><text x="10.1129%" y="95.50"></text></g><g><title>core::slice::index::get_noubcheck (148,614,206 samples, 0.30%)</title><rect x="9.8629%" y="69" width="0.2994%" height="15" fill="rgb(254,191,54)" fg:x="4894926761" fg:w="148614206"/><text x="10.1129%" y="79.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (10,991,004 samples, 0.02%)</title><rect x="10.2510%" y="117" width="0.0221%" height="15" fill="rgb(241,83,37)" fg:x="5087551383" fg:w="10991004"/><text x="10.5010%" y="127.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (10,991,004 samples, 0.02%)</title><rect x="10.2510%" y="101" width="0.0221%" height="15" fill="rgb(233,36,39)" fg:x="5087551383" fg:w="10991004"/><text x="10.5010%" y="111.50"></text></g><g><title>core::cmp::PartialEq::ne (88,074,869 samples, 0.18%)</title><rect x="10.2731%" y="117" width="0.1775%" height="15" fill="rgb(226,3,54)" fg:x="5098542387" fg:w="88074869"/><text x="10.5231%" y="127.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (88,074,869 samples, 0.18%)</title><rect x="10.2731%" y="101" width="0.1775%" height="15" fill="rgb(245,192,40)" fg:x="5098542387" fg:w="88074869"/><text x="10.5231%" y="111.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::leading_zeros (22,019,899 samples, 0.04%)</title><rect x="10.4506%" y="117" width="0.0444%" height="15" fill="rgb(238,167,29)" fg:x="5186617256" fg:w="22019899"/><text x="10.7006%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (22,019,899 samples, 0.04%)</title><rect x="10.4506%" y="101" width="0.0444%" height="15" fill="rgb(232,182,51)" fg:x="5186617256" fg:w="22019899"/><text x="10.7006%" y="111.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_rightmost (159,728,535 samples, 0.32%)</title><rect x="10.4950%" y="117" width="0.3218%" height="15" fill="rgb(231,60,39)" fg:x="5208637155" fg:w="159728535"/><text x="10.7450%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::trailing_zeros (5,511,574 samples, 0.01%)</title><rect x="10.8057%" y="101" width="0.0111%" height="15" fill="rgb(208,69,12)" fg:x="5362854116" fg:w="5511574"/><text x="11.0557%" y="111.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_king_normal (440,376,470 samples, 0.89%)</title><rect x="10.1623%" y="133" width="0.8873%" height="15" fill="rgb(235,93,37)" fg:x="5043540967" fg:w="440376470"/><text x="10.4123%" y="143.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (115,551,747 samples, 0.23%)</title><rect x="10.8168%" y="117" width="0.2328%" height="15" fill="rgb(213,116,39)" fg:x="5368365690" fg:w="115551747"/><text x="11.0668%" y="127.50"></text></g><g><title>shiro::engine::common::movelist::MoveList::emplace_bytes (115,551,747 samples, 0.23%)</title><rect x="10.8168%" y="101" width="0.2328%" height="15" fill="rgb(222,207,29)" fg:x="5368365690" fg:w="115551747"/><text x="11.0668%" y="111.50"></text></g><g><title>core::ptr::write (49,503,067 samples, 0.10%)</title><rect x="10.9499%" y="85" width="0.0997%" height="15" fill="rgb(206,96,30)" fg:x="5434414370" fg:w="49503067"/><text x="11.1999%" y="95.50"></text></g><g><title>core::cmp::PartialEq::ne (76,990,861 samples, 0.16%)</title><rect x="11.1275%" y="117" width="0.1551%" height="15" fill="rgb(218,138,4)" fg:x="5522562490" fg:w="76990861"/><text x="11.3775%" y="127.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (76,990,861 samples, 0.16%)</title><rect x="11.1275%" y="101" width="0.1551%" height="15" fill="rgb(250,191,14)" fg:x="5522562490" fg:w="76990861"/><text x="11.3775%" y="111.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_rightmost (82,543,950 samples, 0.17%)</title><rect x="11.2826%" y="117" width="0.1663%" height="15" fill="rgb(239,60,40)" fg:x="5599553351" fg:w="82543950"/><text x="11.5326%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::trailing_zeros (38,530,110 samples, 0.08%)</title><rect x="11.3713%" y="101" width="0.0776%" height="15" fill="rgb(206,27,48)" fg:x="5643567191" fg:w="38530110"/><text x="11.6213%" y="111.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (121,069,883 samples, 0.24%)</title><rect x="11.4489%" y="117" width="0.2439%" height="15" fill="rgb(225,35,8)" fg:x="5682097301" fg:w="121069883"/><text x="11.6989%" y="127.50"></text></g><g><title>shiro::engine::common::movelist::MoveList::emplace_bytes (121,069,883 samples, 0.24%)</title><rect x="11.4489%" y="101" width="0.2439%" height="15" fill="rgb(250,213,24)" fg:x="5682097301" fg:w="121069883"/><text x="11.6989%" y="111.50"></text></g><g><title>core::ptr::write (55,037,830 samples, 0.11%)</title><rect x="11.5820%" y="85" width="0.1109%" height="15" fill="rgb(247,123,22)" fg:x="5748129354" fg:w="55037830"/><text x="11.8320%" y="95.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_knight (335,732,250 samples, 0.68%)</title><rect x="11.0496%" y="133" width="0.6765%" height="15" fill="rgb(231,138,38)" fg:x="5483917437" fg:w="335732250"/><text x="11.2996%" y="143.50"></text></g><g><title>shiro::engine::move_gen::masks::knight_lookup (16,482,503 samples, 0.03%)</title><rect x="11.6929%" y="117" width="0.0332%" height="15" fill="rgb(231,145,46)" fg:x="5803167184" fg:w="16482503"/><text x="11.9429%" y="127.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (16,482,503 samples, 0.03%)</title><rect x="11.6929%" y="101" width="0.0332%" height="15" fill="rgb(251,118,11)" fg:x="5803167184" fg:w="16482503"/><text x="11.9429%" y="111.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (16,482,503 samples, 0.03%)</title><rect x="11.6929%" y="85" width="0.0332%" height="15" fill="rgb(217,147,25)" fg:x="5803167184" fg:w="16482503"/><text x="11.9429%" y="95.50"></text></g><g><title>core::slice::index::get_noubcheck (16,482,503 samples, 0.03%)</title><rect x="11.6929%" y="69" width="0.0332%" height="15" fill="rgb(247,81,37)" fg:x="5803167184" fg:w="16482503"/><text x="11.9429%" y="79.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (66,064,615 samples, 0.13%)</title><rect x="11.8592%" y="117" width="0.1331%" height="15" fill="rgb(209,12,38)" fg:x="5885715651" fg:w="66064615"/><text x="12.1092%" y="127.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (66,064,615 samples, 0.13%)</title><rect x="11.8592%" y="101" width="0.1331%" height="15" fill="rgb(227,1,9)" fg:x="5885715651" fg:w="66064615"/><text x="12.1092%" y="111.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitOr&gt;::bitor (16,516,790 samples, 0.03%)</title><rect x="11.9923%" y="117" width="0.0333%" height="15" fill="rgb(248,47,43)" fg:x="5951780266" fg:w="16516790"/><text x="12.2423%" y="127.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitOr&gt;::bitor (16,516,790 samples, 0.03%)</title><rect x="11.9923%" y="101" width="0.0333%" height="15" fill="rgb(221,10,30)" fg:x="5951780266" fg:w="16516790"/><text x="12.2423%" y="111.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitXorAssign&gt;::bitxor_assign (5,499,553 samples, 0.01%)</title><rect x="12.0256%" y="117" width="0.0111%" height="15" fill="rgb(210,229,1)" fg:x="5968297056" fg:w="5499553"/><text x="12.2756%" y="127.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitXorAssign&gt;::bitxor_assign (5,499,553 samples, 0.01%)</title><rect x="12.0256%" y="101" width="0.0111%" height="15" fill="rgb(222,148,37)" fg:x="5968297056" fg:w="5499553"/><text x="12.2756%" y="111.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::Not&gt;::not (38,565,710 samples, 0.08%)</title><rect x="12.0367%" y="117" width="0.0777%" height="15" fill="rgb(234,67,33)" fg:x="5973796609" fg:w="38565710"/><text x="12.2867%" y="127.50"></text></g><g><title>&lt;u64 as core::ops::bit::Not&gt;::not (38,565,710 samples, 0.08%)</title><rect x="12.0367%" y="101" width="0.0777%" height="15" fill="rgb(247,98,35)" fg:x="5973796609" fg:w="38565710"/><text x="12.2867%" y="111.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::Shr&lt;__RhsT&gt;&gt;::shr (22,013,960 samples, 0.04%)</title><rect x="12.1144%" y="117" width="0.0444%" height="15" fill="rgb(247,138,52)" fg:x="6012362319" fg:w="22013960"/><text x="12.3644%" y="127.50"></text></g><g><title>&lt;u64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (22,013,960 samples, 0.04%)</title><rect x="12.1144%" y="101" width="0.0444%" height="15" fill="rgb(213,79,30)" fg:x="6012362319" fg:w="22013960"/><text x="12.3644%" y="111.50"></text></g><g><title>core::cmp::PartialEq::ne (99,107,748 samples, 0.20%)</title><rect x="12.1587%" y="117" width="0.1997%" height="15" fill="rgb(246,177,23)" fg:x="6034376279" fg:w="99107748"/><text x="12.4087%" y="127.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (99,107,748 samples, 0.20%)</title><rect x="12.1587%" y="101" width="0.1997%" height="15" fill="rgb(230,62,27)" fg:x="6034376279" fg:w="99107748"/><text x="12.4087%" y="111.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_rightmost (16,508,134 samples, 0.03%)</title><rect x="12.3584%" y="117" width="0.0333%" height="15" fill="rgb(216,154,8)" fg:x="6133484027" fg:w="16508134"/><text x="12.6084%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::trailing_zeros (11,009,647 samples, 0.02%)</title><rect x="12.3695%" y="101" width="0.0222%" height="15" fill="rgb(244,35,45)" fg:x="6138982514" fg:w="11009647"/><text x="12.6195%" y="111.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (5,504,230 samples, 0.01%)</title><rect x="12.3917%" y="117" width="0.0111%" height="15" fill="rgb(251,115,12)" fg:x="6149992161" fg:w="5504230"/><text x="12.6417%" y="127.50"></text></g><g><title>shiro::engine::common::movelist::MoveList::emplace_bytes (5,504,230 samples, 0.01%)</title><rect x="12.3917%" y="101" width="0.0111%" height="15" fill="rgb(240,54,50)" fg:x="6149992161" fg:w="5504230"/><text x="12.6417%" y="111.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_pawn_captures (385,395,013 samples, 0.78%)</title><rect x="11.7261%" y="133" width="0.7765%" height="15" fill="rgb(233,84,52)" fg:x="5819649687" fg:w="385395013"/><text x="11.9761%" y="143.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_promotions (49,548,309 samples, 0.10%)</title><rect x="12.4028%" y="117" width="0.0998%" height="15" fill="rgb(207,117,47)" fg:x="6155496391" fg:w="49548309"/><text x="12.6528%" y="127.50"></text></g><g><title>shiro::engine::common::movelist::MoveList::emplace_bytes (49,548,309 samples, 0.10%)</title><rect x="12.4028%" y="101" width="0.0998%" height="15" fill="rgb(249,43,39)" fg:x="6155496391" fg:w="49548309"/><text x="12.6528%" y="111.50"></text></g><g><title>core::ptr::write (38,535,734 samples, 0.08%)</title><rect x="12.4250%" y="85" width="0.0776%" height="15" fill="rgb(209,38,44)" fg:x="6166508966" fg:w="38535734"/><text x="12.6750%" y="95.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (55,063,460 samples, 0.11%)</title><rect x="12.6832%" y="117" width="0.1109%" height="15" fill="rgb(236,212,23)" fg:x="6294683497" fg:w="55063460"/><text x="12.9332%" y="127.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (55,063,460 samples, 0.11%)</title><rect x="12.6832%" y="101" width="0.1109%" height="15" fill="rgb(242,79,21)" fg:x="6294683497" fg:w="55063460"/><text x="12.9332%" y="111.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAndAssign&gt;::bitand_assign (99,071,084 samples, 0.20%)</title><rect x="12.7942%" y="117" width="0.1996%" height="15" fill="rgb(211,96,35)" fg:x="6349746957" fg:w="99071084"/><text x="13.0442%" y="127.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAndAssign&gt;::bitand_assign (99,071,084 samples, 0.20%)</title><rect x="12.7942%" y="101" width="0.1996%" height="15" fill="rgb(253,215,40)" fg:x="6349746957" fg:w="99071084"/><text x="13.0442%" y="111.50"></text></g><g><title>core::cmp::PartialEq::ne (22,031,431 samples, 0.04%)</title><rect x="12.9938%" y="117" width="0.0444%" height="15" fill="rgb(211,81,21)" fg:x="6448818041" fg:w="22031431"/><text x="13.2438%" y="127.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (22,031,431 samples, 0.04%)</title><rect x="12.9938%" y="101" width="0.0444%" height="15" fill="rgb(208,190,38)" fg:x="6448818041" fg:w="22031431"/><text x="13.2438%" y="111.50"></text></g><g><title>shiro::engine::common::constants::rank_from_pos (5,506,174 samples, 0.01%)</title><rect x="13.0382%" y="117" width="0.0111%" height="15" fill="rgb(235,213,38)" fg:x="6470849472" fg:w="5506174"/><text x="13.2882%" y="127.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::Shr&lt;__RhsT&gt;&gt;::shr (5,506,174 samples, 0.01%)</title><rect x="13.0382%" y="101" width="0.0111%" height="15" fill="rgb(237,122,38)" fg:x="6470849472" fg:w="5506174"/><text x="13.2882%" y="111.50"></text></g><g><title>&lt;u64 as core::ops::bit::Shr&lt;usize&gt;&gt;::shr (5,506,174 samples, 0.01%)</title><rect x="13.0382%" y="85" width="0.0111%" height="15" fill="rgb(244,218,35)" fg:x="6470849472" fg:w="5506174"/><text x="13.2882%" y="95.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_rightmost (54,952,261 samples, 0.11%)</title><rect x="13.0493%" y="117" width="0.1107%" height="15" fill="rgb(240,68,47)" fg:x="6476355646" fg:w="54952261"/><text x="13.2993%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::trailing_zeros (38,494,694 samples, 0.08%)</title><rect x="13.0825%" y="101" width="0.0776%" height="15" fill="rgb(210,16,53)" fg:x="6492813213" fg:w="38494694"/><text x="13.3325%" y="111.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::unbounded_shl (38,538,610 samples, 0.08%)</title><rect x="13.1600%" y="117" width="0.0777%" height="15" fill="rgb(235,124,12)" fg:x="6531307907" fg:w="38538610"/><text x="13.4100%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::unbounded_shl (38,538,610 samples, 0.08%)</title><rect x="13.1600%" y="101" width="0.0777%" height="15" fill="rgb(224,169,11)" fg:x="6531307907" fg:w="38538610"/><text x="13.4100%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::unchecked_shl (38,538,610 samples, 0.08%)</title><rect x="13.1600%" y="85" width="0.0777%" height="15" fill="rgb(250,166,2)" fg:x="6531307907" fg:w="38538610"/><text x="13.4100%" y="95.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::unbounded_shr (36,162,467 samples, 0.07%)</title><rect x="13.2377%" y="117" width="0.0729%" height="15" fill="rgb(242,216,29)" fg:x="6569846517" fg:w="36162467"/><text x="13.4877%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::unbounded_shr (36,162,467 samples, 0.07%)</title><rect x="13.2377%" y="101" width="0.0729%" height="15" fill="rgb(230,116,27)" fg:x="6569846517" fg:w="36162467"/><text x="13.4877%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::unchecked_shr (36,162,467 samples, 0.07%)</title><rect x="13.2377%" y="85" width="0.0729%" height="15" fill="rgb(228,99,48)" fg:x="6569846517" fg:w="36162467"/><text x="13.4877%" y="95.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_all_moves (6,627,989,979 samples, 13.35%)</title><rect x="0.0555%" y="149" width="13.3548%" height="15" fill="rgb(253,11,6)" fg:x="27550934" fg:w="6627989979"/><text x="0.3055%" y="159.50">shiro::engine::move_..</text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_pawn_pushes (450,496,213 samples, 0.91%)</title><rect x="12.5026%" y="133" width="0.9077%" height="15" fill="rgb(247,143,39)" fg:x="6205044700" fg:w="450496213"/><text x="12.7526%" y="143.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_promotions (49,531,929 samples, 0.10%)</title><rect x="13.3105%" y="117" width="0.0998%" height="15" fill="rgb(236,97,10)" fg:x="6606008984" fg:w="49531929"/><text x="13.5605%" y="127.50"></text></g><g><title>shiro::engine::common::movelist::MoveList::emplace_bytes (49,531,929 samples, 0.10%)</title><rect x="13.3105%" y="101" width="0.0998%" height="15" fill="rgb(233,208,19)" fg:x="6606008984" fg:w="49531929"/><text x="13.5605%" y="111.50"></text></g><g><title>core::ptr::write (44,028,220 samples, 0.09%)</title><rect x="13.3216%" y="85" width="0.0887%" height="15" fill="rgb(216,164,2)" fg:x="6611512693" fg:w="44028220"/><text x="13.5716%" y="95.50"></text></g><g><title>[unknown] (5,505,273 samples, 0.01%)</title><rect x="22.6273%" y="133" width="0.0111%" height="15" fill="rgb(220,129,5)" fg:x="11229935815" fg:w="5505273"/><text x="22.8773%" y="143.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_knight (5,495,864 samples, 0.01%)</title><rect x="22.6384%" y="117" width="0.0111%" height="15" fill="rgb(242,17,10)" fg:x="11235441088" fg:w="5495864"/><text x="22.8884%" y="127.50"></text></g><g><title>core::cmp::PartialEq::ne (5,495,864 samples, 0.01%)</title><rect x="22.6384%" y="101" width="0.0111%" height="15" fill="rgb(242,107,0)" fg:x="11235441088" fg:w="5495864"/><text x="22.8884%" y="111.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (5,495,864 samples, 0.01%)</title><rect x="22.6384%" y="85" width="0.0111%" height="15" fill="rgb(251,28,31)" fg:x="11235441088" fg:w="5495864"/><text x="22.8884%" y="95.50"></text></g><g><title>core::cmp::PartialEq::ne (5,554,061 samples, 0.01%)</title><rect x="22.6713%" y="101" width="0.0112%" height="15" fill="rgb(233,223,10)" fg:x="11251764832" fg:w="5554061"/><text x="22.9213%" y="111.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (5,554,061 samples, 0.01%)</title><rect x="22.6713%" y="85" width="0.0112%" height="15" fill="rgb(215,21,27)" fg:x="11251764832" fg:w="5554061"/><text x="22.9213%" y="95.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_rightmost (39,650,735 samples, 0.08%)</title><rect x="22.6825%" y="101" width="0.0799%" height="15" fill="rgb(232,23,21)" fg:x="11257318893" fg:w="39650735"/><text x="22.9325%" y="111.50"></text></g><g><title>[unknown] (11,285,846,995 samples, 22.74%)</title><rect x="0.0555%" y="165" width="22.7400%" height="15" fill="rgb(244,5,23)" fg:x="27550934" fg:w="11285846995"/><text x="0.3055%" y="175.50">[unknown]</text></g><g><title>shiro::engine::move_gen::gen_moves (4,657,857,016 samples, 9.39%)</title><rect x="13.4103%" y="149" width="9.3852%" height="15" fill="rgb(226,81,46)" fg:x="6655540913" fg:w="4657857016"/><text x="13.6603%" y="159.50">shiro::engine..</text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_all_moves (77,956,841 samples, 0.16%)</title><rect x="22.6384%" y="133" width="0.1571%" height="15" fill="rgb(247,70,30)" fg:x="11235441088" fg:w="77956841"/><text x="22.8884%" y="143.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_pawn_pushes (72,460,977 samples, 0.15%)</title><rect x="22.6495%" y="117" width="0.1460%" height="15" fill="rgb(212,68,19)" fg:x="11240936952" fg:w="72460977"/><text x="22.8995%" y="127.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (16,428,301 samples, 0.03%)</title><rect x="22.7624%" y="101" width="0.0331%" height="15" fill="rgb(240,187,13)" fg:x="11296969628" fg:w="16428301"/><text x="23.0124%" y="111.50"></text></g><g><title>shiro::engine::common::movelist::MoveList::emplace_bytes (16,428,301 samples, 0.03%)</title><rect x="22.7624%" y="85" width="0.0331%" height="15" fill="rgb(223,113,26)" fg:x="11296969628" fg:w="16428301"/><text x="23.0124%" y="95.50"></text></g><g><title>shiro::engine::core::BoardState::from_fen (5,504,223 samples, 0.01%)</title><rect x="22.7955%" y="165" width="0.0111%" height="15" fill="rgb(206,192,2)" fg:x="11313397929" fg:w="5504223"/><text x="23.0455%" y="175.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (82,594,512 samples, 0.17%)</title><rect x="23.5051%" y="133" width="0.1664%" height="15" fill="rgb(241,108,4)" fg:x="11665583759" fg:w="82594512"/><text x="23.7551%" y="143.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (82,594,512 samples, 0.17%)</title><rect x="23.5051%" y="117" width="0.1664%" height="15" fill="rgb(247,173,49)" fg:x="11665583759" fg:w="82594512"/><text x="23.7551%" y="127.50"></text></g><g><title>core::cmp::PartialEq::ne (252,529,361 samples, 0.51%)</title><rect x="23.6716%" y="133" width="0.5088%" height="15" fill="rgb(224,114,35)" fg:x="11748178271" fg:w="252529361"/><text x="23.9216%" y="143.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (252,529,361 samples, 0.51%)</title><rect x="23.6716%" y="117" width="0.5088%" height="15" fill="rgb(245,159,27)" fg:x="11748178271" fg:w="252529361"/><text x="23.9216%" y="127.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_rightmost (110,057,475 samples, 0.22%)</title><rect x="24.1804%" y="133" width="0.2218%" height="15" fill="rgb(245,172,44)" fg:x="12000707632" fg:w="110057475"/><text x="24.4304%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::trailing_zeros (49,488,512 samples, 0.10%)</title><rect x="24.3024%" y="117" width="0.0997%" height="15" fill="rgb(236,23,11)" fg:x="12061276595" fg:w="49488512"/><text x="24.5524%" y="127.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (175,603,952 samples, 0.35%)</title><rect x="24.4021%" y="133" width="0.3538%" height="15" fill="rgb(205,117,38)" fg:x="12110765107" fg:w="175603952"/><text x="24.6521%" y="143.50"></text></g><g><title>shiro::engine::common::movelist::MoveList::emplace_bytes (175,603,952 samples, 0.35%)</title><rect x="24.4021%" y="117" width="0.3538%" height="15" fill="rgb(237,72,25)" fg:x="12110765107" fg:w="175603952"/><text x="24.6521%" y="127.50"></text></g><g><title>core::ptr::write (16,334,655 samples, 0.03%)</title><rect x="24.7231%" y="101" width="0.0329%" height="15" fill="rgb(244,70,9)" fg:x="12270034404" fg:w="16334655"/><text x="24.9731%" y="111.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_dg (918,530,505 samples, 1.85%)</title><rect x="23.1502%" y="149" width="1.8508%" height="15" fill="rgb(217,125,39)" fg:x="11489436861" fg:w="918530505"/><text x="23.4002%" y="159.50">s..</text></g><g><title>shiro::engine::move_gen::masks::pext_dg_lookup (121,598,307 samples, 0.25%)</title><rect x="24.7560%" y="133" width="0.2450%" height="15" fill="rgb(235,36,10)" fg:x="12286369059" fg:w="121598307"/><text x="25.0060%" y="143.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (27,332,642 samples, 0.06%)</title><rect x="24.9459%" y="117" width="0.0551%" height="15" fill="rgb(251,123,47)" fg:x="12380634724" fg:w="27332642"/><text x="25.1959%" y="127.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (27,332,642 samples, 0.06%)</title><rect x="24.9459%" y="101" width="0.0551%" height="15" fill="rgb(221,13,13)" fg:x="12380634724" fg:w="27332642"/><text x="25.1959%" y="111.50"></text></g><g><title>core::slice::index::get_noubcheck (27,332,642 samples, 0.06%)</title><rect x="24.9459%" y="85" width="0.0551%" height="15" fill="rgb(238,131,9)" fg:x="12380634724" fg:w="27332642"/><text x="25.1959%" y="95.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (8,448,526 samples, 0.02%)</title><rect x="25.0121%" y="133" width="0.0170%" height="15" fill="rgb(211,50,8)" fg:x="12413473429" fg:w="8448526"/><text x="25.2621%" y="143.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (8,448,526 samples, 0.02%)</title><rect x="25.0121%" y="117" width="0.0170%" height="15" fill="rgb(245,182,24)" fg:x="12413473429" fg:w="8448526"/><text x="25.2621%" y="127.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::Shr&lt;__RhsT&gt;&gt;::shr (5,494,652 samples, 0.01%)</title><rect x="25.0291%" y="133" width="0.0111%" height="15" fill="rgb(242,14,37)" fg:x="12421921955" fg:w="5494652"/><text x="25.2791%" y="143.50"></text></g><g><title>&lt;u64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (5,494,652 samples, 0.01%)</title><rect x="25.0291%" y="117" width="0.0111%" height="15" fill="rgb(246,228,12)" fg:x="12421921955" fg:w="5494652"/><text x="25.2791%" y="127.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_enpassant (24,944,028 samples, 0.05%)</title><rect x="25.0010%" y="149" width="0.0503%" height="15" fill="rgb(213,55,15)" fg:x="12407967366" fg:w="24944028"/><text x="25.2510%" y="159.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (5,494,787 samples, 0.01%)</title><rect x="25.0402%" y="133" width="0.0111%" height="15" fill="rgb(209,9,3)" fg:x="12427416607" fg:w="5494787"/><text x="25.2902%" y="143.50"></text></g><g><title>shiro::engine::common::movelist::MoveList::emplace_bytes (5,494,787 samples, 0.01%)</title><rect x="25.0402%" y="117" width="0.0111%" height="15" fill="rgb(230,59,30)" fg:x="12427416607" fg:w="5494787"/><text x="25.2902%" y="127.50"></text></g><g><title>core::ptr::write (5,494,787 samples, 0.01%)</title><rect x="25.0402%" y="101" width="0.0111%" height="15" fill="rgb(209,121,21)" fg:x="12427416607" fg:w="5494787"/><text x="25.2902%" y="111.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (66,305,016 samples, 0.13%)</title><rect x="25.9594%" y="133" width="0.1336%" height="15" fill="rgb(220,109,13)" fg:x="12883635026" fg:w="66305016"/><text x="26.2094%" y="143.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (66,305,016 samples, 0.13%)</title><rect x="25.9594%" y="117" width="0.1336%" height="15" fill="rgb(232,18,1)" fg:x="12883635026" fg:w="66305016"/><text x="26.2094%" y="127.50"></text></g><g><title>core::cmp::PartialEq::ne (1,797,522,553 samples, 3.62%)</title><rect x="26.0930%" y="133" width="3.6219%" height="15" fill="rgb(215,41,42)" fg:x="12949940042" fg:w="1797522553"/><text x="26.3430%" y="143.50">core..</text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (1,797,522,553 samples, 3.62%)</title><rect x="26.0930%" y="117" width="3.6219%" height="15" fill="rgb(224,123,36)" fg:x="12949940042" fg:w="1797522553"/><text x="26.3430%" y="127.50">&lt;shi..</text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_rightmost (1,535,404,264 samples, 3.09%)</title><rect x="29.7149%" y="133" width="3.0937%" height="15" fill="rgb(240,125,3)" fg:x="14747462595" fg:w="1535404264"/><text x="29.9649%" y="143.50">shi..</text></g><g><title>core::num::&lt;impl u64&gt;::trailing_zeros (699,568,990 samples, 1.41%)</title><rect x="31.3990%" y="117" width="1.4096%" height="15" fill="rgb(205,98,50)" fg:x="15583297869" fg:w="699568990"/><text x="31.6490%" y="127.50"></text></g><g><title>[unknown] (5,510,815 samples, 0.01%)</title><rect x="37.1070%" y="101" width="0.0111%" height="15" fill="rgb(205,185,37)" fg:x="18416165647" fg:w="5510815"/><text x="37.3570%" y="111.50"></text></g><g><title>[unknown] (5,510,815 samples, 0.01%)</title><rect x="37.1070%" y="85" width="0.0111%" height="15" fill="rgb(238,207,15)" fg:x="18416165647" fg:w="5510815"/><text x="37.3570%" y="95.50"></text></g><g><title>[unknown] (5,510,815 samples, 0.01%)</title><rect x="37.1070%" y="69" width="0.0111%" height="15" fill="rgb(213,199,42)" fg:x="18416165647" fg:w="5510815"/><text x="37.3570%" y="79.50"></text></g><g><title>[unknown] (5,510,815 samples, 0.01%)</title><rect x="37.1070%" y="53" width="0.0111%" height="15" fill="rgb(235,201,11)" fg:x="18416165647" fg:w="5510815"/><text x="37.3570%" y="63.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (2,816,153,177 samples, 5.67%)</title><rect x="32.8086%" y="133" width="5.6743%" height="15" fill="rgb(207,46,11)" fg:x="16282866859" fg:w="2816153177"/><text x="33.0586%" y="143.50">shiro::..</text></g><g><title>shiro::engine::common::movelist::MoveList::emplace_bytes (2,816,153,177 samples, 5.67%)</title><rect x="32.8086%" y="117" width="5.6743%" height="15" fill="rgb(241,35,35)" fg:x="16282866859" fg:w="2816153177"/><text x="33.0586%" y="127.50">shiro::..</text></g><g><title>core::ptr::write (677,343,574 samples, 1.36%)</title><rect x="37.1181%" y="101" width="1.3648%" height="15" fill="rgb(243,32,47)" fg:x="18421676462" fg:w="677343574"/><text x="37.3681%" y="111.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_hv (7,217,308,531 samples, 14.54%)</title><rect x="25.0512%" y="149" width="14.5423%" height="15" fill="rgb(247,202,23)" fg:x="12432911394" fg:w="7217308531"/><text x="25.3012%" y="159.50">shiro::engine::move_ge..</text></g><g><title>shiro::engine::move_gen::masks::pext_hv_lookup (551,199,889 samples, 1.11%)</title><rect x="38.4829%" y="133" width="1.1106%" height="15" fill="rgb(219,102,11)" fg:x="19099020036" fg:w="551199889"/><text x="38.7329%" y="143.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (275,177,643 samples, 0.55%)</title><rect x="39.0390%" y="117" width="0.5545%" height="15" fill="rgb(243,110,44)" fg:x="19375042282" fg:w="275177643"/><text x="39.2890%" y="127.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (275,177,643 samples, 0.55%)</title><rect x="39.0390%" y="101" width="0.5545%" height="15" fill="rgb(222,74,54)" fg:x="19375042282" fg:w="275177643"/><text x="39.2890%" y="111.50"></text></g><g><title>core::slice::index::get_noubcheck (275,177,643 samples, 0.55%)</title><rect x="39.0390%" y="85" width="0.5545%" height="15" fill="rgb(216,99,12)" fg:x="19375042282" fg:w="275177643"/><text x="39.2890%" y="95.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (5,495,650 samples, 0.01%)</title><rect x="39.6378%" y="133" width="0.0111%" height="15" fill="rgb(226,22,26)" fg:x="19672235488" fg:w="5495650"/><text x="39.8878%" y="143.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (5,483,839 samples, 0.01%)</title><rect x="39.6489%" y="133" width="0.0110%" height="15" fill="rgb(217,163,10)" fg:x="19677731138" fg:w="5483839"/><text x="39.8989%" y="143.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (5,483,839 samples, 0.01%)</title><rect x="39.6489%" y="117" width="0.0110%" height="15" fill="rgb(213,25,53)" fg:x="19677731138" fg:w="5483839"/><text x="39.8989%" y="127.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitOr&gt;::bitor (5,502,322 samples, 0.01%)</title><rect x="39.6600%" y="133" width="0.0111%" height="15" fill="rgb(252,105,26)" fg:x="19683214977" fg:w="5502322"/><text x="39.9100%" y="143.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitOr&gt;::bitor (5,502,322 samples, 0.01%)</title><rect x="39.6600%" y="117" width="0.0111%" height="15" fill="rgb(220,39,43)" fg:x="19683214977" fg:w="5502322"/><text x="39.9100%" y="127.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_king_castle (120,983,681 samples, 0.24%)</title><rect x="39.5935%" y="149" width="0.2438%" height="15" fill="rgb(229,68,48)" fg:x="19650219925" fg:w="120983681"/><text x="39.8435%" y="159.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (82,486,307 samples, 0.17%)</title><rect x="39.6711%" y="133" width="0.1662%" height="15" fill="rgb(252,8,32)" fg:x="19688717299" fg:w="82486307"/><text x="39.9211%" y="143.50"></text></g><g><title>shiro::engine::common::movelist::MoveList::emplace_bytes (60,485,519 samples, 0.12%)</title><rect x="39.7154%" y="117" width="0.1219%" height="15" fill="rgb(223,20,43)" fg:x="19710718087" fg:w="60485519"/><text x="39.9654%" y="127.50"></text></g><g><title>core::ptr::write (60,485,519 samples, 0.12%)</title><rect x="39.7154%" y="101" width="0.1219%" height="15" fill="rgb(229,81,49)" fg:x="19710718087" fg:w="60485519"/><text x="39.9654%" y="111.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (5,510,776 samples, 0.01%)</title><rect x="39.8373%" y="133" width="0.0111%" height="15" fill="rgb(236,28,36)" fg:x="19771203606" fg:w="5510776"/><text x="40.0873%" y="143.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (5,510,776 samples, 0.01%)</title><rect x="39.8373%" y="117" width="0.0111%" height="15" fill="rgb(249,185,26)" fg:x="19771203606" fg:w="5510776"/><text x="40.0873%" y="127.50"></text></g><g><title>core::cmp::PartialEq::ne (10,930,271 samples, 0.02%)</title><rect x="39.8484%" y="133" width="0.0220%" height="15" fill="rgb(249,174,33)" fg:x="19776714382" fg:w="10930271"/><text x="40.0984%" y="143.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (10,930,271 samples, 0.02%)</title><rect x="39.8484%" y="117" width="0.0220%" height="15" fill="rgb(233,201,37)" fg:x="19776714382" fg:w="10930271"/><text x="40.0984%" y="127.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::leading_zeros (5,505,771 samples, 0.01%)</title><rect x="39.8704%" y="133" width="0.0111%" height="15" fill="rgb(221,78,26)" fg:x="19787644653" fg:w="5505771"/><text x="40.1204%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (5,505,771 samples, 0.01%)</title><rect x="39.8704%" y="117" width="0.0111%" height="15" fill="rgb(250,127,30)" fg:x="19787644653" fg:w="5505771"/><text x="40.1204%" y="127.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_rightmost (33,009,346 samples, 0.07%)</title><rect x="39.8815%" y="133" width="0.0665%" height="15" fill="rgb(230,49,44)" fg:x="19793150424" fg:w="33009346"/><text x="40.1315%" y="143.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_king_normal (89,019,466 samples, 0.18%)</title><rect x="39.8373%" y="149" width="0.1794%" height="15" fill="rgb(229,67,23)" fg:x="19771203606" fg:w="89019466"/><text x="40.0873%" y="159.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (34,063,302 samples, 0.07%)</title><rect x="39.9480%" y="133" width="0.0686%" height="15" fill="rgb(249,83,47)" fg:x="19826159770" fg:w="34063302"/><text x="40.1980%" y="143.50"></text></g><g><title>shiro::engine::common::movelist::MoveList::emplace_bytes (34,063,302 samples, 0.07%)</title><rect x="39.9480%" y="117" width="0.0686%" height="15" fill="rgb(215,43,3)" fg:x="19826159770" fg:w="34063302"/><text x="40.1980%" y="127.50"></text></g><g><title>core::ptr::write (16,515,149 samples, 0.03%)</title><rect x="39.9834%" y="101" width="0.0333%" height="15" fill="rgb(238,154,13)" fg:x="19843707923" fg:w="16515149"/><text x="40.2334%" y="111.50"></text></g><g><title>core::cmp::PartialEq::ne (120,863,227 samples, 0.24%)</title><rect x="40.2174%" y="133" width="0.2435%" height="15" fill="rgb(219,56,2)" fg:x="19959876940" fg:w="120863227"/><text x="40.4674%" y="143.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (120,863,227 samples, 0.24%)</title><rect x="40.2174%" y="117" width="0.2435%" height="15" fill="rgb(233,0,4)" fg:x="19959876940" fg:w="120863227"/><text x="40.4674%" y="127.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_rightmost (175,633,280 samples, 0.35%)</title><rect x="40.4610%" y="133" width="0.3539%" height="15" fill="rgb(235,30,7)" fg:x="20080740167" fg:w="175633280"/><text x="40.7110%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::trailing_zeros (93,159,363 samples, 0.19%)</title><rect x="40.6271%" y="117" width="0.1877%" height="15" fill="rgb(250,79,13)" fg:x="20163214084" fg:w="93159363"/><text x="40.8771%" y="127.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (176,893,250 samples, 0.36%)</title><rect x="40.8148%" y="133" width="0.3564%" height="15" fill="rgb(211,146,34)" fg:x="20256373447" fg:w="176893250"/><text x="41.0648%" y="143.50"></text></g><g><title>shiro::engine::common::movelist::MoveList::emplace_bytes (176,893,250 samples, 0.36%)</title><rect x="40.8148%" y="117" width="0.3564%" height="15" fill="rgb(228,22,38)" fg:x="20256373447" fg:w="176893250"/><text x="41.0648%" y="127.50"></text></g><g><title>core::ptr::write (49,412,994 samples, 0.10%)</title><rect x="41.0717%" y="101" width="0.0996%" height="15" fill="rgb(235,168,5)" fg:x="20383853703" fg:w="49412994"/><text x="41.3217%" y="111.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_knight (595,043,871 samples, 1.20%)</title><rect x="40.0166%" y="149" width="1.1990%" height="15" fill="rgb(221,155,16)" fg:x="19860223072" fg:w="595043871"/><text x="40.2666%" y="159.50"></text></g><g><title>shiro::engine::move_gen::masks::knight_lookup (22,000,246 samples, 0.04%)</title><rect x="41.1713%" y="133" width="0.0443%" height="15" fill="rgb(215,215,53)" fg:x="20433266697" fg:w="22000246"/><text x="41.4213%" y="143.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (22,000,246 samples, 0.04%)</title><rect x="41.1713%" y="117" width="0.0443%" height="15" fill="rgb(223,4,10)" fg:x="20433266697" fg:w="22000246"/><text x="41.4213%" y="127.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (22,000,246 samples, 0.04%)</title><rect x="41.1713%" y="101" width="0.0443%" height="15" fill="rgb(234,103,6)" fg:x="20433266697" fg:w="22000246"/><text x="41.4213%" y="111.50"></text></g><g><title>core::slice::index::get_noubcheck (22,000,246 samples, 0.04%)</title><rect x="41.1713%" y="85" width="0.0443%" height="15" fill="rgb(227,97,0)" fg:x="20433266697" fg:w="22000246"/><text x="41.4213%" y="95.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (72,026,823 samples, 0.15%)</title><rect x="41.4154%" y="133" width="0.1451%" height="15" fill="rgb(234,150,53)" fg:x="20554431252" fg:w="72026823"/><text x="41.6654%" y="143.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (72,026,823 samples, 0.15%)</title><rect x="41.4154%" y="117" width="0.1451%" height="15" fill="rgb(228,201,54)" fg:x="20554431252" fg:w="72026823"/><text x="41.6654%" y="127.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitOr&gt;::bitor (22,027,433 samples, 0.04%)</title><rect x="41.5605%" y="133" width="0.0444%" height="15" fill="rgb(222,22,37)" fg:x="20626458075" fg:w="22027433"/><text x="41.8105%" y="143.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitOr&gt;::bitor (22,027,433 samples, 0.04%)</title><rect x="41.5605%" y="117" width="0.0444%" height="15" fill="rgb(237,53,32)" fg:x="20626458075" fg:w="22027433"/><text x="41.8105%" y="127.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitXorAssign&gt;::bitxor_assign (22,005,230 samples, 0.04%)</title><rect x="41.6049%" y="133" width="0.0443%" height="15" fill="rgb(233,25,53)" fg:x="20648485508" fg:w="22005230"/><text x="41.8549%" y="143.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitXorAssign&gt;::bitxor_assign (22,005,230 samples, 0.04%)</title><rect x="41.6049%" y="117" width="0.0443%" height="15" fill="rgb(210,40,34)" fg:x="20648485508" fg:w="22005230"/><text x="41.8549%" y="127.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::Not&gt;::not (27,489,845 samples, 0.06%)</title><rect x="41.6492%" y="133" width="0.0554%" height="15" fill="rgb(241,220,44)" fg:x="20670490738" fg:w="27489845"/><text x="41.8992%" y="143.50"></text></g><g><title>&lt;u64 as core::ops::bit::Not&gt;::not (27,489,845 samples, 0.06%)</title><rect x="41.6492%" y="117" width="0.0554%" height="15" fill="rgb(235,28,35)" fg:x="20670490738" fg:w="27489845"/><text x="41.8992%" y="127.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::Shl&lt;__RhsT&gt;&gt;::shl (27,526,654 samples, 0.06%)</title><rect x="41.7046%" y="133" width="0.0555%" height="15" fill="rgb(210,56,17)" fg:x="20697980583" fg:w="27526654"/><text x="41.9546%" y="143.50"></text></g><g><title>&lt;u64 as core::ops::bit::Shl&lt;i32&gt;&gt;::shl (27,526,654 samples, 0.06%)</title><rect x="41.7046%" y="117" width="0.0555%" height="15" fill="rgb(224,130,29)" fg:x="20697980583" fg:w="27526654"/><text x="41.9546%" y="127.50"></text></g><g><title>core::cmp::PartialEq::ne (65,898,794 samples, 0.13%)</title><rect x="41.7601%" y="133" width="0.1328%" height="15" fill="rgb(235,212,8)" fg:x="20725507237" fg:w="65898794"/><text x="42.0101%" y="143.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (65,898,794 samples, 0.13%)</title><rect x="41.7601%" y="117" width="0.1328%" height="15" fill="rgb(223,33,50)" fg:x="20725507237" fg:w="65898794"/><text x="42.0101%" y="127.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_rightmost (32,991,969 samples, 0.07%)</title><rect x="41.8929%" y="133" width="0.0665%" height="15" fill="rgb(219,149,13)" fg:x="20791406031" fg:w="32991969"/><text x="42.1429%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::trailing_zeros (27,493,054 samples, 0.06%)</title><rect x="41.9040%" y="117" width="0.0554%" height="15" fill="rgb(250,156,29)" fg:x="20796904946" fg:w="27493054"/><text x="42.1540%" y="127.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (10,993,121 samples, 0.02%)</title><rect x="41.9594%" y="133" width="0.0222%" height="15" fill="rgb(216,193,19)" fg:x="20824398000" fg:w="10993121"/><text x="42.2094%" y="143.50"></text></g><g><title>shiro::engine::common::movelist::MoveList::emplace_bytes (10,993,121 samples, 0.02%)</title><rect x="41.9594%" y="117" width="0.0222%" height="15" fill="rgb(216,135,14)" fg:x="20824398000" fg:w="10993121"/><text x="42.2094%" y="127.50"></text></g><g><title>core::ptr::write (10,993,121 samples, 0.02%)</title><rect x="41.9594%" y="101" width="0.0222%" height="15" fill="rgb(241,47,5)" fg:x="20824398000" fg:w="10993121"/><text x="42.2094%" y="111.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_pawn_captures (413,162,801 samples, 0.83%)</title><rect x="41.2156%" y="149" width="0.8325%" height="15" fill="rgb(233,42,35)" fg:x="20455266943" fg:w="413162801"/><text x="41.4656%" y="159.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_promotions (33,038,623 samples, 0.07%)</title><rect x="41.9815%" y="133" width="0.0666%" height="15" fill="rgb(231,13,6)" fg:x="20835391121" fg:w="33038623"/><text x="42.2315%" y="143.50"></text></g><g><title>shiro::engine::common::movelist::MoveList::emplace_bytes (33,038,623 samples, 0.07%)</title><rect x="41.9815%" y="117" width="0.0666%" height="15" fill="rgb(207,181,40)" fg:x="20835391121" fg:w="33038623"/><text x="42.2315%" y="127.50"></text></g><g><title>core::ptr::write (22,023,122 samples, 0.04%)</title><rect x="42.0037%" y="101" width="0.0444%" height="15" fill="rgb(254,173,49)" fg:x="20846406622" fg:w="22023122"/><text x="42.2537%" y="111.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (10,832,009 samples, 0.02%)</title><rect x="42.1921%" y="133" width="0.0218%" height="15" fill="rgb(221,1,38)" fg:x="20939893486" fg:w="10832009"/><text x="42.4421%" y="143.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (10,832,009 samples, 0.02%)</title><rect x="42.1921%" y="117" width="0.0218%" height="15" fill="rgb(206,124,46)" fg:x="20939893486" fg:w="10832009"/><text x="42.4421%" y="127.50"></text></g><g><title>core::cmp::PartialEq::ne (55,008,427 samples, 0.11%)</title><rect x="42.2139%" y="133" width="0.1108%" height="15" fill="rgb(249,21,11)" fg:x="20950725495" fg:w="55008427"/><text x="42.4639%" y="143.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (55,008,427 samples, 0.11%)</title><rect x="42.2139%" y="117" width="0.1108%" height="15" fill="rgb(222,201,40)" fg:x="20950725495" fg:w="55008427"/><text x="42.4639%" y="127.50"></text></g><g><title>shiro::engine::common::constants::rank_from_pos (11,009,588 samples, 0.02%)</title><rect x="42.3247%" y="133" width="0.0222%" height="15" fill="rgb(235,61,29)" fg:x="21005733922" fg:w="11009588"/><text x="42.5747%" y="143.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::Shr&lt;__RhsT&gt;&gt;::shr (11,009,588 samples, 0.02%)</title><rect x="42.3247%" y="117" width="0.0222%" height="15" fill="rgb(219,207,3)" fg:x="21005733922" fg:w="11009588"/><text x="42.5747%" y="127.50"></text></g><g><title>&lt;u64 as core::ops::bit::Shr&lt;usize&gt;&gt;::shr (11,009,588 samples, 0.02%)</title><rect x="42.3247%" y="101" width="0.0222%" height="15" fill="rgb(222,56,46)" fg:x="21005733922" fg:w="11009588"/><text x="42.5747%" y="111.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_rightmost (71,121,883 samples, 0.14%)</title><rect x="42.3469%" y="133" width="0.1433%" height="15" fill="rgb(239,76,54)" fg:x="21016743510" fg:w="71121883"/><text x="42.5969%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::trailing_zeros (43,825,403 samples, 0.09%)</title><rect x="42.4019%" y="117" width="0.0883%" height="15" fill="rgb(231,124,27)" fg:x="21044039990" fg:w="43825403"/><text x="42.6519%" y="127.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::unbounded_shl (5,503,458 samples, 0.01%)</title><rect x="42.4902%" y="133" width="0.0111%" height="15" fill="rgb(249,195,6)" fg:x="21087865393" fg:w="5503458"/><text x="42.7402%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::unbounded_shl (5,503,458 samples, 0.01%)</title><rect x="42.4902%" y="117" width="0.0111%" height="15" fill="rgb(237,174,47)" fg:x="21087865393" fg:w="5503458"/><text x="42.7402%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::unchecked_shl (5,503,458 samples, 0.01%)</title><rect x="42.4902%" y="101" width="0.0111%" height="15" fill="rgb(206,201,31)" fg:x="21087865393" fg:w="5503458"/><text x="42.7402%" y="111.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (112,448,048 samples, 0.23%)</title><rect x="42.5013%" y="133" width="0.2266%" height="15" fill="rgb(231,57,52)" fg:x="21093368851" fg:w="112448048"/><text x="42.7513%" y="143.50"></text></g><g><title>shiro::engine::common::movelist::MoveList::emplace_bytes (112,448,048 samples, 0.23%)</title><rect x="42.5013%" y="117" width="0.2266%" height="15" fill="rgb(248,177,22)" fg:x="21093368851" fg:w="112448048"/><text x="42.7513%" y="127.50"></text></g><g><title>core::ptr::write (21,924,272 samples, 0.04%)</title><rect x="42.6837%" y="101" width="0.0442%" height="15" fill="rgb(215,211,37)" fg:x="21183892627" fg:w="21924272"/><text x="42.9337%" y="111.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_all_moves (9,919,956,843 samples, 19.99%)</title><rect x="22.8066%" y="165" width="19.9879%" height="15" fill="rgb(241,128,51)" fg:x="11318902152" fg:w="9919956843"/><text x="23.0566%" y="175.50">shiro::engine::move_gen::MoveGe..</text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_pawn_pushes (370,429,251 samples, 0.75%)</title><rect x="42.0481%" y="149" width="0.7464%" height="15" fill="rgb(227,165,31)" fg:x="20868429744" fg:w="370429251"/><text x="42.2981%" y="159.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_promotions (33,042,096 samples, 0.07%)</title><rect x="42.7279%" y="133" width="0.0666%" height="15" fill="rgb(228,167,24)" fg:x="21205816899" fg:w="33042096"/><text x="42.9779%" y="143.50"></text></g><g><title>shiro::engine::common::movelist::MoveList::emplace_bytes (22,030,754 samples, 0.04%)</title><rect x="42.7501%" y="117" width="0.0444%" height="15" fill="rgb(228,143,12)" fg:x="21216828241" fg:w="22030754"/><text x="43.0001%" y="127.50"></text></g><g><title>core::ptr::write (16,520,701 samples, 0.03%)</title><rect x="42.7612%" y="101" width="0.0333%" height="15" fill="rgb(249,149,8)" fg:x="21222338294" fg:w="16520701"/><text x="43.0112%" y="111.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (33,038,740 samples, 0.07%)</title><rect x="45.6003%" y="149" width="0.0666%" height="15" fill="rgb(243,35,44)" fg:x="22631406204" fg:w="33038740"/><text x="45.8503%" y="159.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (33,038,740 samples, 0.07%)</title><rect x="45.6003%" y="133" width="0.0666%" height="15" fill="rgb(246,89,9)" fg:x="22631406204" fg:w="33038740"/><text x="45.8503%" y="143.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitOr&gt;::bitor (195,158,495 samples, 0.39%)</title><rect x="45.6669%" y="149" width="0.3932%" height="15" fill="rgb(233,213,13)" fg:x="22664444944" fg:w="195158495"/><text x="45.9169%" y="159.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitOr&gt;::bitor (195,158,495 samples, 0.39%)</title><rect x="45.6669%" y="133" width="0.3932%" height="15" fill="rgb(233,141,41)" fg:x="22664444944" fg:w="195158495"/><text x="45.9169%" y="143.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (16,523,501 samples, 0.03%)</title><rect x="46.1929%" y="133" width="0.0333%" height="15" fill="rgb(239,167,4)" fg:x="22925519694" fg:w="16523501"/><text x="46.4429%" y="143.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (16,523,501 samples, 0.03%)</title><rect x="46.1929%" y="117" width="0.0333%" height="15" fill="rgb(209,217,16)" fg:x="22925519694" fg:w="16523501"/><text x="46.4429%" y="127.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitOr&gt;::bitor (5,510,906 samples, 0.01%)</title><rect x="46.2262%" y="133" width="0.0111%" height="15" fill="rgb(219,88,35)" fg:x="22942043195" fg:w="5510906"/><text x="46.4762%" y="143.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitOr&gt;::bitor (5,510,906 samples, 0.01%)</title><rect x="46.2262%" y="117" width="0.0111%" height="15" fill="rgb(220,193,23)" fg:x="22942043195" fg:w="5510906"/><text x="46.4762%" y="127.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitOrAssign&gt;::bitor_assign (5,513,085 samples, 0.01%)</title><rect x="46.2373%" y="133" width="0.0111%" height="15" fill="rgb(230,90,52)" fg:x="22947554101" fg:w="5513085"/><text x="46.4873%" y="143.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitOrAssign&gt;::bitor_assign (5,513,085 samples, 0.01%)</title><rect x="46.2373%" y="117" width="0.0111%" height="15" fill="rgb(252,106,19)" fg:x="22947554101" fg:w="5513085"/><text x="46.4873%" y="127.50"></text></g><g><title>core::cmp::PartialEq::ne (22,029,515 samples, 0.04%)</title><rect x="46.2484%" y="133" width="0.0444%" height="15" fill="rgb(206,74,20)" fg:x="22953067186" fg:w="22029515"/><text x="46.4984%" y="143.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (22,029,515 samples, 0.04%)</title><rect x="46.2484%" y="117" width="0.0444%" height="15" fill="rgb(230,138,44)" fg:x="22953067186" fg:w="22029515"/><text x="46.4984%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::count_ones (16,500,138 samples, 0.03%)</title><rect x="46.2928%" y="133" width="0.0332%" height="15" fill="rgb(235,182,43)" fg:x="22975096701" fg:w="16500138"/><text x="46.5428%" y="143.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_rightmost (5,494,393 samples, 0.01%)</title><rect x="46.3261%" y="133" width="0.0111%" height="15" fill="rgb(242,16,51)" fg:x="22991596839" fg:w="5494393"/><text x="46.5761%" y="143.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_check_and_pin_masks (142,996,267 samples, 0.29%)</title><rect x="46.0601%" y="149" width="0.2881%" height="15" fill="rgb(248,9,4)" fg:x="22859603439" fg:w="142996267"/><text x="46.3101%" y="159.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::set (5,508,474 samples, 0.01%)</title><rect x="46.3371%" y="133" width="0.0111%" height="15" fill="rgb(210,31,22)" fg:x="22997091232" fg:w="5508474"/><text x="46.5871%" y="143.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitOrAssign&gt;::bitor_assign (33,029,377 samples, 0.07%)</title><rect x="46.3593%" y="133" width="0.0666%" height="15" fill="rgb(239,54,39)" fg:x="23008102428" fg:w="33029377"/><text x="46.6093%" y="143.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitOrAssign&gt;::bitor_assign (33,029,377 samples, 0.07%)</title><rect x="46.3593%" y="117" width="0.0666%" height="15" fill="rgb(230,99,41)" fg:x="23008102428" fg:w="33029377"/><text x="46.6093%" y="127.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitXor&gt;::bitxor (11,006,604 samples, 0.02%)</title><rect x="46.4259%" y="133" width="0.0222%" height="15" fill="rgb(253,106,12)" fg:x="23041131805" fg:w="11006604"/><text x="46.6759%" y="143.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitXor&gt;::bitxor (11,006,604 samples, 0.02%)</title><rect x="46.4259%" y="117" width="0.0222%" height="15" fill="rgb(213,46,41)" fg:x="23041131805" fg:w="11006604"/><text x="46.6759%" y="127.50"></text></g><g><title>core::cmp::PartialEq::ne (169,194,562 samples, 0.34%)</title><rect x="46.4481%" y="133" width="0.3409%" height="15" fill="rgb(215,133,35)" fg:x="23052138409" fg:w="169194562"/><text x="46.6981%" y="143.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (169,194,562 samples, 0.34%)</title><rect x="46.4481%" y="117" width="0.3409%" height="15" fill="rgb(213,28,5)" fg:x="23052138409" fg:w="169194562"/><text x="46.6981%" y="127.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::leading_zeros (5,498,447 samples, 0.01%)</title><rect x="46.7890%" y="133" width="0.0111%" height="15" fill="rgb(215,77,49)" fg:x="23221332971" fg:w="5498447"/><text x="47.0390%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (5,498,447 samples, 0.01%)</title><rect x="46.7890%" y="117" width="0.0111%" height="15" fill="rgb(248,100,22)" fg:x="23221332971" fg:w="5498447"/><text x="47.0390%" y="127.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_rightmost (27,506,463 samples, 0.06%)</title><rect x="46.8001%" y="133" width="0.0554%" height="15" fill="rgb(208,67,9)" fg:x="23226831418" fg:w="27506463"/><text x="47.0501%" y="143.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::unbounded_shr (5,509,907 samples, 0.01%)</title><rect x="46.8555%" y="133" width="0.0111%" height="15" fill="rgb(219,133,21)" fg:x="23254337881" fg:w="5509907"/><text x="47.1055%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::unbounded_shr (5,509,907 samples, 0.01%)</title><rect x="46.8555%" y="117" width="0.0111%" height="15" fill="rgb(246,46,29)" fg:x="23254337881" fg:w="5509907"/><text x="47.1055%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::unchecked_shr (5,509,907 samples, 0.01%)</title><rect x="46.8555%" y="101" width="0.0111%" height="15" fill="rgb(246,185,52)" fg:x="23254337881" fg:w="5509907"/><text x="47.1055%" y="111.50"></text></g><g><title>shiro::engine::move_gen::masks::pext_dg_lookup (38,323,058 samples, 0.08%)</title><rect x="46.8666%" y="133" width="0.0772%" height="15" fill="rgb(252,136,11)" fg:x="23259847788" fg:w="38323058"/><text x="47.1166%" y="143.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (32,825,581 samples, 0.07%)</title><rect x="46.8777%" y="117" width="0.0661%" height="15" fill="rgb(219,138,53)" fg:x="23265345265" fg:w="32825581"/><text x="47.1277%" y="127.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (32,825,581 samples, 0.07%)</title><rect x="46.8777%" y="101" width="0.0661%" height="15" fill="rgb(211,51,23)" fg:x="23265345265" fg:w="32825581"/><text x="47.1277%" y="111.50"></text></g><g><title>core::slice::index::get_noubcheck (32,825,581 samples, 0.07%)</title><rect x="46.8777%" y="85" width="0.0661%" height="15" fill="rgb(247,221,28)" fg:x="23265345265" fg:w="32825581"/><text x="47.1277%" y="95.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::new (2,147,398,554 samples, 4.33%)</title><rect x="42.7945%" y="165" width="4.3268%" height="15" fill="rgb(251,222,45)" fg:x="21238858995" fg:w="2147398554"/><text x="43.0445%" y="175.50">shiro..</text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_seen_by_enemy (383,657,843 samples, 0.77%)</title><rect x="46.3482%" y="149" width="0.7730%" height="15" fill="rgb(217,162,53)" fg:x="23002599706" fg:w="383657843"/><text x="46.5982%" y="159.50"></text></g><g><title>shiro::engine::move_gen::masks::pext_hv_lookup (88,086,703 samples, 0.18%)</title><rect x="46.9438%" y="133" width="0.1775%" height="15" fill="rgb(229,93,14)" fg:x="23298170846" fg:w="88086703"/><text x="47.1938%" y="143.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (60,555,470 samples, 0.12%)</title><rect x="46.9993%" y="117" width="0.1220%" height="15" fill="rgb(209,67,49)" fg:x="23325702079" fg:w="60555470"/><text x="47.2493%" y="127.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (60,555,470 samples, 0.12%)</title><rect x="46.9993%" y="101" width="0.1220%" height="15" fill="rgb(213,87,29)" fg:x="23325702079" fg:w="60555470"/><text x="47.2493%" y="111.50"></text></g><g><title>core::slice::index::get_noubcheck (60,555,470 samples, 0.12%)</title><rect x="46.9993%" y="85" width="0.1220%" height="15" fill="rgb(205,151,52)" fg:x="23325702079" fg:w="60555470"/><text x="47.2493%" y="95.50"></text></g><g><title>[unknown] (5,509,387 samples, 0.01%)</title><rect x="47.1102%" y="69" width="0.0111%" height="15" fill="rgb(253,215,39)" fg:x="23380748162" fg:w="5509387"/><text x="47.3602%" y="79.50"></text></g><g><title>shiro::engine::move_gen::gen_moves (429,480,275 samples, 0.87%)</title><rect x="47.1213%" y="165" width="0.8654%" height="15" fill="rgb(221,220,41)" fg:x="23386257549" fg:w="429480275"/><text x="47.3713%" y="175.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_all_moves (5,509,795 samples, 0.01%)</title><rect x="47.9755%" y="149" width="0.0111%" height="15" fill="rgb(218,133,21)" fg:x="23810228029" fg:w="5509795"/><text x="48.2255%" y="159.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_enpassant (5,509,795 samples, 0.01%)</title><rect x="47.9755%" y="133" width="0.0111%" height="15" fill="rgb(221,193,43)" fg:x="23810228029" fg:w="5509795"/><text x="48.2255%" y="143.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::Shr&lt;__RhsT&gt;&gt;::shr (5,509,795 samples, 0.01%)</title><rect x="47.9755%" y="117" width="0.0111%" height="15" fill="rgb(240,128,52)" fg:x="23810228029" fg:w="5509795"/><text x="48.2255%" y="127.50"></text></g><g><title>&lt;u64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (5,509,795 samples, 0.01%)</title><rect x="47.9755%" y="101" width="0.0111%" height="15" fill="rgb(253,114,12)" fg:x="23810228029" fg:w="5509795"/><text x="48.2255%" y="111.50"></text></g><g><title>&lt;shiro::engine::core::BoardState as core::clone::Clone&gt;::clone (2,229,535,343 samples, 4.49%)</title><rect x="69.2563%" y="149" width="4.4923%" height="15" fill="rgb(215,223,47)" fg:x="34371851535" fg:w="2229535343"/><text x="69.5063%" y="159.50">&lt;shir..</text></g><g><title>[libc.so.6] (2,229,535,343 samples, 4.49%)</title><rect x="69.2563%" y="133" width="4.4923%" height="15" fill="rgb(248,225,23)" fg:x="34371851535" fg:w="2229535343"/><text x="69.5063%" y="143.50">[libc..</text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAndAssign&gt;::bitand_assign (126,682,841 samples, 0.26%)</title><rect x="73.7486%" y="149" width="0.2553%" height="15" fill="rgb(250,108,0)" fg:x="36601386878" fg:w="126682841"/><text x="73.9986%" y="159.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAndAssign&gt;::bitand_assign (126,682,841 samples, 0.26%)</title><rect x="73.7486%" y="133" width="0.2553%" height="15" fill="rgb(228,208,7)" fg:x="36601386878" fg:w="126682841"/><text x="73.9986%" y="143.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitOrAssign&gt;::bitor_assign (2,682,006,005 samples, 5.40%)</title><rect x="74.0039%" y="149" width="5.4040%" height="15" fill="rgb(244,45,10)" fg:x="36728069719" fg:w="2682006005"/><text x="74.2539%" y="159.50">&lt;shiro:..</text></g><g><title>&lt;u64 as core::ops::bit::BitOrAssign&gt;::bitor_assign (2,682,006,005 samples, 5.40%)</title><rect x="74.0039%" y="133" width="5.4040%" height="15" fill="rgb(207,125,25)" fg:x="36728069719" fg:w="2682006005"/><text x="74.2539%" y="143.50">&lt;u64 as..</text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::Not&gt;::not (5,513,485 samples, 0.01%)</title><rect x="79.4079%" y="149" width="0.0111%" height="15" fill="rgb(210,195,18)" fg:x="39410075724" fg:w="5513485"/><text x="79.6579%" y="159.50"></text></g><g><title>&lt;u64 as core::ops::bit::Not&gt;::not (5,513,485 samples, 0.01%)</title><rect x="79.4079%" y="133" width="0.0111%" height="15" fill="rgb(249,80,12)" fg:x="39410075724" fg:w="5513485"/><text x="79.6579%" y="143.50"></text></g><g><title>[libc.so.6] (8,579,791,225 samples, 17.29%)</title><rect x="79.4190%" y="149" width="17.2875%" height="15" fill="rgb(221,65,9)" fg:x="39415589209" fg:w="8579791225"/><text x="79.6690%" y="159.50">[libc.so.6]</text></g><g><title>[unknown] (5,495,660 samples, 0.01%)</title><rect x="96.6955%" y="133" width="0.0111%" height="15" fill="rgb(235,49,36)" fg:x="47989884774" fg:w="5495660"/><text x="96.9455%" y="143.50"></text></g><g><title>[unknown] (5,495,660 samples, 0.01%)</title><rect x="96.6955%" y="117" width="0.0111%" height="15" fill="rgb(225,32,20)" fg:x="47989884774" fg:w="5495660"/><text x="96.9455%" y="127.50"></text></g><g><title>[unknown] (5,495,660 samples, 0.01%)</title><rect x="96.6955%" y="101" width="0.0111%" height="15" fill="rgb(215,141,46)" fg:x="47989884774" fg:w="5495660"/><text x="96.9455%" y="111.50"></text></g><g><title>[unknown] (5,495,660 samples, 0.01%)</title><rect x="96.6955%" y="85" width="0.0111%" height="15" fill="rgb(250,160,47)" fg:x="47989884774" fg:w="5495660"/><text x="96.9455%" y="95.50"></text></g><g><title>core::num::&lt;impl usize&gt;::abs_diff (5,337,679 samples, 0.01%)</title><rect x="96.7065%" y="149" width="0.0108%" height="15" fill="rgb(216,222,40)" fg:x="47995380434" fg:w="5337679"/><text x="96.9565%" y="159.50"></text></g><g><title>shiro::engine::common::chess_move::Move::promo (5,503,521 samples, 0.01%)</title><rect x="96.7173%" y="149" width="0.0111%" height="15" fill="rgb(234,217,39)" fg:x="48000718113" fg:w="5503521"/><text x="96.9673%" y="159.50"></text></g><g><title>shiro::engine::common::chess_move::Move::promo_or_err (5,503,521 samples, 0.01%)</title><rect x="96.7173%" y="133" width="0.0111%" height="15" fill="rgb(207,178,40)" fg:x="48000718113" fg:w="5503521"/><text x="96.9673%" y="143.50"></text></g><g><title>modular_bitfield::private::proc::read_specifier (5,503,521 samples, 0.01%)</title><rect x="96.7173%" y="117" width="0.0111%" height="15" fill="rgb(221,136,13)" fg:x="48000718113" fg:w="5503521"/><text x="96.9673%" y="127.50"></text></g><g><title>shiro::engine::common::chess_move::Move::start (49,540,481 samples, 0.10%)</title><rect x="96.7284%" y="149" width="0.0998%" height="15" fill="rgb(249,199,10)" fg:x="48006221634" fg:w="49540481"/><text x="96.9784%" y="159.50"></text></g><g><title>shiro::engine::common::chess_move::Move::start_or_err (49,540,481 samples, 0.10%)</title><rect x="96.7284%" y="133" width="0.0998%" height="15" fill="rgb(249,222,13)" fg:x="48006221634" fg:w="49540481"/><text x="96.9784%" y="143.50"></text></g><g><title>modular_bitfield::private::proc::read_specifier (49,540,481 samples, 0.10%)</title><rect x="96.7284%" y="117" width="0.0998%" height="15" fill="rgb(244,185,38)" fg:x="48006221634" fg:w="49540481"/><text x="96.9784%" y="127.50"></text></g><g><title>&lt;modular_bitfield::private::push_pop::PushBuffer&lt;u8&gt; as modular_bitfield::private::traits::PushBits&gt;::push_bits (49,540,481 samples, 0.10%)</title><rect x="96.7284%" y="101" width="0.0998%" height="15" fill="rgb(236,202,9)" fg:x="48006221634" fg:w="49540481"/><text x="96.9784%" y="111.50"></text></g><g><title>shiro::engine::core::BoardState::get_color_bb_mut (27,547,185 samples, 0.06%)</title><rect x="96.8282%" y="149" width="0.0555%" height="15" fill="rgb(250,229,37)" fg:x="48055762115" fg:w="27547185"/><text x="97.0782%" y="159.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (5,497,619 samples, 0.01%)</title><rect x="97.0168%" y="117" width="0.0111%" height="15" fill="rgb(206,174,23)" fg:x="48149374731" fg:w="5497619"/><text x="97.2668%" y="127.50"></text></g><g><title>&lt;shiro::engine::core::PieceType as modular_bitfield::Specifier&gt;::from_bytes (16,524,450 samples, 0.03%)</title><rect x="97.0279%" y="101" width="0.0333%" height="15" fill="rgb(211,33,43)" fg:x="48154872350" fg:w="16524450"/><text x="97.2779%" y="111.50"></text></g><g><title>shiro::engine::core::BoardState::get_peice_bb_mut (132,161,993 samples, 0.27%)</title><rect x="96.8837%" y="149" width="0.2663%" height="15" fill="rgb(245,58,50)" fg:x="48083309300" fg:w="132161993"/><text x="97.1337%" y="159.50"></text></g><g><title>shiro::engine::core::Piece::ptype (66,096,562 samples, 0.13%)</title><rect x="97.0168%" y="133" width="0.1332%" height="15" fill="rgb(244,68,36)" fg:x="48149374731" fg:w="66096562"/><text x="97.2668%" y="143.50"></text></g><g><title>shiro::engine::core::Piece::ptype_or_err (60,598,943 samples, 0.12%)</title><rect x="97.0279%" y="117" width="0.1221%" height="15" fill="rgb(232,229,15)" fg:x="48154872350" fg:w="60598943"/><text x="97.2779%" y="127.50"></text></g><g><title>modular_bitfield::private::proc::read_specifier (44,074,493 samples, 0.09%)</title><rect x="97.0612%" y="101" width="0.0888%" height="15" fill="rgb(254,30,23)" fg:x="48171396800" fg:w="44074493"/><text x="97.3112%" y="111.50"></text></g><g><title>&lt;modular_bitfield::private::push_pop::PushBuffer&lt;u8&gt; as modular_bitfield::private::traits::PushBits&gt;::push_bits (44,074,493 samples, 0.09%)</title><rect x="97.0612%" y="85" width="0.0888%" height="15" fill="rgb(235,160,14)" fg:x="48171396800" fg:w="44074493"/><text x="97.3112%" y="95.50"></text></g><g><title>shiro::engine::core::Flags::set_has_ep (87,803,963 samples, 0.18%)</title><rect x="97.1500%" y="149" width="0.1769%" height="15" fill="rgb(212,155,44)" fg:x="48215471293" fg:w="87803963"/><text x="97.4000%" y="159.50"></text></g><g><title>shiro::engine::core::Flags::set_has_ep_checked (87,803,963 samples, 0.18%)</title><rect x="97.1500%" y="133" width="0.1769%" height="15" fill="rgb(226,2,50)" fg:x="48215471293" fg:w="87803963"/><text x="97.4000%" y="143.50"></text></g><g><title>modular_bitfield::private::proc::write_specifier (87,803,963 samples, 0.18%)</title><rect x="97.1500%" y="117" width="0.1769%" height="15" fill="rgb(234,177,6)" fg:x="48215471293" fg:w="87803963"/><text x="97.4000%" y="127.50"></text></g><g><title>shiro::engine::core::Flags::turn (93,615,284 samples, 0.19%)</title><rect x="97.3269%" y="149" width="0.1886%" height="15" fill="rgb(217,24,9)" fg:x="48303275256" fg:w="93615284"/><text x="97.5769%" y="159.50"></text></g><g><title>shiro::engine::core::Flags::turn_or_err (93,615,284 samples, 0.19%)</title><rect x="97.3269%" y="133" width="0.1886%" height="15" fill="rgb(220,13,46)" fg:x="48303275256" fg:w="93615284"/><text x="97.5769%" y="143.50"></text></g><g><title>modular_bitfield::private::proc::read_specifier (93,615,284 samples, 0.19%)</title><rect x="97.3269%" y="117" width="0.1886%" height="15" fill="rgb(239,221,27)" fg:x="48303275256" fg:w="93615284"/><text x="97.5769%" y="127.50"></text></g><g><title>&lt;modular_bitfield::private::push_pop::PushBuffer&lt;u8&gt; as modular_bitfield::private::traits::PushBits&gt;::push_bits (93,615,284 samples, 0.19%)</title><rect x="97.3269%" y="101" width="0.1886%" height="15" fill="rgb(222,198,25)" fg:x="48303275256" fg:w="93615284"/><text x="97.5769%" y="111.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (22,032,567 samples, 0.04%)</title><rect x="97.5155%" y="133" width="0.0444%" height="15" fill="rgb(211,99,13)" fg:x="48396890540" fg:w="22032567"/><text x="97.7655%" y="143.50"></text></g><g><title>shiro::engine::core::Piece::ptype (82,579,962 samples, 0.17%)</title><rect x="97.5155%" y="149" width="0.1664%" height="15" fill="rgb(232,111,31)" fg:x="48396890540" fg:w="82579962"/><text x="97.7655%" y="159.50"></text></g><g><title>shiro::engine::core::Piece::ptype_or_err (60,547,395 samples, 0.12%)</title><rect x="97.5599%" y="133" width="0.1220%" height="15" fill="rgb(245,82,37)" fg:x="48418923107" fg:w="60547395"/><text x="97.8099%" y="143.50"></text></g><g><title>modular_bitfield::private::proc::read_specifier (60,547,395 samples, 0.12%)</title><rect x="97.5599%" y="117" width="0.1220%" height="15" fill="rgb(227,149,46)" fg:x="48418923107" fg:w="60547395"/><text x="97.8099%" y="127.50"></text></g><g><title>&lt;modular_bitfield::private::push_pop::PushBuffer&lt;u8&gt; as modular_bitfield::private::traits::PushBits&gt;::push_bits (60,547,395 samples, 0.12%)</title><rect x="97.5599%" y="101" width="0.1220%" height="15" fill="rgb(218,36,50)" fg:x="48418923107" fg:w="60547395"/><text x="97.8099%" y="111.50"></text></g><g><title>shiro::engine::perft::make_move (24,680,257,609 samples, 49.73%)</title><rect x="47.9866%" y="165" width="49.7286%" height="15" fill="rgb(226,80,48)" fg:x="23815737824" fg:w="24680257609"/><text x="48.2366%" y="175.50">shiro::engine::perft::make_move</text></g><g><title>shiro::engine::core::Piece::with_color (16,524,931 samples, 0.03%)</title><rect x="97.6819%" y="149" width="0.0333%" height="15" fill="rgb(238,224,15)" fg:x="48479470502" fg:w="16524931"/><text x="97.9319%" y="159.50"></text></g><g><title>shiro::engine::core::Piece::set_color (16,524,931 samples, 0.03%)</title><rect x="97.6819%" y="133" width="0.0333%" height="15" fill="rgb(241,136,10)" fg:x="48479470502" fg:w="16524931"/><text x="97.9319%" y="143.50"></text></g><g><title>shiro::engine::core::Piece::set_color_checked (16,524,931 samples, 0.03%)</title><rect x="97.6819%" y="117" width="0.0333%" height="15" fill="rgb(208,32,45)" fg:x="48479470502" fg:w="16524931"/><text x="97.9319%" y="127.50"></text></g><g><title>modular_bitfield::private::proc::write_specifier (16,524,931 samples, 0.03%)</title><rect x="97.6819%" y="101" width="0.0333%" height="15" fill="rgb(207,135,9)" fg:x="48479470502" fg:w="16524931"/><text x="97.9319%" y="111.50"></text></g><g><title>shiro::engine::common::movelist::MoveList::get (33,014,340 samples, 0.07%)</title><rect x="99.4453%" y="133" width="0.0665%" height="15" fill="rgb(206,86,44)" fg:x="49354649326" fg:w="33014340"/><text x="99.6953%" y="143.50"></text></g><g><title>&lt;shiro::engine::common::movelist::MoveListIter as core::iter::traits::iterator::Iterator&gt;::next (368,955,360 samples, 0.74%)</title><rect x="98.9239%" y="149" width="0.7434%" height="15" fill="rgb(245,177,15)" fg:x="49095871290" fg:w="368955360"/><text x="99.1739%" y="159.50"></text></g><g><title>shiro::engine::common::movelist::MoveList::len (77,162,984 samples, 0.16%)</title><rect x="99.5119%" y="133" width="0.1555%" height="15" fill="rgb(206,64,50)" fg:x="49387663666" fg:w="77162984"/><text x="99.7619%" y="143.50"></text></g><g><title>all (49,629,927,326 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(234,36,40)" fg:x="0" fg:w="49629927326"/><text x="0.2500%" y="207.50"></text></g><g><title>game (49,629,927,326 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(213,64,8)" fg:x="0" fg:w="49629927326"/><text x="0.2500%" y="191.50">game</text></g><g><title>shiro::engine::perft::perft_simple (1,133,931,893 samples, 2.28%)</title><rect x="97.7152%" y="165" width="2.2848%" height="15" fill="rgb(210,75,36)" fg:x="48495995433" fg:w="1133931893"/><text x="97.9652%" y="175.50">s..</text></g><g><title>shiro::engine::common::movelist::MoveList::new (165,100,676 samples, 0.33%)</title><rect x="99.6673%" y="149" width="0.3327%" height="15" fill="rgb(229,88,21)" fg:x="49464826650" fg:w="165100676"/><text x="99.9173%" y="159.50"></text></g><g><title>[libc.so.6] (165,100,676 samples, 0.33%)</title><rect x="99.6673%" y="133" width="0.3327%" height="15" fill="rgb(252,204,47)" fg:x="49464826650" fg:w="165100676"/><text x="99.9173%" y="143.50"></text></g></svg></svg>