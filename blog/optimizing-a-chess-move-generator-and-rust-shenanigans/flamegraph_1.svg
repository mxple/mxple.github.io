<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="309.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="309.00"> </text><svg id="frames" x="10" width="1180" total_samples="112418924379"><g><title>[game] (657,625,970 samples, 0.58%)</title><rect x="0.0000%" y="245" width="0.5850%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="657625970"/><text x="0.2500%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (652,114,762 samples, 0.58%)</title><rect x="0.0049%" y="229" width="0.5801%" height="15" fill="rgb(217,0,24)" fg:x="5511208" fg:w="652114762"/><text x="0.2549%" y="239.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_hv (16,544,999 samples, 0.01%)</title><rect x="0.6200%" y="197" width="0.0147%" height="15" fill="rgb(221,193,54)" fg:x="697014436" fg:w="16544999"/><text x="0.8700%" y="207.50"></text></g><g><title>shiro::engine::move_gen::masks::pext_hv_lookup (16,544,999 samples, 0.01%)</title><rect x="0.6200%" y="181" width="0.0147%" height="15" fill="rgb(248,212,6)" fg:x="697014436" fg:w="16544999"/><text x="0.8700%" y="191.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_all_moves (55,862,891 samples, 0.05%)</title><rect x="0.5949%" y="213" width="0.0497%" height="15" fill="rgb(208,68,35)" fg:x="668728646" fg:w="55862891"/><text x="0.8449%" y="223.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::new (27,609,070 samples, 0.02%)</title><rect x="0.6445%" y="213" width="0.0246%" height="15" fill="rgb(232,128,0)" fg:x="724591537" fg:w="27609070"/><text x="0.8945%" y="223.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (143,510,757 samples, 0.13%)</title><rect x="6.6945%" y="149" width="0.1277%" height="15" fill="rgb(207,160,47)" fg:x="7525937463" fg:w="143510757"/><text x="6.9445%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (132,568,292 samples, 0.12%)</title><rect x="6.8222%" y="149" width="0.1179%" height="15" fill="rgb(228,23,34)" fg:x="7669448220" fg:w="132568292"/><text x="7.0722%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::set_ptr_and_cap (27,601,029 samples, 0.02%)</title><rect x="6.9401%" y="149" width="0.0246%" height="15" fill="rgb(218,30,26)" fg:x="7802016512" fg:w="27601029"/><text x="7.1901%" y="159.50"></text></g><g><title>_RNvCs10VBLPNcvx_7___rustc13___rdl_realloc (282,550,113 samples, 0.25%)</title><rect x="7.3231%" y="85" width="0.2513%" height="15" fill="rgb(220,122,19)" fg:x="8232515343" fg:w="282550113"/><text x="7.5731%" y="95.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (282,550,113 samples, 0.25%)</title><rect x="7.3231%" y="69" width="0.2513%" height="15" fill="rgb(250,228,42)" fg:x="8232515343" fg:w="282550113"/><text x="7.5731%" y="79.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (5,270,063,964 samples, 4.69%)</title><rect x="7.1954%" y="133" width="4.6879%" height="15" fill="rgb(240,193,28)" fg:x="8089019146" fg:w="5270063964"/><text x="7.4454%" y="143.50">&lt;allo..</text></g><g><title>alloc::alloc::Global::grow_impl (5,270,063,964 samples, 4.69%)</title><rect x="7.1954%" y="117" width="4.6879%" height="15" fill="rgb(216,20,37)" fg:x="8089019146" fg:w="5270063964"/><text x="7.4454%" y="127.50">alloc..</text></g><g><title>alloc::alloc::realloc (5,165,199,618 samples, 4.59%)</title><rect x="7.2887%" y="101" width="4.5946%" height="15" fill="rgb(206,188,39)" fg:x="8193883492" fg:w="5165199618"/><text x="7.5387%" y="111.50">alloc..</text></g><g><title>realloc (4,844,017,654 samples, 4.31%)</title><rect x="7.5744%" y="85" width="4.3089%" height="15" fill="rgb(217,207,13)" fg:x="8515065456" fg:w="4844017654"/><text x="7.8244%" y="95.50">reall..</text></g><g><title>[libc.so.6] (4,220,180,793 samples, 3.75%)</title><rect x="8.1293%" y="69" width="3.7540%" height="15" fill="rgb(231,73,38)" fg:x="9138902317" fg:w="4220180793"/><text x="8.3793%" y="79.50">[lib..</text></g><g><title>[libc.so.6] (3,612,777,647 samples, 3.21%)</title><rect x="8.6696%" y="53" width="3.2137%" height="15" fill="rgb(225,20,46)" fg:x="9746305463" fg:w="3612777647"/><text x="8.9196%" y="63.50">[li..</text></g><g><title>[libc.so.6] (66,227,479 samples, 0.06%)</title><rect x="11.8244%" y="37" width="0.0589%" height="15" fill="rgb(210,31,41)" fg:x="13292855631" fg:w="66227479"/><text x="12.0744%" y="47.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (27,582,608 samples, 0.02%)</title><rect x="11.8833%" y="133" width="0.0245%" height="15" fill="rgb(221,200,47)" fg:x="13359083110" fg:w="27582608"/><text x="12.1333%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (5,684,027,632 samples, 5.06%)</title><rect x="6.9647%" y="149" width="5.0561%" height="15" fill="rgb(226,26,5)" fg:x="7829617541" fg:w="5684027632"/><text x="7.2147%" y="159.50">alloc:..</text></g><g><title>malloc (126,979,455 samples, 0.11%)</title><rect x="11.9078%" y="133" width="0.1130%" height="15" fill="rgb(249,33,26)" fg:x="13386665718" fg:w="126979455"/><text x="12.1578%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (6,330,107,433 samples, 5.63%)</title><rect x="6.5127%" y="197" width="5.6308%" height="15" fill="rgb(235,183,28)" fg:x="7321521719" fg:w="6330107433"/><text x="6.7627%" y="207.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (6,131,210,955 samples, 5.45%)</title><rect x="6.6896%" y="181" width="5.4539%" height="15" fill="rgb(221,5,38)" fg:x="7520418197" fg:w="6131210955"/><text x="6.9396%" y="191.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (6,131,210,955 samples, 5.45%)</title><rect x="6.6896%" y="165" width="5.4539%" height="15" fill="rgb(247,18,42)" fg:x="7520418197" fg:w="6131210955"/><text x="6.9396%" y="175.50">alloc::..</text></g><g><title>core::cmp::max (137,983,979 samples, 0.12%)</title><rect x="12.0208%" y="149" width="0.1227%" height="15" fill="rgb(241,131,45)" fg:x="13513645173" fg:w="137983979"/><text x="12.2708%" y="159.50"></text></g><g><title>core::cmp::Ord::max (137,983,979 samples, 0.12%)</title><rect x="12.0208%" y="133" width="0.1227%" height="15" fill="rgb(249,31,29)" fg:x="13513645173" fg:w="137983979"/><text x="12.2708%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (183,051,577 samples, 0.16%)</title><rect x="12.2766%" y="165" width="0.1628%" height="15" fill="rgb(225,111,53)" fg:x="13801191961" fg:w="183051577"/><text x="12.5266%" y="175.50"></text></g><g><title>core::cmp::PartialEq::ne (33,132,226 samples, 0.03%)</title><rect x="12.4394%" y="165" width="0.0295%" height="15" fill="rgb(238,160,17)" fg:x="13984243538" fg:w="33132226"/><text x="12.6894%" y="175.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (33,132,226 samples, 0.03%)</title><rect x="12.4394%" y="149" width="0.0295%" height="15" fill="rgb(214,148,48)" fg:x="13984243538" fg:w="33132226"/><text x="12.6894%" y="159.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::leading_zeros (22,088,548 samples, 0.02%)</title><rect x="12.4689%" y="165" width="0.0196%" height="15" fill="rgb(232,36,49)" fg:x="14017375764" fg:w="22088548"/><text x="12.7189%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (22,088,548 samples, 0.02%)</title><rect x="12.4689%" y="149" width="0.0196%" height="15" fill="rgb(209,103,24)" fg:x="14017375764" fg:w="22088548"/><text x="12.7189%" y="159.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (88,314,089 samples, 0.08%)</title><rect x="12.4885%" y="165" width="0.0786%" height="15" fill="rgb(229,88,8)" fg:x="14039464312" fg:w="88314089"/><text x="12.7385%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (22,079,134 samples, 0.02%)</title><rect x="12.5474%" y="149" width="0.0196%" height="15" fill="rgb(213,181,19)" fg:x="14105699267" fg:w="22079134"/><text x="12.7974%" y="159.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::toggle (27,604,941 samples, 0.02%)</title><rect x="12.5671%" y="165" width="0.0246%" height="15" fill="rgb(254,191,54)" fg:x="14127778401" fg:w="27604941"/><text x="12.8171%" y="175.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_dg (597,660,490 samples, 0.53%)</title><rect x="12.1435%" y="181" width="0.5316%" height="15" fill="rgb(241,83,37)" fg:x="13651629152" fg:w="597660490"/><text x="12.3935%" y="191.50"></text></g><g><title>shiro::engine::move_gen::masks::pext_dg_lookup (93,906,300 samples, 0.08%)</title><rect x="12.5916%" y="165" width="0.0835%" height="15" fill="rgb(233,36,39)" fg:x="14155383342" fg:w="93906300"/><text x="12.8416%" y="175.50"></text></g><g><title>core::core_arch::x86_64::bmi2::_pext_u64 (38,703,920 samples, 0.03%)</title><rect x="12.6407%" y="149" width="0.0344%" height="15" fill="rgb(226,3,54)" fg:x="14210585722" fg:w="38703920"/><text x="12.8907%" y="159.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_enpassant (16,553,731 samples, 0.01%)</title><rect x="12.6752%" y="181" width="0.0147%" height="15" fill="rgb(245,192,40)" fg:x="14249289642" fg:w="16553731"/><text x="12.9252%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (483,699,489 samples, 0.43%)</title><rect x="13.0242%" y="165" width="0.4303%" height="15" fill="rgb(238,167,29)" fg:x="14641719071" fg:w="483699489"/><text x="13.2742%" y="175.50"></text></g><g><title>core::ptr::write (11,378,395 samples, 0.01%)</title><rect x="13.4444%" y="149" width="0.0101%" height="15" fill="rgb(232,182,51)" fg:x="15114040165" fg:w="11378395"/><text x="13.6944%" y="159.50"></text></g><g><title>core::cmp::PartialEq::ne (72,103,694 samples, 0.06%)</title><rect x="13.4545%" y="165" width="0.0641%" height="15" fill="rgb(231,60,39)" fg:x="15125418560" fg:w="72103694"/><text x="13.7045%" y="175.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (72,103,694 samples, 0.06%)</title><rect x="13.4545%" y="149" width="0.0641%" height="15" fill="rgb(208,69,12)" fg:x="15125418560" fg:w="72103694"/><text x="13.7045%" y="159.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::leading_zeros (16,573,746 samples, 0.01%)</title><rect x="13.5187%" y="165" width="0.0147%" height="15" fill="rgb(235,93,37)" fg:x="15197522254" fg:w="16573746"/><text x="13.7687%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (16,573,746 samples, 0.01%)</title><rect x="13.5187%" y="149" width="0.0147%" height="15" fill="rgb(213,116,39)" fg:x="15197522254" fg:w="16573746"/><text x="13.7687%" y="159.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (126,948,221 samples, 0.11%)</title><rect x="13.5334%" y="165" width="0.1129%" height="15" fill="rgb(222,207,29)" fg:x="15214096000" fg:w="126948221"/><text x="13.7834%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (38,632,470 samples, 0.03%)</title><rect x="13.6120%" y="149" width="0.0344%" height="15" fill="rgb(206,96,30)" fg:x="15302411751" fg:w="38632470"/><text x="13.8620%" y="159.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_hv (1,186,796,420 samples, 1.06%)</title><rect x="12.6899%" y="181" width="1.0557%" height="15" fill="rgb(218,138,4)" fg:x="14265843373" fg:w="1186796420"/><text x="12.9399%" y="191.50"></text></g><g><title>shiro::engine::move_gen::masks::pext_hv_lookup (100,552,188 samples, 0.09%)</title><rect x="13.6561%" y="165" width="0.0894%" height="15" fill="rgb(250,191,14)" fg:x="15352087605" fg:w="100552188"/><text x="13.9061%" y="175.50"></text></g><g><title>core::core_arch::x86_64::bmi2::_pext_u64 (50,007,936 samples, 0.04%)</title><rect x="13.7011%" y="149" width="0.0445%" height="15" fill="rgb(239,60,40)" fg:x="15402631857" fg:w="50007936"/><text x="13.9511%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (44,154,421 samples, 0.04%)</title><rect x="13.8193%" y="165" width="0.0393%" height="15" fill="rgb(206,27,48)" fg:x="15535459882" fg:w="44154421"/><text x="14.0693%" y="175.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_king_castle (160,082,172 samples, 0.14%)</title><rect x="13.7456%" y="181" width="0.1424%" height="15" fill="rgb(225,35,8)" fg:x="15452639793" fg:w="160082172"/><text x="13.9956%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (55,225,436 samples, 0.05%)</title><rect x="13.9518%" y="165" width="0.0491%" height="15" fill="rgb(250,213,24)" fg:x="15684446209" fg:w="55225436"/><text x="14.2018%" y="175.50"></text></g><g><title>core::ptr::write (27,608,754 samples, 0.02%)</title><rect x="13.9764%" y="149" width="0.0246%" height="15" fill="rgb(247,123,22)" fg:x="15712062891" fg:w="27608754"/><text x="14.2264%" y="159.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_king_normal (165,582,843 samples, 0.15%)</title><rect x="13.8880%" y="181" width="0.1473%" height="15" fill="rgb(231,138,38)" fg:x="15612721965" fg:w="165582843"/><text x="14.1380%" y="191.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (38,633,163 samples, 0.03%)</title><rect x="14.0009%" y="165" width="0.0344%" height="15" fill="rgb(231,145,46)" fg:x="15739671645" fg:w="38633163"/><text x="14.2509%" y="175.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitOr&gt;::bitor (27,607,018 samples, 0.02%)</title><rect x="14.1386%" y="165" width="0.0246%" height="15" fill="rgb(251,118,11)" fg:x="15894430259" fg:w="27607018"/><text x="14.3886%" y="175.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitOr&gt;::bitor (27,607,018 samples, 0.02%)</title><rect x="14.1386%" y="149" width="0.0246%" height="15" fill="rgb(217,147,25)" fg:x="15894430259" fg:w="27607018"/><text x="14.3886%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (171,295,669 samples, 0.15%)</title><rect x="14.1730%" y="165" width="0.1524%" height="15" fill="rgb(247,81,37)" fg:x="15933090326" fg:w="171295669"/><text x="14.4230%" y="175.50"></text></g><g><title>core::cmp::PartialEq::ne (49,669,607 samples, 0.04%)</title><rect x="14.3253%" y="165" width="0.0442%" height="15" fill="rgb(209,12,38)" fg:x="16104385995" fg:w="49669607"/><text x="14.5753%" y="175.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (49,669,607 samples, 0.04%)</title><rect x="14.3253%" y="149" width="0.0442%" height="15" fill="rgb(227,1,9)" fg:x="16104385995" fg:w="49669607"/><text x="14.5753%" y="159.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (27,590,027 samples, 0.02%)</title><rect x="14.3695%" y="165" width="0.0245%" height="15" fill="rgb(248,47,43)" fg:x="16154055602" fg:w="27590027"/><text x="14.6195%" y="175.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_knight (410,045,118 samples, 0.36%)</title><rect x="14.0353%" y="181" width="0.3647%" height="15" fill="rgb(221,10,30)" fg:x="15778304808" fg:w="410045118"/><text x="14.2853%" y="191.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_pawn_captures (110,398,667 samples, 0.10%)</title><rect x="14.4000%" y="181" width="0.0982%" height="15" fill="rgb(210,229,1)" fg:x="16188349926" fg:w="110398667"/><text x="14.6500%" y="191.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (16,560,802 samples, 0.01%)</title><rect x="14.4835%" y="165" width="0.0147%" height="15" fill="rgb(222,148,37)" fg:x="16282187791" fg:w="16560802"/><text x="14.7335%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (16,560,802 samples, 0.01%)</title><rect x="14.4835%" y="149" width="0.0147%" height="15" fill="rgb(234,67,33)" fg:x="16282187791" fg:w="16560802"/><text x="14.7335%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (104,911,031 samples, 0.09%)</title><rect x="14.6014%" y="165" width="0.0933%" height="15" fill="rgb(247,98,35)" fg:x="16414716738" fg:w="104911031"/><text x="14.8514%" y="175.50"></text></g><g><title>shiro::engine::common::constants::rank_from_pos (16,561,845 samples, 0.01%)</title><rect x="14.6947%" y="165" width="0.0147%" height="15" fill="rgb(247,138,52)" fg:x="16519627769" fg:w="16561845"/><text x="14.9447%" y="175.50"></text></g><g><title>[unknown] (15,872,978,193 samples, 14.12%)</title><rect x="0.5949%" y="229" width="14.1195%" height="15" fill="rgb(213,79,30)" fg:x="668728646" fg:w="15872978193"/><text x="0.8449%" y="239.50">[unknown]</text></g><g><title>shiro::engine::move_gen::gen_moves (15,789,506,232 samples, 14.05%)</title><rect x="0.6691%" y="213" width="14.0452%" height="15" fill="rgb(246,177,23)" fg:x="752200607" fg:w="15789506232"/><text x="0.9191%" y="223.50">shiro::engine::move_g..</text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_all_moves (2,890,077,687 samples, 2.57%)</title><rect x="12.1435%" y="197" width="2.5708%" height="15" fill="rgb(230,62,27)" fg:x="13651629152" fg:w="2890077687"/><text x="12.3935%" y="207.50">sh..</text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_pawn_pushes (242,958,246 samples, 0.22%)</title><rect x="14.4982%" y="181" width="0.2161%" height="15" fill="rgb(216,154,8)" fg:x="16298748593" fg:w="242958246"/><text x="14.7482%" y="191.50"></text></g><g><title>_RNvCs10VBLPNcvx_7___rustc13___rdl_dealloc (182,913,383 samples, 0.16%)</title><rect x="14.7143%" y="229" width="0.1627%" height="15" fill="rgb(244,35,45)" fg:x="16541706839" fg:w="182913383"/><text x="14.9643%" y="239.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (138,724,697 samples, 0.12%)</title><rect x="14.7537%" y="213" width="0.1234%" height="15" fill="rgb(251,115,12)" fg:x="16585895525" fg:w="138724697"/><text x="15.0037%" y="223.50"></text></g><g><title>_RNvCs10VBLPNcvx_7___rustc14___rust_dealloc (276,046,099 samples, 0.25%)</title><rect x="14.8771%" y="229" width="0.2456%" height="15" fill="rgb(240,54,50)" fg:x="16724620222" fg:w="276046099"/><text x="15.1271%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1,419,367,843 samples, 1.26%)</title><rect x="15.1226%" y="229" width="1.2626%" height="15" fill="rgb(233,84,52)" fg:x="17000666321" fg:w="1419367843"/><text x="15.3726%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (1,364,164,182 samples, 1.21%)</title><rect x="15.1717%" y="213" width="1.2135%" height="15" fill="rgb(207,117,47)" fg:x="17055869982" fg:w="1364164182"/><text x="15.4217%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (565,493,263 samples, 0.50%)</title><rect x="16.3852%" y="229" width="0.5030%" height="15" fill="rgb(249,43,39)" fg:x="18420034164" fg:w="565493263"/><text x="16.6352%" y="239.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (482,712,282 samples, 0.43%)</title><rect x="16.4588%" y="213" width="0.4294%" height="15" fill="rgb(209,38,44)" fg:x="18502815145" fg:w="482712282"/><text x="16.7088%" y="223.50"></text></g><g><title>cfree (922,493,251 samples, 0.82%)</title><rect x="16.8882%" y="229" width="0.8206%" height="15" fill="rgb(236,212,23)" fg:x="18985527427" fg:w="922493251"/><text x="17.1382%" y="239.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::new (922,493,251 samples, 0.82%)</title><rect x="16.8882%" y="213" width="0.8206%" height="15" fill="rgb(242,79,21)" fg:x="18985527427" fg:w="922493251"/><text x="17.1382%" y="223.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (82,802,712 samples, 0.07%)</title><rect x="18.0721%" y="197" width="0.0737%" height="15" fill="rgb(211,96,35)" fg:x="20316479708" fg:w="82802712"/><text x="18.3221%" y="207.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (82,802,712 samples, 0.07%)</title><rect x="18.0721%" y="181" width="0.0737%" height="15" fill="rgb(253,215,40)" fg:x="20316479708" fg:w="82802712"/><text x="18.3221%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (110,707,132 samples, 0.10%)</title><rect x="18.1458%" y="197" width="0.0985%" height="15" fill="rgb(211,81,21)" fg:x="20399282420" fg:w="110707132"/><text x="18.3958%" y="207.50"></text></g><g><title>core::cmp::PartialEq::ne (22,774,169 samples, 0.02%)</title><rect x="18.2442%" y="197" width="0.0203%" height="15" fill="rgb(208,190,38)" fg:x="20509989552" fg:w="22774169"/><text x="18.4942%" y="207.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (22,774,169 samples, 0.02%)</title><rect x="18.2442%" y="181" width="0.0203%" height="15" fill="rgb(235,213,38)" fg:x="20509989552" fg:w="22774169"/><text x="18.4942%" y="191.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (27,582,032 samples, 0.02%)</title><rect x="18.2645%" y="197" width="0.0245%" height="15" fill="rgb(237,122,38)" fg:x="20532763721" fg:w="27582032"/><text x="18.5145%" y="207.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_dg (619,219,827 samples, 0.55%)</title><rect x="17.7873%" y="213" width="0.5508%" height="15" fill="rgb(244,218,35)" fg:x="19996290362" fg:w="619219827"/><text x="18.0373%" y="223.50"></text></g><g><title>shiro::engine::move_gen::masks::pext_dg_lookup (49,646,002 samples, 0.04%)</title><rect x="18.2940%" y="197" width="0.0442%" height="15" fill="rgb(240,68,47)" fg:x="20565864187" fg:w="49646002"/><text x="18.5440%" y="207.50"></text></g><g><title>core::core_arch::x86_64::bmi2::_pext_u64 (27,579,887 samples, 0.02%)</title><rect x="18.3136%" y="181" width="0.0245%" height="15" fill="rgb(210,16,53)" fg:x="20587930302" fg:w="27579887"/><text x="18.5636%" y="191.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (49,663,929 samples, 0.04%)</title><rect x="20.2892%" y="197" width="0.0442%" height="15" fill="rgb(235,124,12)" fg:x="22808946687" fg:w="49663929"/><text x="20.5392%" y="207.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (49,663,929 samples, 0.04%)</title><rect x="20.2892%" y="181" width="0.0442%" height="15" fill="rgb(224,169,11)" fg:x="22808946687" fg:w="49663929"/><text x="20.5392%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2,795,201,934 samples, 2.49%)</title><rect x="20.3334%" y="197" width="2.4864%" height="15" fill="rgb(250,166,2)" fg:x="22858610616" fg:w="2795201934"/><text x="20.5834%" y="207.50">al..</text></g><g><title>core::ptr::write (138,598,986 samples, 0.12%)</title><rect x="22.6965%" y="181" width="0.1233%" height="15" fill="rgb(242,216,29)" fg:x="25515213564" fg:w="138598986"/><text x="22.9465%" y="191.50"></text></g><g><title>core::cmp::PartialEq::ne (441,867,023 samples, 0.39%)</title><rect x="22.8198%" y="197" width="0.3931%" height="15" fill="rgb(230,116,27)" fg:x="25653812550" fg:w="441867023"/><text x="23.0698%" y="207.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (441,867,023 samples, 0.39%)</title><rect x="22.8198%" y="181" width="0.3931%" height="15" fill="rgb(228,99,48)" fg:x="25653812550" fg:w="441867023"/><text x="23.0698%" y="191.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::leading_zeros (187,708,206 samples, 0.17%)</title><rect x="23.2129%" y="197" width="0.1670%" height="15" fill="rgb(253,11,6)" fg:x="26095679573" fg:w="187708206"/><text x="23.4629%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (187,708,206 samples, 0.17%)</title><rect x="23.2129%" y="181" width="0.1670%" height="15" fill="rgb(247,143,39)" fg:x="26095679573" fg:w="187708206"/><text x="23.4629%" y="191.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (656,935,918 samples, 0.58%)</title><rect x="23.3799%" y="197" width="0.5844%" height="15" fill="rgb(236,97,10)" fg:x="26283387779" fg:w="656935918"/><text x="23.6299%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (193,131,595 samples, 0.17%)</title><rect x="23.7924%" y="181" width="0.1718%" height="15" fill="rgb(233,208,19)" fg:x="26747192102" fg:w="193131595"/><text x="24.0424%" y="191.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::toggle (27,613,239 samples, 0.02%)</title><rect x="23.9642%" y="197" width="0.0246%" height="15" fill="rgb(216,164,2)" fg:x="26940323697" fg:w="27613239"/><text x="24.2142%" y="207.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_hv (6,843,835,600 samples, 6.09%)</title><rect x="18.3381%" y="213" width="6.0878%" height="15" fill="rgb(220,129,5)" fg:x="20615510189" fg:w="6843835600"/><text x="18.5881%" y="223.50">shiro::e..</text></g><g><title>shiro::engine::move_gen::masks::pext_hv_lookup (491,408,853 samples, 0.44%)</title><rect x="23.9888%" y="197" width="0.4371%" height="15" fill="rgb(242,17,10)" fg:x="26967936936" fg:w="491408853"/><text x="24.2388%" y="207.50"></text></g><g><title>core::core_arch::x86_64::bmi2::_pext_u64 (215,327,974 samples, 0.19%)</title><rect x="24.2344%" y="181" width="0.1915%" height="15" fill="rgb(242,107,0)" fg:x="27244017815" fg:w="215327974"/><text x="24.4844%" y="191.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (33,097,290 samples, 0.03%)</title><rect x="24.7353%" y="197" width="0.0294%" height="15" fill="rgb(251,28,31)" fg:x="27807103057" fg:w="33097290"/><text x="24.9853%" y="207.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (33,097,290 samples, 0.03%)</title><rect x="24.7353%" y="181" width="0.0294%" height="15" fill="rgb(233,223,10)" fg:x="27807103057" fg:w="33097290"/><text x="24.9853%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (574,935,151 samples, 0.51%)</title><rect x="24.7647%" y="197" width="0.5114%" height="15" fill="rgb(215,21,27)" fg:x="27840200347" fg:w="574935151"/><text x="25.0147%" y="207.50"></text></g><g><title>core::ptr::write (187,695,185 samples, 0.17%)</title><rect x="25.1092%" y="181" width="0.1670%" height="15" fill="rgb(232,23,21)" fg:x="28227440313" fg:w="187695185"/><text x="25.3592%" y="191.50"></text></g><g><title>core::cmp::PartialEq::ne (137,981,627 samples, 0.12%)</title><rect x="25.2761%" y="197" width="0.1227%" height="15" fill="rgb(244,5,23)" fg:x="28415135498" fg:w="137981627"/><text x="25.5261%" y="207.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (137,981,627 samples, 0.12%)</title><rect x="25.2761%" y="181" width="0.1227%" height="15" fill="rgb(226,81,46)" fg:x="28415135498" fg:w="137981627"/><text x="25.5261%" y="191.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (82,780,678 samples, 0.07%)</title><rect x="25.3989%" y="197" width="0.0736%" height="15" fill="rgb(247,70,30)" fg:x="28553117125" fg:w="82780678"/><text x="25.6489%" y="207.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (22,068,547 samples, 0.02%)</title><rect x="25.4921%" y="181" width="0.0196%" height="15" fill="rgb(212,68,19)" fg:x="28657980323" fg:w="22068547"/><text x="25.7421%" y="191.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (22,068,547 samples, 0.02%)</title><rect x="25.4921%" y="165" width="0.0196%" height="15" fill="rgb(240,187,13)" fg:x="28657980323" fg:w="22068547"/><text x="25.7421%" y="175.50"></text></g><g><title>core::cmp::PartialEq::ne (93,808,695 samples, 0.08%)</title><rect x="25.5314%" y="181" width="0.0834%" height="15" fill="rgb(223,113,26)" fg:x="28702117251" fg:w="93808695"/><text x="25.7814%" y="191.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (93,808,695 samples, 0.08%)</title><rect x="25.5314%" y="165" width="0.0834%" height="15" fill="rgb(206,192,2)" fg:x="28702117251" fg:w="93808695"/><text x="25.7814%" y="175.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::leading_zeros (33,078,711 samples, 0.03%)</title><rect x="25.6148%" y="181" width="0.0294%" height="15" fill="rgb(241,108,4)" fg:x="28795925946" fg:w="33078711"/><text x="25.8648%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (33,078,711 samples, 0.03%)</title><rect x="25.6148%" y="165" width="0.0294%" height="15" fill="rgb(247,173,49)" fg:x="28795925946" fg:w="33078711"/><text x="25.8648%" y="175.50"></text></g><g><title>shiro::engine::move_gen::masks::pext_dg_lookup (27,590,737 samples, 0.02%)</title><rect x="25.6639%" y="181" width="0.0245%" height="15" fill="rgb(224,114,35)" fg:x="28851075272" fg:w="27590737"/><text x="25.9139%" y="191.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_king_normal (1,457,960,591 samples, 1.30%)</title><rect x="24.4259%" y="213" width="1.2969%" height="15" fill="rgb(245,159,27)" fg:x="27459345789" fg:w="1457960591"/><text x="24.6759%" y="223.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_seen_by_enemy (281,408,577 samples, 0.25%)</title><rect x="25.4725%" y="197" width="0.2503%" height="15" fill="rgb(245,172,44)" fg:x="28635897803" fg:w="281408577"/><text x="25.7225%" y="207.50"></text></g><g><title>shiro::engine::move_gen::masks::pext_hv_lookup (38,640,371 samples, 0.03%)</title><rect x="25.6884%" y="181" width="0.0344%" height="15" fill="rgb(236,23,11)" fg:x="28878666009" fg:w="38640371"/><text x="25.9384%" y="191.50"></text></g><g><title>core::core_arch::x86_64::bmi2::_pext_u64 (27,605,917 samples, 0.02%)</title><rect x="25.6983%" y="165" width="0.0246%" height="15" fill="rgb(205,117,38)" fg:x="28889700463" fg:w="27605917"/><text x="25.9483%" y="175.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (66,232,521 samples, 0.06%)</title><rect x="25.8358%" y="197" width="0.0589%" height="15" fill="rgb(237,72,25)" fg:x="29044313765" fg:w="66232521"/><text x="26.0858%" y="207.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (66,232,521 samples, 0.06%)</title><rect x="25.8358%" y="181" width="0.0589%" height="15" fill="rgb(244,70,9)" fg:x="29044313765" fg:w="66232521"/><text x="26.0858%" y="191.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitOr&gt;::bitor (265,606,982 samples, 0.24%)</title><rect x="25.8947%" y="197" width="0.2363%" height="15" fill="rgb(217,125,39)" fg:x="29110546286" fg:w="265606982"/><text x="26.1447%" y="207.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitOr&gt;::bitor (265,606,982 samples, 0.24%)</title><rect x="25.8947%" y="181" width="0.2363%" height="15" fill="rgb(235,36,10)" fg:x="29110546286" fg:w="265606982"/><text x="26.1447%" y="191.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::Not&gt;::not (33,131,023 samples, 0.03%)</title><rect x="26.1310%" y="197" width="0.0295%" height="15" fill="rgb(251,123,47)" fg:x="29376153268" fg:w="33131023"/><text x="26.3810%" y="207.50"></text></g><g><title>&lt;u64 as core::ops::bit::Not&gt;::not (33,131,023 samples, 0.03%)</title><rect x="26.1310%" y="181" width="0.0295%" height="15" fill="rgb(221,13,13)" fg:x="29376153268" fg:w="33131023"/><text x="26.3810%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (127,986,907 samples, 0.11%)</title><rect x="26.1604%" y="197" width="0.1138%" height="15" fill="rgb(238,131,9)" fg:x="29409284291" fg:w="127986907"/><text x="26.4104%" y="207.50"></text></g><g><title>core::ptr::write (22,059,559 samples, 0.02%)</title><rect x="26.2547%" y="181" width="0.0196%" height="15" fill="rgb(211,50,8)" fg:x="29515211639" fg:w="22059559"/><text x="26.5047%" y="191.50"></text></g><g><title>core::cmp::PartialEq::ne (27,586,714 samples, 0.02%)</title><rect x="26.2743%" y="197" width="0.0245%" height="15" fill="rgb(245,182,24)" fg:x="29537271198" fg:w="27586714"/><text x="26.5243%" y="207.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (27,586,714 samples, 0.02%)</title><rect x="26.2743%" y="181" width="0.0245%" height="15" fill="rgb(242,14,37)" fg:x="29537271198" fg:w="27586714"/><text x="26.5243%" y="191.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::leading_zeros (16,563,837 samples, 0.01%)</title><rect x="26.2988%" y="197" width="0.0147%" height="15" fill="rgb(246,228,12)" fg:x="29564857912" fg:w="16563837"/><text x="26.5488%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (16,563,837 samples, 0.01%)</title><rect x="26.2988%" y="181" width="0.0147%" height="15" fill="rgb(213,55,15)" fg:x="29564857912" fg:w="16563837"/><text x="26.5488%" y="191.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (22,070,174 samples, 0.02%)</title><rect x="26.3136%" y="197" width="0.0196%" height="15" fill="rgb(209,9,3)" fg:x="29581421749" fg:w="22070174"/><text x="26.5636%" y="207.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_knight (708,256,725 samples, 0.63%)</title><rect x="25.7228%" y="213" width="0.6300%" height="15" fill="rgb(230,59,30)" fg:x="28917306380" fg:w="708256725"/><text x="25.9728%" y="223.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::toggle (22,071,182 samples, 0.02%)</title><rect x="26.3332%" y="197" width="0.0196%" height="15" fill="rgb(209,121,21)" fg:x="29603491923" fg:w="22071182"/><text x="26.5832%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (33,130,807 samples, 0.03%)</title><rect x="26.4166%" y="197" width="0.0295%" height="15" fill="rgb(220,109,13)" fg:x="29697310875" fg:w="33130807"/><text x="26.6666%" y="207.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_pawn_captures (129,831,435 samples, 0.12%)</title><rect x="26.3528%" y="213" width="0.1155%" height="15" fill="rgb(232,18,1)" fg:x="29625563105" fg:w="129831435"/><text x="26.6028%" y="223.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (24,952,858 samples, 0.02%)</title><rect x="26.4461%" y="197" width="0.0222%" height="15" fill="rgb(215,41,42)" fg:x="29730441682" fg:w="24952858"/><text x="26.6961%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (19,435,245 samples, 0.02%)</title><rect x="26.4510%" y="181" width="0.0173%" height="15" fill="rgb(224,123,36)" fg:x="29735959295" fg:w="19435245"/><text x="26.7010%" y="191.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (22,082,836 samples, 0.02%)</title><rect x="26.5323%" y="197" width="0.0196%" height="15" fill="rgb(240,125,3)" fg:x="29827282627" fg:w="22082836"/><text x="26.7823%" y="207.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (22,082,836 samples, 0.02%)</title><rect x="26.5323%" y="181" width="0.0196%" height="15" fill="rgb(205,98,50)" fg:x="29827282627" fg:w="22082836"/><text x="26.7823%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (93,817,155 samples, 0.08%)</title><rect x="26.5519%" y="197" width="0.0835%" height="15" fill="rgb(205,185,37)" fg:x="29849365463" fg:w="93817155"/><text x="26.8019%" y="207.50"></text></g><g><title>core::ptr::write (49,665,035 samples, 0.04%)</title><rect x="26.5912%" y="181" width="0.0442%" height="15" fill="rgb(238,207,15)" fg:x="29893517583" fg:w="49665035"/><text x="26.8412%" y="191.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (16,544,206 samples, 0.01%)</title><rect x="26.6599%" y="197" width="0.0147%" height="15" fill="rgb(213,199,42)" fg:x="29970777524" fg:w="16544206"/><text x="26.9099%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (16,544,206 samples, 0.01%)</title><rect x="26.6599%" y="181" width="0.0147%" height="15" fill="rgb(235,201,11)" fg:x="29970777524" fg:w="16544206"/><text x="26.9099%" y="191.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_all_moves (10,084,824,420 samples, 8.97%)</title><rect x="17.7088%" y="229" width="8.9708%" height="15" fill="rgb(207,46,11)" fg:x="19908020678" fg:w="10084824420"/><text x="17.9588%" y="239.50">shiro::engine..</text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_pawn_pushes (237,450,558 samples, 0.21%)</title><rect x="26.4683%" y="213" width="0.2112%" height="15" fill="rgb(241,35,35)" fg:x="29755394540" fg:w="237450558"/><text x="26.7183%" y="223.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (22,088,100 samples, 0.02%)</title><rect x="26.7630%" y="213" width="0.0196%" height="15" fill="rgb(243,32,47)" fg:x="30086689242" fg:w="22088100"/><text x="27.0130%" y="223.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (22,088,100 samples, 0.02%)</title><rect x="26.7630%" y="197" width="0.0196%" height="15" fill="rgb(247,202,23)" fg:x="30086689242" fg:w="22088100"/><text x="27.0130%" y="207.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitOrAssign&gt;::bitor_assign (60,723,748 samples, 0.05%)</title><rect x="26.7827%" y="213" width="0.0540%" height="15" fill="rgb(219,102,11)" fg:x="30108777342" fg:w="60723748"/><text x="27.0327%" y="223.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitOrAssign&gt;::bitor_assign (60,723,748 samples, 0.05%)</title><rect x="26.7827%" y="197" width="0.0540%" height="15" fill="rgb(243,110,44)" fg:x="30108777342" fg:w="60723748"/><text x="27.0327%" y="207.50"></text></g><g><title>core::cmp::PartialEq::ne (138,067,831 samples, 0.12%)</title><rect x="26.8367%" y="213" width="0.1228%" height="15" fill="rgb(222,74,54)" fg:x="30169501090" fg:w="138067831"/><text x="27.0867%" y="223.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (138,067,831 samples, 0.12%)</title><rect x="26.8367%" y="197" width="0.1228%" height="15" fill="rgb(216,99,12)" fg:x="30169501090" fg:w="138067831"/><text x="27.0867%" y="207.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::leading_zeros (59,022,181 samples, 0.05%)</title><rect x="26.9595%" y="213" width="0.0525%" height="15" fill="rgb(226,22,26)" fg:x="30307568921" fg:w="59022181"/><text x="27.2095%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (59,022,181 samples, 0.05%)</title><rect x="26.9595%" y="197" width="0.0525%" height="15" fill="rgb(217,163,10)" fg:x="30307568921" fg:w="59022181"/><text x="27.2095%" y="207.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::toggle (27,609,247 samples, 0.02%)</title><rect x="27.0120%" y="213" width="0.0246%" height="15" fill="rgb(213,25,53)" fg:x="30366591102" fg:w="27609247"/><text x="27.2620%" y="223.50"></text></g><g><title>shiro::engine::move_gen::masks::pext_dg_lookup (39,104,183 samples, 0.03%)</title><rect x="27.0464%" y="213" width="0.0348%" height="15" fill="rgb(252,105,26)" fg:x="30405239187" fg:w="39104183"/><text x="27.2964%" y="223.50"></text></g><g><title>core::core_arch::x86_64::bmi2::_pext_u64 (16,576,679 samples, 0.01%)</title><rect x="27.0664%" y="197" width="0.0147%" height="15" fill="rgb(220,39,43)" fg:x="30427766691" fg:w="16576679"/><text x="27.3164%" y="207.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_seen_by_enemy (642,396,875 samples, 0.57%)</title><rect x="26.6795%" y="229" width="0.5714%" height="15" fill="rgb(229,68,48)" fg:x="29992845098" fg:w="642396875"/><text x="26.9295%" y="239.50"></text></g><g><title>shiro::engine::move_gen::masks::pext_hv_lookup (190,898,603 samples, 0.17%)</title><rect x="27.0812%" y="213" width="0.1698%" height="15" fill="rgb(252,8,32)" fg:x="30444343370" fg:w="190898603"/><text x="27.3312%" y="223.50"></text></g><g><title>core::core_arch::x86_64::bmi2::_pext_u64 (102,580,198 samples, 0.09%)</title><rect x="27.1597%" y="197" width="0.0912%" height="15" fill="rgb(223,20,43)" fg:x="30532661775" fg:w="102580198"/><text x="27.4097%" y="207.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::new (33,119,327 samples, 0.03%)</title><rect x="27.2510%" y="229" width="0.0295%" height="15" fill="rgb(229,81,49)" fg:x="30635241973" fg:w="33119327"/><text x="27.5010%" y="239.50"></text></g><g><title>shiro::engine::move_gen::gen_moves (44,129,270 samples, 0.04%)</title><rect x="27.2804%" y="229" width="0.0393%" height="15" fill="rgb(236,28,36)" fg:x="30668361300" fg:w="44129270"/><text x="27.5304%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (16,544,223 samples, 0.01%)</title><rect x="27.3050%" y="213" width="0.0147%" height="15" fill="rgb(249,185,26)" fg:x="30695946347" fg:w="16544223"/><text x="27.5550%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (16,544,223 samples, 0.01%)</title><rect x="27.3050%" y="197" width="0.0147%" height="15" fill="rgb(249,174,33)" fg:x="30695946347" fg:w="16544223"/><text x="27.5550%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (16,544,223 samples, 0.01%)</title><rect x="27.3050%" y="181" width="0.0147%" height="15" fill="rgb(233,201,37)" fg:x="30695946347" fg:w="16544223"/><text x="27.5550%" y="191.50"></text></g><g><title>shiro::engine::perft::make_move (510,102,373 samples, 0.45%)</title><rect x="27.3197%" y="229" width="0.4538%" height="15" fill="rgb(221,78,26)" fg:x="30712490570" fg:w="510102373"/><text x="27.5697%" y="239.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (27,574,374 samples, 0.02%)</title><rect x="28.0877%" y="213" width="0.0245%" height="15" fill="rgb(250,127,30)" fg:x="31575904415" fg:w="27574374"/><text x="28.3377%" y="223.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (27,574,374 samples, 0.02%)</title><rect x="28.0877%" y="197" width="0.0245%" height="15" fill="rgb(230,49,44)" fg:x="31575904415" fg:w="27574374"/><text x="28.3377%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (143,545,891 samples, 0.13%)</title><rect x="28.1122%" y="213" width="0.1277%" height="15" fill="rgb(229,67,23)" fg:x="31603478789" fg:w="143545891"/><text x="28.3622%" y="223.50"></text></g><g><title>[libc.so.6] (133,102,914 samples, 0.12%)</title><rect x="29.7434%" y="181" width="0.1184%" height="15" fill="rgb(249,83,47)" fg:x="33437190067" fg:w="133102914"/><text x="29.9934%" y="191.50"></text></g><g><title>[libc.so.6] (22,270,067 samples, 0.02%)</title><rect x="29.8420%" y="165" width="0.0198%" height="15" fill="rgb(215,43,3)" fg:x="33548022914" fg:w="22270067"/><text x="30.0920%" y="175.50"></text></g><g><title>[libc.so.6] (812,916,333 samples, 0.72%)</title><rect x="29.1436%" y="197" width="0.7231%" height="15" fill="rgb(238,154,13)" fg:x="32762902987" fg:w="812916333"/><text x="29.3936%" y="207.50"></text></g><g><title>cfree (1,834,312,981 samples, 1.63%)</title><rect x="28.2399%" y="213" width="1.6317%" height="15" fill="rgb(219,56,2)" fg:x="31747024680" fg:w="1834312981"/><text x="28.4899%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;shiro::engine::common::chess_move::Move&gt;&gt; (138,016,114 samples, 0.12%)</title><rect x="29.8716%" y="213" width="0.1228%" height="15" fill="rgb(233,0,4)" fg:x="33581337661" fg:w="138016114"/><text x="30.1216%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;shiro::engine::common::chess_move::Move&gt;&gt; (138,016,114 samples, 0.12%)</title><rect x="29.8716%" y="197" width="0.1228%" height="15" fill="rgb(235,30,7)" fg:x="33581337661" fg:w="138016114"/><text x="30.1216%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (138,016,114 samples, 0.12%)</title><rect x="29.8716%" y="181" width="0.1228%" height="15" fill="rgb(250,79,13)" fg:x="33581337661" fg:w="138016114"/><text x="30.1216%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (138,016,114 samples, 0.12%)</title><rect x="29.8716%" y="165" width="0.1228%" height="15" fill="rgb(211,146,34)" fg:x="33581337661" fg:w="138016114"/><text x="30.1216%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (138,016,114 samples, 0.12%)</title><rect x="29.8716%" y="149" width="0.1228%" height="15" fill="rgb(228,22,38)" fg:x="33581337661" fg:w="138016114"/><text x="30.1216%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_mul (44,179,932 samples, 0.04%)</title><rect x="29.9551%" y="133" width="0.0393%" height="15" fill="rgb(235,168,5)" fg:x="33675173843" fg:w="44179932"/><text x="30.2051%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;shiro::engine::common::chess_move::Move&gt;&gt; (38,645,486 samples, 0.03%)</title><rect x="29.9944%" y="213" width="0.0344%" height="15" fill="rgb(221,155,16)" fg:x="33719353775" fg:w="38645486"/><text x="30.2444%" y="223.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (38,645,486 samples, 0.03%)</title><rect x="29.9944%" y="197" width="0.0344%" height="15" fill="rgb(215,215,53)" fg:x="33719353775" fg:w="38645486"/><text x="30.2444%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;shiro::engine::common::chess_move::Move,alloc::alloc::Global&gt;&gt; (38,645,486 samples, 0.03%)</title><rect x="29.9944%" y="181" width="0.0344%" height="15" fill="rgb(223,4,10)" fg:x="33719353775" fg:w="38645486"/><text x="30.2444%" y="191.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (38,645,486 samples, 0.03%)</title><rect x="29.9944%" y="165" width="0.0344%" height="15" fill="rgb(234,103,6)" fg:x="33719353775" fg:w="38645486"/><text x="30.2444%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;shiro::engine::common::chess_move::Move&gt;&gt; (38,645,486 samples, 0.03%)</title><rect x="29.9944%" y="149" width="0.0344%" height="15" fill="rgb(227,97,0)" fg:x="33719353775" fg:w="38645486"/><text x="30.2444%" y="159.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (38,645,486 samples, 0.03%)</title><rect x="29.9944%" y="133" width="0.0344%" height="15" fill="rgb(234,150,53)" fg:x="33719353775" fg:w="38645486"/><text x="30.2444%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (38,645,486 samples, 0.03%)</title><rect x="29.9944%" y="117" width="0.0344%" height="15" fill="rgb(228,201,54)" fg:x="33719353775" fg:w="38645486"/><text x="30.2444%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (38,645,486 samples, 0.03%)</title><rect x="29.9944%" y="101" width="0.0344%" height="15" fill="rgb(222,22,37)" fg:x="33719353775" fg:w="38645486"/><text x="30.2444%" y="111.50"></text></g><g><title>[unknown] (33,178,117,154 samples, 29.51%)</title><rect x="0.5948%" y="245" width="29.5129%" height="15" fill="rgb(237,53,32)" fg:x="668667120" fg:w="33178117154"/><text x="0.8448%" y="255.50">[unknown]</text></g><g><title>shiro::engine::perft::perft_simple (2,624,191,331 samples, 2.33%)</title><rect x="27.7734%" y="229" width="2.3343%" height="15" fill="rgb(233,25,53)" fg:x="31222592943" fg:w="2624191331"/><text x="28.0234%" y="239.50">s..</text></g><g><title>shiro::engine::move_gen::gen_moves (88,785,013 samples, 0.08%)</title><rect x="30.0288%" y="213" width="0.0790%" height="15" fill="rgb(210,40,34)" fg:x="33757999261" fg:w="88785013"/><text x="30.2788%" y="223.50"></text></g><g><title>_RNvCs10VBLPNcvx_7___rustc11___rdl_alloc (154,593,614 samples, 0.14%)</title><rect x="30.1077%" y="245" width="0.1375%" height="15" fill="rgb(241,220,44)" fg:x="33846784274" fg:w="154593614"/><text x="30.3577%" y="255.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (27,582,303 samples, 0.02%)</title><rect x="30.2207%" y="229" width="0.0245%" height="15" fill="rgb(235,28,35)" fg:x="33973795585" fg:w="27582303"/><text x="30.4707%" y="239.50"></text></g><g><title>_RNvCs10VBLPNcvx_7___rustc12___rust_alloc (242,849,496 samples, 0.22%)</title><rect x="30.2452%" y="245" width="0.2160%" height="15" fill="rgb(210,56,17)" fg:x="34001377888" fg:w="242849496"/><text x="30.4952%" y="255.50"></text></g><g><title>_RNvCs10VBLPNcvx_7___rustc13___rdl_dealloc (177,091,042 samples, 0.16%)</title><rect x="30.4613%" y="245" width="0.1575%" height="15" fill="rgb(224,130,29)" fg:x="34244227384" fg:w="177091042"/><text x="30.7113%" y="255.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (149,480,213 samples, 0.13%)</title><rect x="30.4858%" y="229" width="0.1330%" height="15" fill="rgb(235,212,8)" fg:x="34271838213" fg:w="149480213"/><text x="30.7358%" y="239.50"></text></g><g><title>_RNvCs10VBLPNcvx_7___rustc13___rdl_realloc (1,360,145,194 samples, 1.21%)</title><rect x="30.6188%" y="245" width="1.2099%" height="15" fill="rgb(223,33,50)" fg:x="34421318426" fg:w="1360145194"/><text x="30.8688%" y="255.50"></text></g><g><title>_RNvCs10VBLPNcvx_7___rustc14___rust_realloc (2,858,825,553 samples, 2.54%)</title><rect x="31.8287%" y="245" width="2.5430%" height="15" fill="rgb(219,149,13)" fg:x="35781463620" fg:w="2858825553"/><text x="32.0787%" y="255.50">_R..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (238,742,489 samples, 0.21%)</title><rect x="35.6543%" y="197" width="0.2124%" height="15" fill="rgb(250,156,29)" fg:x="40082181455" fg:w="238742489"/><text x="35.9043%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (456,980,877 samples, 0.41%)</title><rect x="35.8667%" y="197" width="0.4065%" height="15" fill="rgb(216,193,19)" fg:x="40320923944" fg:w="456980877"/><text x="36.1167%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::set_ptr_and_cap (143,507,882 samples, 0.13%)</title><rect x="36.2732%" y="197" width="0.1277%" height="15" fill="rgb(216,135,14)" fg:x="40777904821" fg:w="143507882"/><text x="36.5232%" y="207.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (22,088,227 samples, 0.02%)</title><rect x="37.1132%" y="149" width="0.0196%" height="15" fill="rgb(241,47,5)" fg:x="41722298851" fg:w="22088227"/><text x="37.3632%" y="159.50"></text></g><g><title>_RNvCs10VBLPNcvx_7___rustc13___rdl_realloc (869,131,110 samples, 0.77%)</title><rect x="37.1624%" y="133" width="0.7731%" height="15" fill="rgb(233,42,35)" fg:x="41777528901" fg:w="869131110"/><text x="37.4124%" y="143.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (852,582,691 samples, 0.76%)</title><rect x="37.1771%" y="117" width="0.7584%" height="15" fill="rgb(231,13,6)" fg:x="41794077320" fg:w="852582691"/><text x="37.4271%" y="127.50"></text></g><g><title>[libc.so.6] (289,696,947 samples, 0.26%)</title><rect x="50.0917%" y="85" width="0.2577%" height="15" fill="rgb(207,181,40)" fg:x="56312498726" fg:w="289696947"/><text x="50.3417%" y="95.50"></text></g><g><title>[libc.so.6] (9,274,980,135 samples, 8.25%)</title><rect x="42.1088%" y="101" width="8.2504%" height="15" fill="rgb(254,173,49)" fg:x="47338250580" fg:w="9274980135"/><text x="42.3588%" y="111.50">[libc.so.6]</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (14,973,989,611 samples, 13.32%)</title><rect x="37.0443%" y="181" width="13.3198%" height="15" fill="rgb(221,1,38)" fg:x="41644764683" fg:w="14973989611"/><text x="37.2943%" y="191.50">&lt;alloc::alloc::Globa..</text></g><g><title>alloc::alloc::Global::grow_impl (14,973,989,611 samples, 13.32%)</title><rect x="37.0443%" y="165" width="13.3198%" height="15" fill="rgb(206,124,46)" fg:x="41644764683" fg:w="14973989611"/><text x="37.2943%" y="175.50">alloc::alloc::Global..</text></g><g><title>alloc::alloc::realloc (14,874,367,216 samples, 13.23%)</title><rect x="37.1329%" y="149" width="13.2312%" height="15" fill="rgb(249,21,11)" fg:x="41744387078" fg:w="14874367216"/><text x="37.3829%" y="159.50">alloc::alloc::realloc</text></g><g><title>realloc (13,972,094,283 samples, 12.43%)</title><rect x="37.9355%" y="133" width="12.4286%" height="15" fill="rgb(222,201,40)" fg:x="42646660011" fg:w="13972094283"/><text x="38.1855%" y="143.50">realloc</text></g><g><title>[libc.so.6] (11,265,795,256 samples, 10.02%)</title><rect x="40.3428%" y="117" width="10.0213%" height="15" fill="rgb(235,61,29)" fg:x="45352959038" fg:w="11265795256"/><text x="40.5928%" y="127.50">[libc.so.6]</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (160,122,437 samples, 0.14%)</title><rect x="50.3641%" y="181" width="0.1424%" height="15" fill="rgb(219,207,3)" fg:x="56618754294" fg:w="160122437"/><text x="50.6141%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (16,199,756,359 samples, 14.41%)</title><rect x="36.4008%" y="197" width="14.4102%" height="15" fill="rgb(222,56,46)" fg:x="40921412703" fg:w="16199756359"/><text x="36.6508%" y="207.50">alloc::raw_vec::finish..</text></g><g><title>malloc (342,292,331 samples, 0.30%)</title><rect x="50.5065%" y="181" width="0.3045%" height="15" fill="rgb(239,76,54)" fg:x="56778876731" fg:w="342292331"/><text x="50.7565%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (18,922,650,869 samples, 16.83%)</title><rect x="34.3717%" y="245" width="16.8323%" height="15" fill="rgb(231,124,27)" fg:x="38640289173" fg:w="18922650869"/><text x="34.6217%" y="255.50">alloc::raw_vec::RawVec&lt;T,A..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (18,110,639,353 samples, 16.11%)</title><rect x="35.0940%" y="229" width="16.1100%" height="15" fill="rgb(249,195,6)" fg:x="39452300689" fg:w="18110639353"/><text x="35.3440%" y="239.50">alloc::raw_vec::RawVecInn..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (17,497,327,120 samples, 15.56%)</title><rect x="35.6396%" y="213" width="15.5644%" height="15" fill="rgb(237,174,47)" fg:x="40065612922" fg:w="17497327120"/><text x="35.8896%" y="223.50">alloc::raw_vec::RawVecIn..</text></g><g><title>core::cmp::max (430,729,272 samples, 0.38%)</title><rect x="50.8208%" y="197" width="0.3831%" height="15" fill="rgb(206,201,31)" fg:x="57132210770" fg:w="430729272"/><text x="51.0708%" y="207.50"></text></g><g><title>core::cmp::Ord::max (430,729,272 samples, 0.38%)</title><rect x="50.8208%" y="181" width="0.3831%" height="15" fill="rgb(231,57,52)" fg:x="57132210770" fg:w="430729272"/><text x="51.0708%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (679,029,982 samples, 0.60%)</title><rect x="51.2040%" y="245" width="0.6040%" height="15" fill="rgb(248,177,22)" fg:x="57562940042" fg:w="679029982"/><text x="51.4540%" y="255.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (198,705,304 samples, 0.18%)</title><rect x="51.6312%" y="229" width="0.1768%" height="15" fill="rgb(215,211,37)" fg:x="58043264720" fg:w="198705304"/><text x="51.8812%" y="239.50"></text></g><g><title>[libc.so.6] (27,603,291 samples, 0.02%)</title><rect x="51.8080%" y="229" width="0.0246%" height="15" fill="rgb(241,128,51)" fg:x="58241970024" fg:w="27603291"/><text x="52.0580%" y="239.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (22,091,071 samples, 0.02%)</title><rect x="52.8356%" y="197" width="0.0197%" height="15" fill="rgb(227,165,31)" fg:x="59397239608" fg:w="22091071"/><text x="53.0856%" y="207.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (22,091,071 samples, 0.02%)</title><rect x="52.8356%" y="181" width="0.0197%" height="15" fill="rgb(228,167,24)" fg:x="59397239608" fg:w="22091071"/><text x="53.0856%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::count_ones (16,556,980 samples, 0.01%)</title><rect x="52.8602%" y="197" width="0.0147%" height="15" fill="rgb(228,143,12)" fg:x="59424849011" fg:w="16556980"/><text x="53.1102%" y="207.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::leading_zeros (27,597,082 samples, 0.02%)</title><rect x="52.8749%" y="197" width="0.0245%" height="15" fill="rgb(249,149,8)" fg:x="59441405991" fg:w="27597082"/><text x="53.1249%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (27,597,082 samples, 0.02%)</title><rect x="52.8749%" y="181" width="0.0245%" height="15" fill="rgb(243,35,44)" fg:x="59441405991" fg:w="27597082"/><text x="53.1249%" y="191.50"></text></g><g><title>cfree (1,238,195,243 samples, 1.10%)</title><rect x="51.8080%" y="245" width="1.1014%" height="15" fill="rgb(246,89,9)" fg:x="58241970024" fg:w="1238195243"/><text x="52.0580%" y="255.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::new (1,210,591,952 samples, 1.08%)</title><rect x="51.8325%" y="229" width="1.0769%" height="15" fill="rgb(233,213,13)" fg:x="58269573315" fg:w="1210591952"/><text x="52.0825%" y="239.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_check_and_pin_masks (143,646,016 samples, 0.13%)</title><rect x="52.7816%" y="213" width="0.1278%" height="15" fill="rgb(233,141,41)" fg:x="59336519251" fg:w="143646016"/><text x="53.0316%" y="223.50"></text></g><g><title>realloc (16,559,438 samples, 0.01%)</title><rect x="52.9094%" y="245" width="0.0147%" height="15" fill="rgb(239,167,4)" fg:x="59480165267" fg:w="16559438"/><text x="53.1594%" y="255.50"></text></g><g><title>[libc.so.6] (16,559,438 samples, 0.01%)</title><rect x="52.9094%" y="229" width="0.0147%" height="15" fill="rgb(209,217,16)" fg:x="59480165267" fg:w="16559438"/><text x="53.1594%" y="239.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (71,777,232 samples, 0.06%)</title><rect x="53.2683%" y="213" width="0.0638%" height="15" fill="rgb(219,88,35)" fg:x="59883612779" fg:w="71777232"/><text x="53.5183%" y="223.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (71,777,232 samples, 0.06%)</title><rect x="53.2683%" y="197" width="0.0638%" height="15" fill="rgb(220,193,23)" fg:x="59883612779" fg:w="71777232"/><text x="53.5183%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (158,840,477 samples, 0.14%)</title><rect x="53.3419%" y="213" width="0.1413%" height="15" fill="rgb(230,90,52)" fg:x="59966415992" fg:w="158840477"/><text x="53.5919%" y="223.50"></text></g><g><title>core::cmp::PartialEq::ne (66,260,364 samples, 0.06%)</title><rect x="53.4832%" y="213" width="0.0589%" height="15" fill="rgb(252,106,19)" fg:x="60125256469" fg:w="66260364"/><text x="53.7332%" y="223.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (66,260,364 samples, 0.06%)</title><rect x="53.4832%" y="197" width="0.0589%" height="15" fill="rgb(206,74,20)" fg:x="60125256469" fg:w="66260364"/><text x="53.7332%" y="207.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (66,460,704 samples, 0.06%)</title><rect x="53.5520%" y="213" width="0.0591%" height="15" fill="rgb(230,138,44)" fg:x="60202557210" fg:w="66460704"/><text x="53.8020%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (22,090,491 samples, 0.02%)</title><rect x="53.5914%" y="197" width="0.0197%" height="15" fill="rgb(235,182,43)" fg:x="60246927423" fg:w="22090491"/><text x="53.8414%" y="207.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_dg (799,884,625 samples, 0.71%)</title><rect x="52.9536%" y="229" width="0.7115%" height="15" fill="rgb(242,16,51)" fg:x="59529844403" fg:w="799884625"/><text x="53.2036%" y="239.50"></text></g><g><title>shiro::engine::move_gen::masks::pext_dg_lookup (60,711,114 samples, 0.05%)</title><rect x="53.6111%" y="213" width="0.0540%" height="15" fill="rgb(248,9,4)" fg:x="60269017914" fg:w="60711114"/><text x="53.8611%" y="223.50"></text></g><g><title>core::core_arch::x86_64::bmi2::_pext_u64 (27,596,249 samples, 0.02%)</title><rect x="53.6406%" y="197" width="0.0245%" height="15" fill="rgb(210,31,22)" fg:x="60302132779" fg:w="27596249"/><text x="53.8906%" y="207.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (27,608,855 samples, 0.02%)</title><rect x="56.2066%" y="213" width="0.0246%" height="15" fill="rgb(239,54,39)" fg:x="63186824744" fg:w="27608855"/><text x="56.4566%" y="223.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (27,608,855 samples, 0.02%)</title><rect x="56.2066%" y="197" width="0.0246%" height="15" fill="rgb(230,99,41)" fg:x="63186824744" fg:w="27608855"/><text x="56.4566%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (66,263,820 samples, 0.06%)</title><rect x="59.2535%" y="197" width="0.0589%" height="15" fill="rgb(253,106,12)" fg:x="66612118358" fg:w="66263820"/><text x="59.5035%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (66,263,820 samples, 0.06%)</title><rect x="59.2535%" y="181" width="0.0589%" height="15" fill="rgb(213,46,41)" fg:x="66612118358" fg:w="66263820"/><text x="59.5035%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (66,263,820 samples, 0.06%)</title><rect x="59.2535%" y="165" width="0.0589%" height="15" fill="rgb(215,133,35)" fg:x="66612118358" fg:w="66263820"/><text x="59.5035%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (66,263,820 samples, 0.06%)</title><rect x="59.2535%" y="149" width="0.0589%" height="15" fill="rgb(213,28,5)" fg:x="66612118358" fg:w="66263820"/><text x="59.5035%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,579,935,485 samples, 3.18%)</title><rect x="56.2360%" y="213" width="3.1845%" height="15" fill="rgb(215,77,49)" fg:x="63219959313" fg:w="3579935485"/><text x="56.4860%" y="223.50">all..</text></g><g><title>core::ptr::write (121,512,620 samples, 0.11%)</title><rect x="59.3124%" y="197" width="0.1081%" height="15" fill="rgb(248,100,22)" fg:x="66678382178" fg:w="121512620"/><text x="59.5624%" y="207.50"></text></g><g><title>core::cmp::PartialEq::ne (602,460,061 samples, 0.54%)</title><rect x="59.4205%" y="213" width="0.5359%" height="15" fill="rgb(208,67,9)" fg:x="66799894798" fg:w="602460061"/><text x="59.6705%" y="223.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (602,460,061 samples, 0.54%)</title><rect x="59.4205%" y="197" width="0.5359%" height="15" fill="rgb(219,133,21)" fg:x="66799894798" fg:w="602460061"/><text x="59.6705%" y="207.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::leading_zeros (60,724,850 samples, 0.05%)</title><rect x="59.9564%" y="213" width="0.0540%" height="15" fill="rgb(246,46,29)" fg:x="67402354859" fg:w="60724850"/><text x="60.2064%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (60,724,850 samples, 0.05%)</title><rect x="59.9564%" y="197" width="0.0540%" height="15" fill="rgb(246,185,52)" fg:x="67402354859" fg:w="60724850"/><text x="60.2064%" y="207.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (790,486,099 samples, 0.70%)</title><rect x="60.0104%" y="213" width="0.7032%" height="15" fill="rgb(252,136,11)" fg:x="67463079709" fg:w="790486099"/><text x="60.2604%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (99,453,856 samples, 0.09%)</title><rect x="60.6251%" y="197" width="0.0885%" height="15" fill="rgb(219,138,53)" fg:x="68154111952" fg:w="99453856"/><text x="60.8751%" y="207.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::toggle (110,530,958 samples, 0.10%)</title><rect x="60.7136%" y="213" width="0.0983%" height="15" fill="rgb(211,51,23)" fg:x="68253565808" fg:w="110530958"/><text x="60.9636%" y="223.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_hv (8,702,954,362 samples, 7.74%)</title><rect x="53.6651%" y="229" width="7.7415%" height="15" fill="rgb(247,221,28)" fg:x="60329729028" fg:w="8702954362"/><text x="53.9151%" y="239.50">shiro::engi..</text></g><g><title>shiro::engine::move_gen::masks::pext_hv_lookup (668,586,624 samples, 0.59%)</title><rect x="60.8119%" y="213" width="0.5947%" height="15" fill="rgb(251,222,45)" fg:x="68364096766" fg:w="668586624"/><text x="61.0619%" y="223.50"></text></g><g><title>core::core_arch::x86_64::bmi2::_pext_u64 (220,842,948 samples, 0.20%)</title><rect x="61.2102%" y="197" width="0.1964%" height="15" fill="rgb(217,162,53)" fg:x="68811840442" fg:w="220842948"/><text x="61.4602%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (16,564,599 samples, 0.01%)</title><rect x="61.4459%" y="213" width="0.0147%" height="15" fill="rgb(229,93,14)" fg:x="69076858583" fg:w="16564599"/><text x="61.6959%" y="223.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_king_castle (77,300,249 samples, 0.07%)</title><rect x="61.4066%" y="229" width="0.0688%" height="15" fill="rgb(209,67,49)" fg:x="69032683390" fg:w="77300249"/><text x="61.6566%" y="239.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (121,809,141 samples, 0.11%)</title><rect x="61.8982%" y="213" width="0.1084%" height="15" fill="rgb(213,87,29)" fg:x="69585273263" fg:w="121809141"/><text x="62.1482%" y="223.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (121,809,141 samples, 0.11%)</title><rect x="61.8982%" y="197" width="0.1084%" height="15" fill="rgb(205,151,52)" fg:x="69585273263" fg:w="121809141"/><text x="62.1482%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,187,142,091 samples, 1.06%)</title><rect x="62.0065%" y="213" width="1.0560%" height="15" fill="rgb(253,215,39)" fg:x="69707082404" fg:w="1187142091"/><text x="62.2565%" y="223.50"></text></g><g><title>core::ptr::write (331,344,477 samples, 0.29%)</title><rect x="62.7678%" y="197" width="0.2947%" height="15" fill="rgb(221,220,41)" fg:x="70562880018" fg:w="331344477"/><text x="63.0178%" y="207.50"></text></g><g><title>core::cmp::PartialEq::ne (49,651,756 samples, 0.04%)</title><rect x="63.0625%" y="213" width="0.0442%" height="15" fill="rgb(218,133,21)" fg:x="70894224495" fg:w="49651756"/><text x="63.3125%" y="223.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (49,651,756 samples, 0.04%)</title><rect x="63.0625%" y="197" width="0.0442%" height="15" fill="rgb(221,193,43)" fg:x="70894224495" fg:w="49651756"/><text x="63.3125%" y="207.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (259,448,865 samples, 0.23%)</title><rect x="63.1067%" y="213" width="0.2308%" height="15" fill="rgb(240,128,52)" fg:x="70943876251" fg:w="259448865"/><text x="63.3567%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (16,560,129 samples, 0.01%)</title><rect x="63.3228%" y="197" width="0.0147%" height="15" fill="rgb(253,114,12)" fg:x="71186764987" fg:w="16560129"/><text x="63.5728%" y="207.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (27,586,354 samples, 0.02%)</title><rect x="63.3866%" y="197" width="0.0245%" height="15" fill="rgb(215,223,47)" fg:x="71258486420" fg:w="27586354"/><text x="63.6366%" y="207.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (27,586,354 samples, 0.02%)</title><rect x="63.3866%" y="181" width="0.0245%" height="15" fill="rgb(248,225,23)" fg:x="71258486420" fg:w="27586354"/><text x="63.6366%" y="191.50"></text></g><g><title>core::cmp::PartialEq::ne (187,693,099 samples, 0.17%)</title><rect x="63.4308%" y="197" width="0.1670%" height="15" fill="rgb(250,108,0)" fg:x="71308180740" fg:w="187693099"/><text x="63.6808%" y="207.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (187,693,099 samples, 0.17%)</title><rect x="63.4308%" y="181" width="0.1670%" height="15" fill="rgb(228,208,7)" fg:x="71308180740" fg:w="187693099"/><text x="63.6808%" y="191.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::leading_zeros (49,664,773 samples, 0.04%)</title><rect x="63.5977%" y="197" width="0.0442%" height="15" fill="rgb(244,45,10)" fg:x="71495873839" fg:w="49664773"/><text x="63.8477%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (49,664,773 samples, 0.04%)</title><rect x="63.5977%" y="181" width="0.0442%" height="15" fill="rgb(207,125,25)" fg:x="71495873839" fg:w="49664773"/><text x="63.8477%" y="191.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::toggle (44,170,968 samples, 0.04%)</title><rect x="63.6419%" y="197" width="0.0393%" height="15" fill="rgb(210,195,18)" fg:x="71545538612" fg:w="44170968"/><text x="63.8919%" y="207.50"></text></g><g><title>shiro::engine::move_gen::masks::pext_dg_lookup (16,565,869 samples, 0.01%)</title><rect x="63.6812%" y="197" width="0.0147%" height="15" fill="rgb(249,80,12)" fg:x="71589709580" fg:w="16565869"/><text x="63.9312%" y="207.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_king_normal (2,595,621,256 samples, 2.31%)</title><rect x="61.4754%" y="229" width="2.3089%" height="15" fill="rgb(221,65,9)" fg:x="69109983639" fg:w="2595621256"/><text x="61.7254%" y="239.50">s..</text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_seen_by_enemy (502,279,779 samples, 0.45%)</title><rect x="63.3375%" y="213" width="0.4468%" height="15" fill="rgb(235,49,36)" fg:x="71203325116" fg:w="502279779"/><text x="63.5875%" y="223.50"></text></g><g><title>shiro::engine::move_gen::masks::pext_hv_lookup (99,329,446 samples, 0.09%)</title><rect x="63.6959%" y="197" width="0.0884%" height="15" fill="rgb(225,32,20)" fg:x="71606275449" fg:w="99329446"/><text x="63.9459%" y="207.50"></text></g><g><title>core::core_arch::x86_64::bmi2::_pext_u64 (71,736,838 samples, 0.06%)</title><rect x="63.7205%" y="181" width="0.0638%" height="15" fill="rgb(215,141,46)" fg:x="71633868057" fg:w="71736838"/><text x="63.9705%" y="191.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (143,629,884 samples, 0.13%)</title><rect x="63.9365%" y="213" width="0.1278%" height="15" fill="rgb(250,160,47)" fg:x="71876775934" fg:w="143629884"/><text x="64.1865%" y="223.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (143,629,884 samples, 0.13%)</title><rect x="63.9365%" y="197" width="0.1278%" height="15" fill="rgb(216,222,40)" fg:x="71876775934" fg:w="143629884"/><text x="64.1865%" y="207.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitOr&gt;::bitor (270,587,447 samples, 0.24%)</title><rect x="64.0643%" y="213" width="0.2407%" height="15" fill="rgb(234,217,39)" fg:x="72020405818" fg:w="270587447"/><text x="64.3143%" y="223.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitOr&gt;::bitor (270,587,447 samples, 0.24%)</title><rect x="64.0643%" y="197" width="0.2407%" height="15" fill="rgb(207,178,40)" fg:x="72020405818" fg:w="270587447"/><text x="64.3143%" y="207.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::Not&gt;::not (60,777,820 samples, 0.05%)</title><rect x="64.3050%" y="213" width="0.0541%" height="15" fill="rgb(221,136,13)" fg:x="72290993265" fg:w="60777820"/><text x="64.5550%" y="223.50"></text></g><g><title>&lt;u64 as core::ops::bit::Not&gt;::not (60,777,820 samples, 0.05%)</title><rect x="64.3050%" y="197" width="0.0541%" height="15" fill="rgb(249,199,10)" fg:x="72290993265" fg:w="60777820"/><text x="64.5550%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (198,679,080 samples, 0.18%)</title><rect x="64.3591%" y="213" width="0.1767%" height="15" fill="rgb(249,222,13)" fg:x="72351771085" fg:w="198679080"/><text x="64.6091%" y="223.50"></text></g><g><title>core::ptr::write (22,060,897 samples, 0.02%)</title><rect x="64.5162%" y="197" width="0.0196%" height="15" fill="rgb(244,185,38)" fg:x="72528389268" fg:w="22060897"/><text x="64.7662%" y="207.50"></text></g><g><title>core::cmp::PartialEq::ne (49,680,458 samples, 0.04%)</title><rect x="64.5358%" y="213" width="0.0442%" height="15" fill="rgb(236,202,9)" fg:x="72550450165" fg:w="49680458"/><text x="64.7858%" y="223.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (49,680,458 samples, 0.04%)</title><rect x="64.5358%" y="197" width="0.0442%" height="15" fill="rgb(250,229,37)" fg:x="72550450165" fg:w="49680458"/><text x="64.7858%" y="207.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (38,619,492 samples, 0.03%)</title><rect x="64.5898%" y="213" width="0.0344%" height="15" fill="rgb(206,174,23)" fg:x="72611159952" fg:w="38619492"/><text x="64.8398%" y="223.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_knight (960,732,414 samples, 0.85%)</title><rect x="63.7843%" y="229" width="0.8546%" height="15" fill="rgb(211,33,43)" fg:x="71705604895" fg:w="960732414"/><text x="64.0343%" y="239.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::toggle (16,557,865 samples, 0.01%)</title><rect x="64.6242%" y="213" width="0.0147%" height="15" fill="rgb(245,58,50)" fg:x="72649779444" fg:w="16557865"/><text x="64.8742%" y="223.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (16,577,394 samples, 0.01%)</title><rect x="64.6929%" y="213" width="0.0147%" height="15" fill="rgb(244,68,36)" fg:x="72727058652" fg:w="16577394"/><text x="64.9429%" y="223.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (16,577,394 samples, 0.01%)</title><rect x="64.6929%" y="197" width="0.0147%" height="15" fill="rgb(232,229,15)" fg:x="72727058652" fg:w="16577394"/><text x="64.9429%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (27,602,281 samples, 0.02%)</title><rect x="64.7371%" y="213" width="0.0246%" height="15" fill="rgb(254,30,23)" fg:x="72776773488" fg:w="27602281"/><text x="64.9871%" y="223.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_pawn_captures (154,596,805 samples, 0.14%)</title><rect x="64.6389%" y="229" width="0.1375%" height="15" fill="rgb(235,160,14)" fg:x="72666337309" fg:w="154596805"/><text x="64.8889%" y="239.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (22,094,062 samples, 0.02%)</title><rect x="64.8353%" y="213" width="0.0197%" height="15" fill="rgb(212,155,44)" fg:x="72887159541" fg:w="22094062"/><text x="65.0853%" y="223.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (22,094,062 samples, 0.02%)</title><rect x="64.8353%" y="197" width="0.0197%" height="15" fill="rgb(226,2,50)" fg:x="72887159541" fg:w="22094062"/><text x="65.0853%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (49,685,152 samples, 0.04%)</title><rect x="64.8599%" y="213" width="0.0442%" height="15" fill="rgb(234,177,6)" fg:x="72914779426" fg:w="49685152"/><text x="65.1099%" y="223.50"></text></g><g><title>core::ptr::write (22,079,533 samples, 0.02%)</title><rect x="64.8844%" y="197" width="0.0196%" height="15" fill="rgb(217,24,9)" fg:x="72942385045" fg:w="22079533"/><text x="65.1344%" y="207.50"></text></g><g><title>shiro::engine::common::constants::rank_from_pos (27,591,710 samples, 0.02%)</title><rect x="64.9090%" y="213" width="0.0245%" height="15" fill="rgb(220,13,46)" fg:x="72969988479" fg:w="27591710"/><text x="65.1590%" y="223.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_all_moves (13,533,977,061 samples, 12.04%)</title><rect x="52.9241%" y="245" width="12.0389%" height="15" fill="rgb(239,221,27)" fg:x="59496724705" fg:w="13533977061"/><text x="53.1741%" y="255.50">shiro::engine::mov..</text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_pawn_pushes (209,767,652 samples, 0.19%)</title><rect x="64.7764%" y="229" width="0.1866%" height="15" fill="rgb(222,198,25)" fg:x="72820934114" fg:w="209767652"/><text x="65.0264%" y="239.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::unbounded_shr (16,563,865 samples, 0.01%)</title><rect x="64.9483%" y="213" width="0.0147%" height="15" fill="rgb(211,99,13)" fg:x="73014137901" fg:w="16563865"/><text x="65.1983%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::unbounded_shr (16,563,865 samples, 0.01%)</title><rect x="64.9483%" y="197" width="0.0147%" height="15" fill="rgb(232,111,31)" fg:x="73014137901" fg:w="16563865"/><text x="65.1983%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::unchecked_shr (16,563,865 samples, 0.01%)</title><rect x="64.9483%" y="181" width="0.0147%" height="15" fill="rgb(245,82,37)" fg:x="73014137901" fg:w="16563865"/><text x="65.1983%" y="191.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (22,072,968 samples, 0.02%)</title><rect x="65.1348%" y="229" width="0.0196%" height="15" fill="rgb(227,149,46)" fg:x="73223889448" fg:w="22072968"/><text x="65.3848%" y="239.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (22,072,968 samples, 0.02%)</title><rect x="65.1348%" y="213" width="0.0196%" height="15" fill="rgb(218,36,50)" fg:x="73223889448" fg:w="22072968"/><text x="65.3848%" y="223.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitOrAssign&gt;::bitor_assign (27,604,818 samples, 0.02%)</title><rect x="65.1545%" y="229" width="0.0246%" height="15" fill="rgb(226,80,48)" fg:x="73245962416" fg:w="27604818"/><text x="65.4045%" y="239.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitOrAssign&gt;::bitor_assign (27,604,818 samples, 0.02%)</title><rect x="65.1545%" y="213" width="0.0246%" height="15" fill="rgb(238,224,15)" fg:x="73245962416" fg:w="27604818"/><text x="65.4045%" y="223.50"></text></g><g><title>core::cmp::PartialEq::ne (73,541,900 samples, 0.07%)</title><rect x="65.1790%" y="229" width="0.0654%" height="15" fill="rgb(241,136,10)" fg:x="73273567234" fg:w="73541900"/><text x="65.4290%" y="239.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (73,541,900 samples, 0.07%)</title><rect x="65.1790%" y="213" width="0.0654%" height="15" fill="rgb(208,32,45)" fg:x="73273567234" fg:w="73541900"/><text x="65.4290%" y="223.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::leading_zeros (60,735,749 samples, 0.05%)</title><rect x="65.2445%" y="229" width="0.0540%" height="15" fill="rgb(207,135,9)" fg:x="73347109134" fg:w="60735749"/><text x="65.4945%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (60,735,749 samples, 0.05%)</title><rect x="65.2445%" y="213" width="0.0540%" height="15" fill="rgb(206,86,44)" fg:x="73347109134" fg:w="60735749"/><text x="65.4945%" y="223.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::toggle (55,835,926 samples, 0.05%)</title><rect x="65.2985%" y="229" width="0.0497%" height="15" fill="rgb(245,177,15)" fg:x="73407844883" fg:w="55835926"/><text x="65.5485%" y="239.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_seen_by_enemy (582,027,723 samples, 0.52%)</title><rect x="64.9630%" y="245" width="0.5177%" height="15" fill="rgb(206,64,50)" fg:x="73030701766" fg:w="582027723"/><text x="65.2130%" y="255.50"></text></g><g><title>shiro::engine::move_gen::masks::pext_hv_lookup (138,011,837 samples, 0.12%)</title><rect x="65.3580%" y="229" width="0.1228%" height="15" fill="rgb(234,36,40)" fg:x="73474717652" fg:w="138011837"/><text x="65.6080%" y="239.50"></text></g><g><title>core::core_arch::x86_64::bmi2::_pext_u64 (71,791,554 samples, 0.06%)</title><rect x="65.4169%" y="213" width="0.0639%" height="15" fill="rgb(213,64,8)" fg:x="73540937935" fg:w="71791554"/><text x="65.6669%" y="223.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::new (380,867,447 samples, 0.34%)</title><rect x="65.4807%" y="245" width="0.3388%" height="15" fill="rgb(210,75,36)" fg:x="73612729489" fg:w="380867447"/><text x="65.7307%" y="255.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (121,396,582 samples, 0.11%)</title><rect x="72.1308%" y="181" width="0.1080%" height="15" fill="rgb(229,88,21)" fg:x="81088659644" fg:w="121396582"/><text x="72.3808%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (77,303,093 samples, 0.07%)</title><rect x="72.2388%" y="181" width="0.0688%" height="15" fill="rgb(252,204,47)" fg:x="81210056226" fg:w="77303093"/><text x="72.4888%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::set_ptr_and_cap (22,422,612 samples, 0.02%)</title><rect x="72.3075%" y="181" width="0.0199%" height="15" fill="rgb(208,77,27)" fg:x="81287359319" fg:w="22422612"/><text x="72.5575%" y="191.50"></text></g><g><title>_RNvCs10VBLPNcvx_7___rustc13___rdl_realloc (265,439,213 samples, 0.24%)</title><rect x="72.6763%" y="117" width="0.2361%" height="15" fill="rgb(221,76,26)" fg:x="81701965889" fg:w="265439213"/><text x="72.9263%" y="127.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (265,439,213 samples, 0.24%)</title><rect x="72.6763%" y="101" width="0.2361%" height="15" fill="rgb(225,139,18)" fg:x="81701965889" fg:w="265439213"/><text x="72.9263%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (4,951,087,746 samples, 4.40%)</title><rect x="72.5732%" y="165" width="4.4041%" height="15" fill="rgb(230,137,11)" fg:x="81586056854" fg:w="4951087746"/><text x="72.8232%" y="175.50">&lt;allo..</text></g><g><title>alloc::alloc::Global::grow_impl (4,951,087,746 samples, 4.40%)</title><rect x="72.5732%" y="149" width="4.4041%" height="15" fill="rgb(212,28,1)" fg:x="81586056854" fg:w="4951087746"/><text x="72.8232%" y="159.50">alloc..</text></g><g><title>alloc::alloc::realloc (4,846,209,214 samples, 4.31%)</title><rect x="72.6665%" y="133" width="4.3108%" height="15" fill="rgb(248,164,17)" fg:x="81690935386" fg:w="4846209214"/><text x="72.9165%" y="143.50">alloc..</text></g><g><title>realloc (4,569,739,498 samples, 4.06%)</title><rect x="72.9125%" y="117" width="4.0649%" height="15" fill="rgb(222,171,42)" fg:x="81967405102" fg:w="4569739498"/><text x="73.1625%" y="127.50">real..</text></g><g><title>[libc.so.6] (4,011,770,196 samples, 3.57%)</title><rect x="73.4088%" y="101" width="3.5686%" height="15" fill="rgb(243,84,45)" fg:x="82525374404" fg:w="4011770196"/><text x="73.6588%" y="111.50">[lib..</text></g><g><title>[libc.so.6] (3,592,111,446 samples, 3.20%)</title><rect x="73.7821%" y="85" width="3.1953%" height="15" fill="rgb(252,49,23)" fg:x="82945033154" fg:w="3592111446"/><text x="74.0321%" y="95.50">[li..</text></g><g><title>[libc.so.6] (188,365,196 samples, 0.17%)</title><rect x="76.8098%" y="69" width="0.1676%" height="15" fill="rgb(215,19,7)" fg:x="86348779404" fg:w="188365196"/><text x="77.0598%" y="79.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (22,085,716 samples, 0.02%)</title><rect x="76.9774%" y="165" width="0.0196%" height="15" fill="rgb(238,81,41)" fg:x="86537144600" fg:w="22085716"/><text x="77.2274%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (5,326,781,319 samples, 4.74%)</title><rect x="72.3275%" y="181" width="4.7383%" height="15" fill="rgb(210,199,37)" fg:x="81309781931" fg:w="5326781319"/><text x="72.5775%" y="191.50">alloc:..</text></g><g><title>malloc (77,332,934 samples, 0.07%)</title><rect x="76.9970%" y="165" width="0.0688%" height="15" fill="rgb(244,192,49)" fg:x="86559230316" fg:w="77332934"/><text x="77.2470%" y="175.50"></text></g><g><title>alloc::raw_vec::layout_array (27,559,938 samples, 0.02%)</title><rect x="77.0658%" y="181" width="0.0245%" height="15" fill="rgb(226,211,11)" fg:x="86636563250" fg:w="27559938"/><text x="77.3158%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::repeat (27,559,938 samples, 0.02%)</title><rect x="77.0658%" y="165" width="0.0245%" height="15" fill="rgb(236,162,54)" fg:x="86636563250" fg:w="27559938"/><text x="77.3158%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (5,884,612,982 samples, 5.23%)</title><rect x="71.9687%" y="229" width="5.2345%" height="15" fill="rgb(220,229,9)" fg:x="80906491737" fg:w="5884612982"/><text x="72.2187%" y="239.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (5,707,961,703 samples, 5.08%)</title><rect x="72.1259%" y="213" width="5.0774%" height="15" fill="rgb(250,87,22)" fg:x="81083143016" fg:w="5707961703"/><text x="72.3759%" y="223.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (5,707,961,703 samples, 5.08%)</title><rect x="72.1259%" y="197" width="5.0774%" height="15" fill="rgb(239,43,17)" fg:x="81083143016" fg:w="5707961703"/><text x="72.3759%" y="207.50">alloc:..</text></g><g><title>core::cmp::max (126,981,531 samples, 0.11%)</title><rect x="77.0903%" y="181" width="0.1130%" height="15" fill="rgb(231,177,25)" fg:x="86664123188" fg:w="126981531"/><text x="77.3403%" y="191.50"></text></g><g><title>core::cmp::Ord::max (126,981,531 samples, 0.11%)</title><rect x="77.0903%" y="165" width="0.1130%" height="15" fill="rgb(219,179,1)" fg:x="86664123188" fg:w="126981531"/><text x="77.3403%" y="175.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_dg (22,395,490 samples, 0.02%)</title><rect x="77.2082%" y="213" width="0.0199%" height="15" fill="rgb(238,219,53)" fg:x="86796619578" fg:w="22395490"/><text x="77.4582%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (486,009,294 samples, 0.43%)</title><rect x="77.6504%" y="197" width="0.4323%" height="15" fill="rgb(232,167,36)" fg:x="87293774878" fg:w="486009294"/><text x="77.9004%" y="207.50"></text></g><g><title>core::ptr::write (38,648,039 samples, 0.03%)</title><rect x="78.0484%" y="181" width="0.0344%" height="15" fill="rgb(244,19,51)" fg:x="87741136133" fg:w="38648039"/><text x="78.2984%" y="191.50"></text></g><g><title>core::cmp::PartialEq::ne (77,302,765 samples, 0.07%)</title><rect x="78.0827%" y="197" width="0.0688%" height="15" fill="rgb(224,6,22)" fg:x="87779784172" fg:w="77302765"/><text x="78.3327%" y="207.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (77,302,765 samples, 0.07%)</title><rect x="78.0827%" y="181" width="0.0688%" height="15" fill="rgb(224,145,5)" fg:x="87779784172" fg:w="77302765"/><text x="78.3327%" y="191.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::leading_zeros (16,567,139 samples, 0.01%)</title><rect x="78.1515%" y="197" width="0.0147%" height="15" fill="rgb(234,130,49)" fg:x="87857086937" fg:w="16567139"/><text x="78.4015%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (16,567,139 samples, 0.01%)</title><rect x="78.1515%" y="181" width="0.0147%" height="15" fill="rgb(254,6,2)" fg:x="87857086937" fg:w="16567139"/><text x="78.4015%" y="191.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (115,913,155 samples, 0.10%)</title><rect x="78.1662%" y="197" width="0.1031%" height="15" fill="rgb(208,96,46)" fg:x="87873654076" fg:w="115913155"/><text x="78.4162%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (22,040,246 samples, 0.02%)</title><rect x="78.2497%" y="181" width="0.0196%" height="15" fill="rgb(239,3,39)" fg:x="87967526985" fg:w="22040246"/><text x="78.4997%" y="191.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_hv (1,264,350,816 samples, 1.12%)</title><rect x="77.2281%" y="213" width="1.1247%" height="15" fill="rgb(233,210,1)" fg:x="86819015068" fg:w="1264350816"/><text x="77.4781%" y="223.50"></text></g><g><title>shiro::engine::move_gen::masks::pext_hv_lookup (88,279,789 samples, 0.08%)</title><rect x="78.2743%" y="197" width="0.0785%" height="15" fill="rgb(244,137,37)" fg:x="87995086095" fg:w="88279789"/><text x="78.5243%" y="207.50"></text></g><g><title>core::core_arch::x86_64::bmi2::_pext_u64 (44,135,714 samples, 0.04%)</title><rect x="78.3135%" y="181" width="0.0393%" height="15" fill="rgb(240,136,2)" fg:x="88039230170" fg:w="44135714"/><text x="78.5635%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (22,156,930 samples, 0.02%)</title><rect x="78.4314%" y="197" width="0.0197%" height="15" fill="rgb(239,18,37)" fg:x="88171685108" fg:w="22156930"/><text x="78.6814%" y="207.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_king_castle (115,987,983 samples, 0.10%)</title><rect x="78.3528%" y="213" width="0.1032%" height="15" fill="rgb(218,185,22)" fg:x="88083365884" fg:w="115987983"/><text x="78.6028%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (116,002,554 samples, 0.10%)</title><rect x="78.5051%" y="197" width="0.1032%" height="15" fill="rgb(225,218,4)" fg:x="88254544696" fg:w="116002554"/><text x="78.7551%" y="207.50"></text></g><g><title>core::ptr::write (33,132,881 samples, 0.03%)</title><rect x="78.5788%" y="181" width="0.0295%" height="15" fill="rgb(230,182,32)" fg:x="88337414369" fg:w="33132881"/><text x="78.8288%" y="191.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_king_normal (193,279,593 samples, 0.17%)</title><rect x="78.4560%" y="213" width="0.1719%" height="15" fill="rgb(242,56,43)" fg:x="88199353867" fg:w="193279593"/><text x="78.7060%" y="223.50"></text></g><g><title>shiro::engine::move_gen::gen_moves (14,426,648,650 samples, 12.83%)</title><rect x="65.8195%" y="245" width="12.8329%" height="15" fill="rgb(233,99,24)" fg:x="73993596936" fg:w="14426648650"/><text x="66.0695%" y="255.50">shiro::engine::move..</text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_all_moves (1,629,140,867 samples, 1.45%)</title><rect x="77.2033%" y="229" width="1.4492%" height="15" fill="rgb(234,209,42)" fg:x="86791104719" fg:w="1629140867"/><text x="77.4533%" y="239.50"></text></g><g><title>&lt;shiro::engine::core::BoardState as core::clone::Clone&gt;::clone (15,244,982,138 samples, 13.56%)</title><rect x="78.9766%" y="229" width="13.5609%" height="15" fill="rgb(227,7,12)" fg:x="88784671386" fg:w="15244982138"/><text x="79.2266%" y="239.50">&lt;shiro::engine::core..</text></g><g><title>[libc.so.6] (15,244,982,138 samples, 13.56%)</title><rect x="78.9766%" y="213" width="13.5609%" height="15" fill="rgb(245,203,43)" fg:x="88784671386" fg:w="15244982138"/><text x="79.2266%" y="223.50">[libc.so.6]</text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitOrAssign&gt;::bitor_assign (176,641,439 samples, 0.16%)</title><rect x="92.5473%" y="229" width="0.1571%" height="15" fill="rgb(238,205,33)" fg:x="104040689029" fg:w="176641439"/><text x="92.7973%" y="239.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitOrAssign&gt;::bitor_assign (176,641,439 samples, 0.16%)</title><rect x="92.5473%" y="213" width="0.1571%" height="15" fill="rgb(231,56,7)" fg:x="104040689029" fg:w="176641439"/><text x="92.7973%" y="223.50"></text></g><g><title>[libc.so.6] (5,867,702,843 samples, 5.22%)</title><rect x="92.7094%" y="229" width="5.2195%" height="15" fill="rgb(244,186,29)" fg:x="104222855285" fg:w="5867702843"/><text x="92.9594%" y="239.50">[libc...</text></g><g><title>shiro::engine::core::BoardState::get_peice_bb_mut (22,072,039 samples, 0.02%)</title><rect x="97.9485%" y="229" width="0.0196%" height="15" fill="rgb(234,111,31)" fg:x="110112653720" fg:w="22072039"/><text x="98.1985%" y="239.50"></text></g><g><title>shiro::engine::core::Flags::set_has_ep (2,195,026,195 samples, 1.95%)</title><rect x="97.9681%" y="229" width="1.9525%" height="15" fill="rgb(241,149,10)" fg:x="110134725759" fg:w="2195026195"/><text x="98.2181%" y="239.50">s..</text></g><g><title>shiro::engine::core::Flags::set_has_ep_checked (2,195,026,195 samples, 1.95%)</title><rect x="97.9681%" y="213" width="1.9525%" height="15" fill="rgb(249,206,44)" fg:x="110134725759" fg:w="2195026195"/><text x="98.2181%" y="223.50">s..</text></g><g><title>modular_bitfield::private::proc::write_specifier (2,195,026,195 samples, 1.95%)</title><rect x="97.9681%" y="197" width="1.9525%" height="15" fill="rgb(251,153,30)" fg:x="110134725759" fg:w="2195026195"/><text x="98.2181%" y="207.50">m..</text></g><g><title>shiro::engine::core::Piece::ptype (22,914,511 samples, 0.02%)</title><rect x="99.9305%" y="229" width="0.0204%" height="15" fill="rgb(239,152,38)" fg:x="112340801769" fg:w="22914511"/><text x="100.1805%" y="239.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (22,914,511 samples, 0.02%)</title><rect x="99.9305%" y="213" width="0.0204%" height="15" fill="rgb(249,139,47)" fg:x="112340801769" fg:w="22914511"/><text x="100.1805%" y="223.50"></text></g><g><title>shiro::engine::perft::make_move (23,948,990,279 samples, 21.30%)</title><rect x="78.6525%" y="245" width="21.3033%" height="15" fill="rgb(244,64,35)" fg:x="88420245586" fg:w="23948990279"/><text x="78.9025%" y="255.50">shiro::engine::perft::make_move</text></g><g><title>cfree (38,652,742 samples, 0.03%)</title><rect x="99.9607%" y="229" width="0.0344%" height="15" fill="rgb(216,46,15)" fg:x="112374753098" fg:w="38652742"/><text x="100.2107%" y="239.50"></text></g><g><title>all (112,418,924,379 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(250,74,19)" fg:x="0" fg:w="112418924379"/><text x="0.2500%" y="287.50"></text></g><g><title>game (112,418,924,379 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(249,42,33)" fg:x="0" fg:w="112418924379"/><text x="0.2500%" y="271.50">game</text></g><g><title>shiro::engine::perft::perft_simple (49,688,514 samples, 0.04%)</title><rect x="99.9558%" y="245" width="0.0442%" height="15" fill="rgb(242,149,17)" fg:x="112369235865" fg:w="49688514"/><text x="100.2058%" y="255.50"></text></g></svg></svg>