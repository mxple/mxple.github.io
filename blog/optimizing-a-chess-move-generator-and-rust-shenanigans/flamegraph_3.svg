<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="261.00"> </text><svg id="frames" x="10" width="1180" total_samples="65039832602"><g><title>core::cmp::PartialEq::ne (168,366,305 samples, 0.26%)</title><rect x="0.1962%" y="133" width="0.2589%" height="15" fill="rgb(227,0,7)" fg:x="127617813" fg:w="168366305"/><text x="0.4462%" y="143.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (168,366,305 samples, 0.26%)</title><rect x="0.1962%" y="117" width="0.2589%" height="15" fill="rgb(217,0,24)" fg:x="127617813" fg:w="168366305"/><text x="0.4462%" y="127.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (105,376,325 samples, 0.16%)</title><rect x="0.4551%" y="133" width="0.1620%" height="15" fill="rgb(221,193,54)" fg:x="295984118" fg:w="105376325"/><text x="0.7051%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (105,376,325 samples, 0.16%)</title><rect x="0.4551%" y="117" width="0.1620%" height="15" fill="rgb(248,212,6)" fg:x="295984118" fg:w="105376325"/><text x="0.7051%" y="127.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push (116,475,120 samples, 0.18%)</title><rect x="1.0605%" y="117" width="0.1791%" height="15" fill="rgb(208,68,35)" fg:x="689721757" fg:w="116475120"/><text x="1.3105%" y="127.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push (116,475,120 samples, 0.18%)</title><rect x="1.0605%" y="101" width="0.1791%" height="15" fill="rgb(232,128,0)" fg:x="689721757" fg:w="116475120"/><text x="1.3105%" y="111.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::try_push (116,475,120 samples, 0.18%)</title><rect x="1.0605%" y="85" width="0.1791%" height="15" fill="rgb(207,160,47)" fg:x="689721757" fg:w="116475120"/><text x="1.3105%" y="95.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (116,475,120 samples, 0.18%)</title><rect x="1.0605%" y="69" width="0.1791%" height="15" fill="rgb(228,23,34)" fg:x="689721757" fg:w="116475120"/><text x="1.3105%" y="79.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as arrayvec::arrayvec_impl::ArrayVecImpl&gt;::set_len (116,475,120 samples, 0.18%)</title><rect x="1.0605%" y="53" width="0.1791%" height="15" fill="rgb(218,30,26)" fg:x="689721757" fg:w="116475120"/><text x="1.3105%" y="63.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (499,077,053 samples, 0.77%)</title><rect x="0.6171%" y="133" width="0.7673%" height="15" fill="rgb(220,122,19)" fg:x="401360443" fg:w="499077053"/><text x="0.8671%" y="143.50"></text></g><g><title>shiro::engine::common::chess_move::Move::with_target (94,240,619 samples, 0.14%)</title><rect x="1.2395%" y="117" width="0.1449%" height="15" fill="rgb(250,228,42)" fg:x="806196877" fg:w="94240619"/><text x="1.4895%" y="127.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_target (94,240,619 samples, 0.14%)</title><rect x="1.2395%" y="101" width="0.1449%" height="15" fill="rgb(240,193,28)" fg:x="806196877" fg:w="94240619"/><text x="1.4895%" y="111.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_target_checked (94,240,619 samples, 0.14%)</title><rect x="1.2395%" y="85" width="0.1449%" height="15" fill="rgb(216,20,37)" fg:x="806196877" fg:w="94240619"/><text x="1.4895%" y="95.50"></text></g><g><title>modular_bitfield::private::proc::write_specifier (94,240,619 samples, 0.14%)</title><rect x="1.2395%" y="69" width="0.1449%" height="15" fill="rgb(206,188,39)" fg:x="806196877" fg:w="94240619"/><text x="1.4895%" y="79.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_dg (939,230,005 samples, 1.44%)</title><rect x="0.0086%" y="149" width="1.4441%" height="15" fill="rgb(217,207,13)" fg:x="5592187" fg:w="939230005"/><text x="0.2586%" y="159.50"></text></g><g><title>shiro::engine::move_gen::masks::pext_dg_lookup (44,384,696 samples, 0.07%)</title><rect x="1.3844%" y="133" width="0.0682%" height="15" fill="rgb(231,73,38)" fg:x="900437496" fg:w="44384696"/><text x="1.6344%" y="143.50"></text></g><g><title>core::cmp::PartialEq::ne (483,175,517 samples, 0.74%)</title><rect x="3.0153%" y="133" width="0.7429%" height="15" fill="rgb(225,20,46)" fg:x="1961119671" fg:w="483175517"/><text x="3.2653%" y="143.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (483,175,517 samples, 0.74%)</title><rect x="3.0153%" y="117" width="0.7429%" height="15" fill="rgb(210,31,41)" fg:x="1961119671" fg:w="483175517"/><text x="3.2653%" y="127.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (755,539,813 samples, 1.16%)</title><rect x="3.7582%" y="133" width="1.1617%" height="15" fill="rgb(221,200,47)" fg:x="2444295188" fg:w="755539813"/><text x="4.0082%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (622,329,644 samples, 0.96%)</title><rect x="3.9630%" y="117" width="0.9568%" height="15" fill="rgb(226,26,5)" fg:x="2577505357" fg:w="622329644"/><text x="4.2130%" y="127.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push (1,872,269,217 samples, 2.88%)</title><rect x="12.0647%" y="117" width="2.8787%" height="15" fill="rgb(249,33,26)" fg:x="7846831482" fg:w="1872269217"/><text x="12.3147%" y="127.50">ar..</text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push (1,872,269,217 samples, 2.88%)</title><rect x="12.0647%" y="101" width="2.8787%" height="15" fill="rgb(235,183,28)" fg:x="7846831482" fg:w="1872269217"/><text x="12.3147%" y="111.50">ar..</text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::try_push (1,872,269,217 samples, 2.88%)</title><rect x="12.0647%" y="85" width="2.8787%" height="15" fill="rgb(221,5,38)" fg:x="7846831482" fg:w="1872269217"/><text x="12.3147%" y="95.50">ar..</text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (1,522,014,959 samples, 2.34%)</title><rect x="12.6032%" y="69" width="2.3401%" height="15" fill="rgb(247,18,42)" fg:x="8197085740" fg:w="1522014959"/><text x="12.8532%" y="79.50">a..</text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as arrayvec::arrayvec_impl::ArrayVecImpl&gt;::set_len (1,522,014,959 samples, 2.34%)</title><rect x="12.6032%" y="53" width="2.3401%" height="15" fill="rgb(241,131,45)" fg:x="8197085740" fg:w="1522014959"/><text x="12.8532%" y="63.50">&lt;..</text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (7,513,275,137 samples, 11.55%)</title><rect x="4.9198%" y="133" width="11.5518%" height="15" fill="rgb(249,31,29)" fg:x="3199835001" fg:w="7513275137"/><text x="5.1698%" y="143.50">shiro::engine::mo..</text></g><g><title>shiro::engine::common::chess_move::Move::with_target (994,009,439 samples, 1.53%)</title><rect x="14.9433%" y="117" width="1.5283%" height="15" fill="rgb(225,111,53)" fg:x="9719100699" fg:w="994009439"/><text x="15.1933%" y="127.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_target (994,009,439 samples, 1.53%)</title><rect x="14.9433%" y="101" width="1.5283%" height="15" fill="rgb(238,160,17)" fg:x="9719100699" fg:w="994009439"/><text x="15.1933%" y="111.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_target_checked (994,009,439 samples, 1.53%)</title><rect x="14.9433%" y="85" width="1.5283%" height="15" fill="rgb(214,148,48)" fg:x="9719100699" fg:w="994009439"/><text x="15.1933%" y="95.50"></text></g><g><title>modular_bitfield::private::proc::write_specifier (994,009,439 samples, 1.53%)</title><rect x="14.9433%" y="69" width="1.5283%" height="15" fill="rgb(232,36,49)" fg:x="9719100699" fg:w="994009439"/><text x="15.1933%" y="79.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_hv (9,945,919,836 samples, 15.29%)</title><rect x="1.4527%" y="149" width="15.2920%" height="15" fill="rgb(209,103,24)" fg:x="944822192" fg:w="9945919836"/><text x="1.7027%" y="159.50">shiro::engine::move_gen..</text></g><g><title>shiro::engine::move_gen::masks::pext_hv_lookup (177,631,890 samples, 0.27%)</title><rect x="16.4716%" y="133" width="0.2731%" height="15" fill="rgb(229,88,8)" fg:x="10713110138" fg:w="177631890"/><text x="16.7216%" y="143.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_king_castle (33,295,696 samples, 0.05%)</title><rect x="16.7447%" y="149" width="0.0512%" height="15" fill="rgb(213,181,19)" fg:x="10890742028" fg:w="33295696"/><text x="16.9947%" y="159.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (11,094,232 samples, 0.02%)</title><rect x="16.7789%" y="133" width="0.0171%" height="15" fill="rgb(254,191,54)" fg:x="10912943492" fg:w="11094232"/><text x="17.0289%" y="143.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::Not&gt;::not (27,757,122 samples, 0.04%)</title><rect x="16.9408%" y="133" width="0.0427%" height="15" fill="rgb(241,83,37)" fg:x="11018289855" fg:w="27757122"/><text x="17.1908%" y="143.50"></text></g><g><title>&lt;u64 as core::ops::bit::Not&gt;::not (27,757,122 samples, 0.04%)</title><rect x="16.9408%" y="117" width="0.0427%" height="15" fill="rgb(233,36,39)" fg:x="11018289855" fg:w="27757122"/><text x="17.1908%" y="127.50"></text></g><g><title>core::cmp::PartialEq::ne (83,244,505 samples, 0.13%)</title><rect x="16.9835%" y="133" width="0.1280%" height="15" fill="rgb(226,3,54)" fg:x="11046046977" fg:w="83244505"/><text x="17.2335%" y="143.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (83,244,505 samples, 0.13%)</title><rect x="16.9835%" y="117" width="0.1280%" height="15" fill="rgb(245,192,40)" fg:x="11046046977" fg:w="83244505"/><text x="17.2335%" y="127.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (83,495,839 samples, 0.13%)</title><rect x="17.1115%" y="133" width="0.1284%" height="15" fill="rgb(238,167,29)" fg:x="11129291482" fg:w="83495839"/><text x="17.3615%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (77,954,132 samples, 0.12%)</title><rect x="17.1200%" y="117" width="0.1199%" height="15" fill="rgb(232,182,51)" fg:x="11134833189" fg:w="77954132"/><text x="17.3700%" y="127.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as arrayvec::arrayvec_impl::ArrayVecImpl&gt;::set_len (66,561,900 samples, 0.10%)</title><rect x="17.7172%" y="53" width="0.1023%" height="15" fill="rgb(231,60,39)" fg:x="11523223196" fg:w="66561900"/><text x="17.9672%" y="63.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push (77,645,983 samples, 0.12%)</title><rect x="17.7172%" y="117" width="0.1194%" height="15" fill="rgb(208,69,12)" fg:x="11523223196" fg:w="77645983"/><text x="17.9672%" y="127.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push (77,645,983 samples, 0.12%)</title><rect x="17.7172%" y="101" width="0.1194%" height="15" fill="rgb(235,93,37)" fg:x="11523223196" fg:w="77645983"/><text x="17.9672%" y="111.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::try_push (77,645,983 samples, 0.12%)</title><rect x="17.7172%" y="85" width="0.1194%" height="15" fill="rgb(213,116,39)" fg:x="11523223196" fg:w="77645983"/><text x="17.9672%" y="95.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (77,645,983 samples, 0.12%)</title><rect x="17.7172%" y="69" width="0.1194%" height="15" fill="rgb(222,207,29)" fg:x="11523223196" fg:w="77645983"/><text x="17.9672%" y="79.50"></text></g><g><title>core::ptr::write (11,084,083 samples, 0.02%)</title><rect x="17.8195%" y="53" width="0.0170%" height="15" fill="rgb(206,96,30)" fg:x="11589785096" fg:w="11084083"/><text x="18.0695%" y="63.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_knight (737,829,257 samples, 1.13%)</title><rect x="16.7959%" y="149" width="1.1344%" height="15" fill="rgb(218,138,4)" fg:x="10924037724" fg:w="737829257"/><text x="17.0459%" y="159.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (449,079,660 samples, 0.69%)</title><rect x="17.2399%" y="133" width="0.6905%" height="15" fill="rgb(250,191,14)" fg:x="11212787321" fg:w="449079660"/><text x="17.4899%" y="143.50"></text></g><g><title>shiro::engine::common::chess_move::Move::with_target (60,997,802 samples, 0.09%)</title><rect x="17.8366%" y="117" width="0.0938%" height="15" fill="rgb(239,60,40)" fg:x="11600869179" fg:w="60997802"/><text x="18.0866%" y="127.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_target (60,997,802 samples, 0.09%)</title><rect x="17.8366%" y="101" width="0.0938%" height="15" fill="rgb(206,27,48)" fg:x="11600869179" fg:w="60997802"/><text x="18.0866%" y="111.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_target_checked (60,997,802 samples, 0.09%)</title><rect x="17.8366%" y="85" width="0.0938%" height="15" fill="rgb(225,35,8)" fg:x="11600869179" fg:w="60997802"/><text x="18.0866%" y="95.50"></text></g><g><title>modular_bitfield::private::proc::write_specifier (60,997,802 samples, 0.09%)</title><rect x="17.8366%" y="69" width="0.0938%" height="15" fill="rgb(250,213,24)" fg:x="11600869179" fg:w="60997802"/><text x="18.0866%" y="79.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (16,657,380 samples, 0.03%)</title><rect x="18.1198%" y="133" width="0.0256%" height="15" fill="rgb(247,123,22)" fg:x="11785115697" fg:w="16657380"/><text x="18.3698%" y="143.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (16,657,380 samples, 0.03%)</title><rect x="18.1198%" y="117" width="0.0256%" height="15" fill="rgb(231,138,38)" fg:x="11785115697" fg:w="16657380"/><text x="18.3698%" y="127.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::Not&gt;::not (66,623,513 samples, 0.10%)</title><rect x="18.1455%" y="133" width="0.1024%" height="15" fill="rgb(231,145,46)" fg:x="11801773077" fg:w="66623513"/><text x="18.3955%" y="143.50"></text></g><g><title>&lt;u64 as core::ops::bit::Not&gt;::not (66,623,513 samples, 0.10%)</title><rect x="18.1455%" y="117" width="0.1024%" height="15" fill="rgb(251,118,11)" fg:x="11801773077" fg:w="66623513"/><text x="18.3955%" y="127.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::Shl&lt;__RhsT&gt;&gt;::shl (38,859,870 samples, 0.06%)</title><rect x="18.2479%" y="133" width="0.0597%" height="15" fill="rgb(217,147,25)" fg:x="11868396590" fg:w="38859870"/><text x="18.4979%" y="143.50"></text></g><g><title>&lt;u64 as core::ops::bit::Shl&lt;i32&gt;&gt;::shl (38,859,870 samples, 0.06%)</title><rect x="18.2479%" y="117" width="0.0597%" height="15" fill="rgb(247,81,37)" fg:x="11868396590" fg:w="38859870"/><text x="18.4979%" y="127.50"></text></g><g><title>&lt;modular_bitfield::specifiers::B6 as modular_bitfield::Specifier&gt;::into_bytes (11,102,853 samples, 0.02%)</title><rect x="18.3515%" y="69" width="0.0171%" height="15" fill="rgb(209,12,38)" fg:x="11935787892" fg:w="11102853"/><text x="18.6015%" y="79.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (55,309,685 samples, 0.09%)</title><rect x="18.3174%" y="133" width="0.0850%" height="15" fill="rgb(227,1,9)" fg:x="11913577874" fg:w="55309685"/><text x="18.5674%" y="143.50"></text></g><g><title>shiro::engine::common::chess_move::Move::with_start (33,099,667 samples, 0.05%)</title><rect x="18.3515%" y="117" width="0.0509%" height="15" fill="rgb(248,47,43)" fg:x="11935787892" fg:w="33099667"/><text x="18.6015%" y="127.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_start (33,099,667 samples, 0.05%)</title><rect x="18.3515%" y="101" width="0.0509%" height="15" fill="rgb(221,10,30)" fg:x="11935787892" fg:w="33099667"/><text x="18.6015%" y="111.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_start_checked (33,099,667 samples, 0.05%)</title><rect x="18.3515%" y="85" width="0.0509%" height="15" fill="rgb(210,229,1)" fg:x="11935787892" fg:w="33099667"/><text x="18.6015%" y="95.50"></text></g><g><title>modular_bitfield::private::proc::write_specifier (21,996,814 samples, 0.03%)</title><rect x="18.3686%" y="69" width="0.0338%" height="15" fill="rgb(222,148,37)" fg:x="11946890745" fg:w="21996814"/><text x="18.6186%" y="79.50"></text></g><g><title>&lt;modular_bitfield::private::push_pop::PopBuffer&lt;u8&gt; as modular_bitfield::private::traits::PopBits&gt;::pop_bits (16,442,641 samples, 0.03%)</title><rect x="18.3771%" y="53" width="0.0253%" height="15" fill="rgb(234,67,33)" fg:x="11952444918" fg:w="16442641"/><text x="18.6271%" y="63.50"></text></g><g><title>core::num::&lt;impl u8&gt;::checked_shr (16,442,641 samples, 0.03%)</title><rect x="18.3771%" y="37" width="0.0253%" height="15" fill="rgb(247,98,35)" fg:x="11952444918" fg:w="16442641"/><text x="18.6271%" y="47.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_pawn_captures (312,562,487 samples, 0.48%)</title><rect x="17.9303%" y="149" width="0.4806%" height="15" fill="rgb(247,138,52)" fg:x="11661866981" fg:w="312562487"/><text x="18.1803%" y="159.50"></text></g><g><title>[unknown] (12,007,612,466 samples, 18.46%)</title><rect x="0.0001%" y="181" width="18.4619%" height="15" fill="rgb(213,79,30)" fg:x="45809" fg:w="12007612466"/><text x="0.2501%" y="191.50">[unknown]</text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_all_moves (12,007,612,466 samples, 18.46%)</title><rect x="0.0001%" y="165" width="18.4619%" height="15" fill="rgb(246,177,23)" fg:x="45809" fg:w="12007612466"/><text x="0.2501%" y="175.50">shiro::engine::move_gen::Move..</text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_pawn_pushes (33,228,807 samples, 0.05%)</title><rect x="18.4109%" y="149" width="0.0511%" height="15" fill="rgb(230,62,27)" fg:x="11974429468" fg:w="33228807"/><text x="18.6609%" y="159.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_promotions (27,693,471 samples, 0.04%)</title><rect x="18.4194%" y="133" width="0.0426%" height="15" fill="rgb(216,154,8)" fg:x="11979964804" fg:w="27693471"/><text x="18.6694%" y="143.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push (27,693,471 samples, 0.04%)</title><rect x="18.4194%" y="117" width="0.0426%" height="15" fill="rgb(244,35,45)" fg:x="11979964804" fg:w="27693471"/><text x="18.6694%" y="127.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push (27,693,471 samples, 0.04%)</title><rect x="18.4194%" y="101" width="0.0426%" height="15" fill="rgb(251,115,12)" fg:x="11979964804" fg:w="27693471"/><text x="18.6694%" y="111.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::try_push (27,693,471 samples, 0.04%)</title><rect x="18.4194%" y="85" width="0.0426%" height="15" fill="rgb(240,54,50)" fg:x="11979964804" fg:w="27693471"/><text x="18.6694%" y="95.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (16,610,554 samples, 0.03%)</title><rect x="18.4365%" y="69" width="0.0255%" height="15" fill="rgb(233,84,52)" fg:x="11991047721" fg:w="16610554"/><text x="18.6865%" y="79.50"></text></g><g><title>core::cmp::PartialEq::ne (22,189,866 samples, 0.03%)</title><rect x="18.9497%" y="149" width="0.0341%" height="15" fill="rgb(207,117,47)" fg:x="12324865460" fg:w="22189866"/><text x="19.1997%" y="159.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (22,189,866 samples, 0.03%)</title><rect x="18.9497%" y="133" width="0.0341%" height="15" fill="rgb(249,43,39)" fg:x="12324865460" fg:w="22189866"/><text x="19.1997%" y="143.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (33,246,259 samples, 0.05%)</title><rect x="18.9924%" y="149" width="0.0511%" height="15" fill="rgb(209,38,44)" fg:x="12352603531" fg:w="33246259"/><text x="19.2424%" y="159.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_dg (116,458,676 samples, 0.18%)</title><rect x="18.8644%" y="165" width="0.1791%" height="15" fill="rgb(236,212,23)" fg:x="12269391116" fg:w="116458676"/><text x="19.1144%" y="175.50"></text></g><g><title>core::cmp::PartialEq::ne (44,381,723 samples, 0.07%)</title><rect x="19.2312%" y="149" width="0.0682%" height="15" fill="rgb(242,79,21)" fg:x="12507939983" fg:w="44381723"/><text x="19.4812%" y="159.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (44,381,723 samples, 0.07%)</title><rect x="19.2312%" y="133" width="0.0682%" height="15" fill="rgb(211,96,35)" fg:x="12507939983" fg:w="44381723"/><text x="19.4812%" y="143.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (38,847,862 samples, 0.06%)</title><rect x="19.2994%" y="149" width="0.0597%" height="15" fill="rgb(253,215,40)" fg:x="12552321706" fg:w="38847862"/><text x="19.5494%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (38,847,862 samples, 0.06%)</title><rect x="19.2994%" y="133" width="0.0597%" height="15" fill="rgb(211,81,21)" fg:x="12552321706" fg:w="38847862"/><text x="19.5494%" y="143.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push (44,395,282 samples, 0.07%)</title><rect x="19.9593%" y="133" width="0.0683%" height="15" fill="rgb(208,190,38)" fg:x="12981504186" fg:w="44395282"/><text x="20.2093%" y="143.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push (44,395,282 samples, 0.07%)</title><rect x="19.9593%" y="117" width="0.0683%" height="15" fill="rgb(235,213,38)" fg:x="12981504186" fg:w="44395282"/><text x="20.2093%" y="127.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::try_push (44,395,282 samples, 0.07%)</title><rect x="19.9593%" y="101" width="0.0683%" height="15" fill="rgb(237,122,38)" fg:x="12981504186" fg:w="44395282"/><text x="20.2093%" y="111.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (11,076,563 samples, 0.02%)</title><rect x="20.0105%" y="85" width="0.0170%" height="15" fill="rgb(244,218,35)" fg:x="13014822905" fg:w="11076563"/><text x="20.2605%" y="95.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as arrayvec::arrayvec_impl::ArrayVecImpl&gt;::set_len (11,076,563 samples, 0.02%)</title><rect x="20.0105%" y="69" width="0.0170%" height="15" fill="rgb(240,68,47)" fg:x="13014822905" fg:w="11076563"/><text x="20.2605%" y="79.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (495,777,685 samples, 0.76%)</title><rect x="19.3592%" y="149" width="0.7623%" height="15" fill="rgb(210,16,53)" fg:x="12591169568" fg:w="495777685"/><text x="19.6092%" y="159.50"></text></g><g><title>shiro::engine::common::chess_move::Move::with_target (61,047,785 samples, 0.09%)</title><rect x="20.0276%" y="133" width="0.0939%" height="15" fill="rgb(235,124,12)" fg:x="13025899468" fg:w="61047785"/><text x="20.2776%" y="143.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_target (61,047,785 samples, 0.09%)</title><rect x="20.0276%" y="117" width="0.0939%" height="15" fill="rgb(224,169,11)" fg:x="13025899468" fg:w="61047785"/><text x="20.2776%" y="127.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_target_checked (61,047,785 samples, 0.09%)</title><rect x="20.0276%" y="101" width="0.0939%" height="15" fill="rgb(250,166,2)" fg:x="13025899468" fg:w="61047785"/><text x="20.2776%" y="111.50"></text></g><g><title>modular_bitfield::private::proc::write_specifier (61,047,785 samples, 0.09%)</title><rect x="20.0276%" y="85" width="0.0939%" height="15" fill="rgb(242,216,29)" fg:x="13025899468" fg:w="61047785"/><text x="20.2776%" y="95.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_hv (728,851,287 samples, 1.12%)</title><rect x="19.0435%" y="165" width="1.1206%" height="15" fill="rgb(230,116,27)" fg:x="12385849792" fg:w="728851287"/><text x="19.2935%" y="175.50"></text></g><g><title>shiro::engine::move_gen::masks::pext_hv_lookup (27,753,826 samples, 0.04%)</title><rect x="20.1214%" y="149" width="0.0427%" height="15" fill="rgb(228,99,48)" fg:x="13086947253" fg:w="27753826"/><text x="20.3714%" y="159.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_king_castle (11,108,516 samples, 0.02%)</title><rect x="20.1641%" y="165" width="0.0171%" height="15" fill="rgb(253,11,6)" fg:x="13114701079" fg:w="11108516"/><text x="20.4141%" y="175.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (55,413,777 samples, 0.09%)</title><rect x="20.2067%" y="149" width="0.0852%" height="15" fill="rgb(247,143,39)" fg:x="13142436158" fg:w="55413777"/><text x="20.4567%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (55,413,777 samples, 0.09%)</title><rect x="20.2067%" y="133" width="0.0852%" height="15" fill="rgb(236,97,10)" fg:x="13142436158" fg:w="55413777"/><text x="20.4567%" y="143.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push (33,252,756 samples, 0.05%)</title><rect x="20.3770%" y="133" width="0.0511%" height="15" fill="rgb(233,208,19)" fg:x="13253158787" fg:w="33252756"/><text x="20.6270%" y="143.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push (33,252,756 samples, 0.05%)</title><rect x="20.3770%" y="117" width="0.0511%" height="15" fill="rgb(216,164,2)" fg:x="13253158787" fg:w="33252756"/><text x="20.6270%" y="127.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::try_push (33,252,756 samples, 0.05%)</title><rect x="20.3770%" y="101" width="0.0511%" height="15" fill="rgb(220,129,5)" fg:x="13253158787" fg:w="33252756"/><text x="20.6270%" y="111.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (22,167,515 samples, 0.03%)</title><rect x="20.3940%" y="85" width="0.0341%" height="15" fill="rgb(242,17,10)" fg:x="13264244028" fg:w="22167515"/><text x="20.6440%" y="95.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as arrayvec::arrayvec_impl::ArrayVecImpl&gt;::set_len (22,167,515 samples, 0.03%)</title><rect x="20.3940%" y="69" width="0.0341%" height="15" fill="rgb(242,107,0)" fg:x="13264244028" fg:w="22167515"/><text x="20.6440%" y="79.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (110,722,144 samples, 0.17%)</title><rect x="20.2919%" y="149" width="0.1702%" height="15" fill="rgb(251,28,31)" fg:x="13197849935" fg:w="110722144"/><text x="20.5419%" y="159.50"></text></g><g><title>shiro::engine::common::chess_move::Move::with_target (22,160,536 samples, 0.03%)</title><rect x="20.4281%" y="133" width="0.0341%" height="15" fill="rgb(233,223,10)" fg:x="13286411543" fg:w="22160536"/><text x="20.6781%" y="143.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_target (22,160,536 samples, 0.03%)</title><rect x="20.4281%" y="117" width="0.0341%" height="15" fill="rgb(215,21,27)" fg:x="13286411543" fg:w="22160536"/><text x="20.6781%" y="127.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_target_checked (22,160,536 samples, 0.03%)</title><rect x="20.4281%" y="101" width="0.0341%" height="15" fill="rgb(232,23,21)" fg:x="13286411543" fg:w="22160536"/><text x="20.6781%" y="111.50"></text></g><g><title>modular_bitfield::private::proc::write_specifier (22,160,536 samples, 0.03%)</title><rect x="20.4281%" y="85" width="0.0341%" height="15" fill="rgb(244,5,23)" fg:x="13286411543" fg:w="22160536"/><text x="20.6781%" y="95.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_king_normal (188,306,147 samples, 0.29%)</title><rect x="20.1812%" y="165" width="0.2895%" height="15" fill="rgb(226,81,46)" fg:x="13125809595" fg:w="188306147"/><text x="20.4312%" y="175.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitOr&gt;::bitor (33,315,263 samples, 0.05%)</title><rect x="20.6071%" y="149" width="0.0512%" height="15" fill="rgb(247,70,30)" fg:x="13402830043" fg:w="33315263"/><text x="20.8571%" y="159.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitOr&gt;::bitor (33,315,263 samples, 0.05%)</title><rect x="20.6071%" y="133" width="0.0512%" height="15" fill="rgb(212,68,19)" fg:x="13402830043" fg:w="33315263"/><text x="20.8571%" y="143.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::Not&gt;::not (24,798,643 samples, 0.04%)</title><rect x="20.6583%" y="149" width="0.0381%" height="15" fill="rgb(240,187,13)" fg:x="13436145306" fg:w="24798643"/><text x="20.9083%" y="159.50"></text></g><g><title>&lt;u64 as core::ops::bit::Not&gt;::not (24,798,643 samples, 0.04%)</title><rect x="20.6583%" y="133" width="0.0381%" height="15" fill="rgb(223,113,26)" fg:x="13436145306" fg:w="24798643"/><text x="20.9083%" y="143.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (77,607,183 samples, 0.12%)</title><rect x="20.7050%" y="149" width="0.1193%" height="15" fill="rgb(206,192,2)" fg:x="13466485118" fg:w="77607183"/><text x="20.9550%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (77,607,183 samples, 0.12%)</title><rect x="20.7050%" y="133" width="0.1193%" height="15" fill="rgb(241,108,4)" fg:x="13466485118" fg:w="77607183"/><text x="20.9550%" y="143.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as arrayvec::arrayvec_impl::ArrayVecImpl&gt;::set_len (44,382,214 samples, 0.07%)</title><rect x="21.1738%" y="69" width="0.0682%" height="15" fill="rgb(247,173,49)" fg:x="13771410209" fg:w="44382214"/><text x="21.4238%" y="79.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push (49,923,860 samples, 0.08%)</title><rect x="21.1738%" y="133" width="0.0768%" height="15" fill="rgb(224,114,35)" fg:x="13771410209" fg:w="49923860"/><text x="21.4238%" y="143.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push (49,923,860 samples, 0.08%)</title><rect x="21.1738%" y="117" width="0.0768%" height="15" fill="rgb(245,159,27)" fg:x="13771410209" fg:w="49923860"/><text x="21.4238%" y="127.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::try_push (49,923,860 samples, 0.08%)</title><rect x="21.1738%" y="101" width="0.0768%" height="15" fill="rgb(245,172,44)" fg:x="13771410209" fg:w="49923860"/><text x="21.4238%" y="111.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (49,923,860 samples, 0.08%)</title><rect x="21.1738%" y="85" width="0.0768%" height="15" fill="rgb(236,23,11)" fg:x="13771410209" fg:w="49923860"/><text x="21.4238%" y="95.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_knight (557,101,675 samples, 0.86%)</title><rect x="20.4707%" y="165" width="0.8566%" height="15" fill="rgb(205,117,38)" fg:x="13314115742" fg:w="557101675"/><text x="20.7207%" y="175.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (327,125,116 samples, 0.50%)</title><rect x="20.8243%" y="149" width="0.5030%" height="15" fill="rgb(237,72,25)" fg:x="13544092301" fg:w="327125116"/><text x="21.0743%" y="159.50"></text></g><g><title>shiro::engine::common::chess_move::Move::with_target (49,883,348 samples, 0.08%)</title><rect x="21.2506%" y="133" width="0.0767%" height="15" fill="rgb(244,70,9)" fg:x="13821334069" fg:w="49883348"/><text x="21.5006%" y="143.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_target (49,883,348 samples, 0.08%)</title><rect x="21.2506%" y="117" width="0.0767%" height="15" fill="rgb(217,125,39)" fg:x="13821334069" fg:w="49883348"/><text x="21.5006%" y="127.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_target_checked (49,883,348 samples, 0.08%)</title><rect x="21.2506%" y="101" width="0.0767%" height="15" fill="rgb(235,36,10)" fg:x="13821334069" fg:w="49883348"/><text x="21.5006%" y="111.50"></text></g><g><title>modular_bitfield::private::proc::write_specifier (49,883,348 samples, 0.08%)</title><rect x="21.2506%" y="85" width="0.0767%" height="15" fill="rgb(251,123,47)" fg:x="13821334069" fg:w="49883348"/><text x="21.5006%" y="95.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (27,738,861 samples, 0.04%)</title><rect x="21.4040%" y="149" width="0.0426%" height="15" fill="rgb(221,13,13)" fg:x="13921129416" fg:w="27738861"/><text x="21.6540%" y="159.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (27,738,861 samples, 0.04%)</title><rect x="21.4040%" y="133" width="0.0426%" height="15" fill="rgb(238,131,9)" fg:x="13921129416" fg:w="27738861"/><text x="21.6540%" y="143.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitOr&gt;::bitor (11,080,199 samples, 0.02%)</title><rect x="21.4467%" y="149" width="0.0170%" height="15" fill="rgb(211,50,8)" fg:x="13948868277" fg:w="11080199"/><text x="21.6967%" y="159.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitOr&gt;::bitor (11,080,199 samples, 0.02%)</title><rect x="21.4467%" y="133" width="0.0170%" height="15" fill="rgb(245,182,24)" fg:x="13948868277" fg:w="11080199"/><text x="21.6967%" y="143.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::Not&gt;::not (11,071,696 samples, 0.02%)</title><rect x="21.4637%" y="149" width="0.0170%" height="15" fill="rgb(242,14,37)" fg:x="13959948476" fg:w="11071696"/><text x="21.7137%" y="159.50"></text></g><g><title>&lt;u64 as core::ops::bit::Not&gt;::not (11,071,696 samples, 0.02%)</title><rect x="21.4637%" y="133" width="0.0170%" height="15" fill="rgb(246,228,12)" fg:x="13959948476" fg:w="11071696"/><text x="21.7137%" y="143.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (11,103,146 samples, 0.02%)</title><rect x="21.4978%" y="149" width="0.0171%" height="15" fill="rgb(213,55,15)" fg:x="13982102882" fg:w="11103146"/><text x="21.7478%" y="159.50"></text></g><g><title>shiro::engine::common::chess_move::Move::with_start (11,103,146 samples, 0.02%)</title><rect x="21.4978%" y="133" width="0.0171%" height="15" fill="rgb(209,9,3)" fg:x="13982102882" fg:w="11103146"/><text x="21.7478%" y="143.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_start (11,103,146 samples, 0.02%)</title><rect x="21.4978%" y="117" width="0.0171%" height="15" fill="rgb(230,59,30)" fg:x="13982102882" fg:w="11103146"/><text x="21.7478%" y="127.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_start_checked (11,103,146 samples, 0.02%)</title><rect x="21.4978%" y="101" width="0.0171%" height="15" fill="rgb(209,121,21)" fg:x="13982102882" fg:w="11103146"/><text x="21.7478%" y="111.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_pawn_captures (155,234,017 samples, 0.24%)</title><rect x="21.3273%" y="165" width="0.2387%" height="15" fill="rgb(220,109,13)" fg:x="13871217417" fg:w="155234017"/><text x="21.5773%" y="175.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_promotions (33,245,406 samples, 0.05%)</title><rect x="21.5148%" y="149" width="0.0511%" height="15" fill="rgb(232,18,1)" fg:x="13993206028" fg:w="33245406"/><text x="21.7648%" y="159.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAndAssign&gt;::bitand_assign (27,724,690 samples, 0.04%)</title><rect x="21.6171%" y="149" width="0.0426%" height="15" fill="rgb(215,41,42)" fg:x="14059720521" fg:w="27724690"/><text x="21.8671%" y="159.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAndAssign&gt;::bitand_assign (27,724,690 samples, 0.04%)</title><rect x="21.6171%" y="133" width="0.0426%" height="15" fill="rgb(224,123,36)" fg:x="14059720521" fg:w="27724690"/><text x="21.8671%" y="143.50"></text></g><g><title>shiro::engine::common::constants::rank_from_pos (11,091,097 samples, 0.02%)</title><rect x="21.6683%" y="149" width="0.0171%" height="15" fill="rgb(240,125,3)" fg:x="14092998389" fg:w="11091097"/><text x="21.9183%" y="159.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (22,207,638 samples, 0.03%)</title><rect x="21.6853%" y="149" width="0.0341%" height="15" fill="rgb(205,98,50)" fg:x="14104089486" fg:w="22207638"/><text x="21.9353%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (22,207,638 samples, 0.03%)</title><rect x="21.6853%" y="133" width="0.0341%" height="15" fill="rgb(205,185,37)" fg:x="14104089486" fg:w="22207638"/><text x="21.9353%" y="143.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::unbounded_shr (11,091,066 samples, 0.02%)</title><rect x="21.7195%" y="149" width="0.0171%" height="15" fill="rgb(238,207,15)" fg:x="14126297124" fg:w="11091066"/><text x="21.9695%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::unbounded_shr (11,091,066 samples, 0.02%)</title><rect x="21.7195%" y="133" width="0.0171%" height="15" fill="rgb(213,199,42)" fg:x="14126297124" fg:w="11091066"/><text x="21.9695%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::unchecked_shr (11,091,066 samples, 0.02%)</title><rect x="21.7195%" y="117" width="0.0171%" height="15" fill="rgb(235,201,11)" fg:x="14126297124" fg:w="11091066"/><text x="21.9695%" y="127.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push (16,627,569 samples, 0.03%)</title><rect x="21.7621%" y="133" width="0.0256%" height="15" fill="rgb(207,46,11)" fg:x="14154003204" fg:w="16627569"/><text x="22.0121%" y="143.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push (16,627,569 samples, 0.03%)</title><rect x="21.7621%" y="117" width="0.0256%" height="15" fill="rgb(241,35,35)" fg:x="14154003204" fg:w="16627569"/><text x="22.0121%" y="127.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::try_push (16,627,569 samples, 0.03%)</title><rect x="21.7621%" y="101" width="0.0256%" height="15" fill="rgb(243,32,47)" fg:x="14154003204" fg:w="16627569"/><text x="22.0121%" y="111.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (16,627,569 samples, 0.03%)</title><rect x="21.7621%" y="85" width="0.0256%" height="15" fill="rgb(247,202,23)" fg:x="14154003204" fg:w="16627569"/><text x="22.0121%" y="95.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as arrayvec::arrayvec_impl::ArrayVecImpl&gt;::set_len (11,083,131 samples, 0.02%)</title><rect x="21.7706%" y="69" width="0.0170%" height="15" fill="rgb(219,102,11)" fg:x="14159547642" fg:w="11083131"/><text x="22.0206%" y="79.50"></text></g><g><title>&lt;modular_bitfield::specifiers::B6 as modular_bitfield::Specifier&gt;::into_bytes (22,202,686 samples, 0.03%)</title><rect x="21.7876%" y="85" width="0.0341%" height="15" fill="rgb(243,110,44)" fg:x="14170630773" fg:w="22202686"/><text x="22.0376%" y="95.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (60,982,097 samples, 0.09%)</title><rect x="21.7365%" y="149" width="0.0938%" height="15" fill="rgb(222,74,54)" fg:x="14137388190" fg:w="60982097"/><text x="21.9865%" y="159.50"></text></g><g><title>shiro::engine::common::chess_move::Move::with_start (27,739,514 samples, 0.04%)</title><rect x="21.7876%" y="133" width="0.0427%" height="15" fill="rgb(216,99,12)" fg:x="14170630773" fg:w="27739514"/><text x="22.0376%" y="143.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_start (27,739,514 samples, 0.04%)</title><rect x="21.7876%" y="117" width="0.0427%" height="15" fill="rgb(226,22,26)" fg:x="14170630773" fg:w="27739514"/><text x="22.0376%" y="127.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_start_checked (27,739,514 samples, 0.04%)</title><rect x="21.7876%" y="101" width="0.0427%" height="15" fill="rgb(217,163,10)" fg:x="14170630773" fg:w="27739514"/><text x="22.0376%" y="111.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push (33,251,415 samples, 0.05%)</title><rect x="21.8303%" y="133" width="0.0511%" height="15" fill="rgb(213,25,53)" fg:x="14198370287" fg:w="33251415"/><text x="22.0803%" y="143.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push (33,251,415 samples, 0.05%)</title><rect x="21.8303%" y="117" width="0.0511%" height="15" fill="rgb(252,105,26)" fg:x="14198370287" fg:w="33251415"/><text x="22.0803%" y="127.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::try_push (33,251,415 samples, 0.05%)</title><rect x="21.8303%" y="101" width="0.0511%" height="15" fill="rgb(220,39,43)" fg:x="14198370287" fg:w="33251415"/><text x="22.0803%" y="111.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (11,084,177 samples, 0.02%)</title><rect x="21.8644%" y="85" width="0.0170%" height="15" fill="rgb(229,68,48)" fg:x="14220537525" fg:w="11084177"/><text x="22.1144%" y="95.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as arrayvec::arrayvec_impl::ArrayVecImpl&gt;::set_len (11,084,177 samples, 0.02%)</title><rect x="21.8644%" y="69" width="0.0170%" height="15" fill="rgb(252,8,32)" fg:x="14220537525" fg:w="11084177"/><text x="22.1144%" y="79.50"></text></g><g><title>shiro::engine::common::chess_move::Move::with_start (11,081,484 samples, 0.02%)</title><rect x="21.8814%" y="133" width="0.0170%" height="15" fill="rgb(223,20,43)" fg:x="14231621702" fg:w="11081484"/><text x="22.1314%" y="143.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_start (11,081,484 samples, 0.02%)</title><rect x="21.8814%" y="117" width="0.0170%" height="15" fill="rgb(229,81,49)" fg:x="14231621702" fg:w="11081484"/><text x="22.1314%" y="127.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_start_checked (11,081,484 samples, 0.02%)</title><rect x="21.8814%" y="101" width="0.0170%" height="15" fill="rgb(236,28,36)" fg:x="14231621702" fg:w="11081484"/><text x="22.1314%" y="111.50"></text></g><g><title>modular_bitfield::private::proc::write_specifier (11,081,484 samples, 0.02%)</title><rect x="21.8814%" y="85" width="0.0170%" height="15" fill="rgb(249,185,26)" fg:x="14231621702" fg:w="11081484"/><text x="22.1314%" y="95.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_all_moves (2,246,125,435 samples, 3.45%)</title><rect x="18.4620%" y="181" width="3.4535%" height="15" fill="rgb(249,174,33)" fg:x="12007658275" fg:w="2246125435"/><text x="18.7120%" y="191.50">shi..</text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_pawn_pushes (227,332,276 samples, 0.35%)</title><rect x="21.5659%" y="165" width="0.3495%" height="15" fill="rgb(233,201,37)" fg:x="14026451434" fg:w="227332276"/><text x="21.8159%" y="175.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_promotions (55,413,423 samples, 0.09%)</title><rect x="21.8303%" y="149" width="0.0852%" height="15" fill="rgb(221,78,26)" fg:x="14198370287" fg:w="55413423"/><text x="22.0803%" y="159.50"></text></g><g><title>shiro::engine::common::chess_move::Move::with_target (11,080,524 samples, 0.02%)</title><rect x="21.8984%" y="133" width="0.0170%" height="15" fill="rgb(250,127,30)" fg:x="14242703186" fg:w="11080524"/><text x="22.1484%" y="143.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_target (11,080,524 samples, 0.02%)</title><rect x="21.8984%" y="117" width="0.0170%" height="15" fill="rgb(230,49,44)" fg:x="14242703186" fg:w="11080524"/><text x="22.1484%" y="127.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_target_checked (11,080,524 samples, 0.02%)</title><rect x="21.8984%" y="101" width="0.0170%" height="15" fill="rgb(229,67,23)" fg:x="14242703186" fg:w="11080524"/><text x="22.1484%" y="111.50"></text></g><g><title>modular_bitfield::private::proc::write_specifier (11,080,524 samples, 0.02%)</title><rect x="21.8984%" y="85" width="0.0170%" height="15" fill="rgb(249,83,47)" fg:x="14242703186" fg:w="11080524"/><text x="22.1484%" y="95.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (11,104,854 samples, 0.02%)</title><rect x="22.6319%" y="133" width="0.0171%" height="15" fill="rgb(215,43,3)" fg:x="14719769965" fg:w="11104854"/><text x="22.8819%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (11,104,854 samples, 0.02%)</title><rect x="22.6319%" y="117" width="0.0171%" height="15" fill="rgb(238,154,13)" fg:x="14719769965" fg:w="11104854"/><text x="22.8819%" y="127.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_dg (33,311,252 samples, 0.05%)</title><rect x="22.6319%" y="149" width="0.0512%" height="15" fill="rgb(219,56,2)" fg:x="14719769965" fg:w="33311252"/><text x="22.8819%" y="159.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (22,206,398 samples, 0.03%)</title><rect x="22.6490%" y="133" width="0.0341%" height="15" fill="rgb(233,0,4)" fg:x="14730874819" fg:w="22206398"/><text x="22.8990%" y="143.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (11,107,225 samples, 0.02%)</title><rect x="22.6917%" y="133" width="0.0171%" height="15" fill="rgb(235,30,7)" fg:x="14758632760" fg:w="11107225"/><text x="22.9417%" y="143.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push (22,198,688 samples, 0.03%)</title><rect x="22.7258%" y="117" width="0.0341%" height="15" fill="rgb(250,79,13)" fg:x="14780816937" fg:w="22198688"/><text x="22.9758%" y="127.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push (22,198,688 samples, 0.03%)</title><rect x="22.7258%" y="101" width="0.0341%" height="15" fill="rgb(211,146,34)" fg:x="14780816937" fg:w="22198688"/><text x="22.9758%" y="111.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::try_push (22,198,688 samples, 0.03%)</title><rect x="22.7258%" y="85" width="0.0341%" height="15" fill="rgb(228,22,38)" fg:x="14780816937" fg:w="22198688"/><text x="22.9758%" y="95.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (16,646,349 samples, 0.03%)</title><rect x="22.7343%" y="69" width="0.0256%" height="15" fill="rgb(235,168,5)" fg:x="14786369276" fg:w="16646349"/><text x="22.9843%" y="79.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as arrayvec::arrayvec_impl::ArrayVecImpl&gt;::set_len (16,646,349 samples, 0.03%)</title><rect x="22.7343%" y="53" width="0.0256%" height="15" fill="rgb(221,155,16)" fg:x="14786369276" fg:w="16646349"/><text x="22.9843%" y="63.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (38,815,038 samples, 0.06%)</title><rect x="22.7088%" y="133" width="0.0597%" height="15" fill="rgb(215,215,53)" fg:x="14769739985" fg:w="38815038"/><text x="22.9588%" y="143.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_hv (55,456,924 samples, 0.09%)</title><rect x="22.6917%" y="149" width="0.0853%" height="15" fill="rgb(223,4,10)" fg:x="14758632760" fg:w="55456924"/><text x="22.9417%" y="159.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (11,102,214 samples, 0.02%)</title><rect x="22.7855%" y="133" width="0.0171%" height="15" fill="rgb(234,103,6)" fg:x="14819643525" fg:w="11102214"/><text x="23.0355%" y="143.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_king_normal (22,210,142 samples, 0.03%)</title><rect x="22.7769%" y="149" width="0.0341%" height="15" fill="rgb(227,97,0)" fg:x="14814089684" fg:w="22210142"/><text x="23.0269%" y="159.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (33,260,072 samples, 0.05%)</title><rect x="22.8368%" y="133" width="0.0511%" height="15" fill="rgb(234,150,53)" fg:x="14852986381" fg:w="33260072"/><text x="23.0868%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (33,260,072 samples, 0.05%)</title><rect x="22.8368%" y="117" width="0.0511%" height="15" fill="rgb(228,201,54)" fg:x="14852986381" fg:w="33260072"/><text x="23.0868%" y="127.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_knight (61,047,548 samples, 0.09%)</title><rect x="22.8111%" y="149" width="0.0939%" height="15" fill="rgb(222,22,37)" fg:x="14836299826" fg:w="61047548"/><text x="23.0611%" y="159.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (11,100,921 samples, 0.02%)</title><rect x="22.8879%" y="133" width="0.0171%" height="15" fill="rgb(237,53,32)" fg:x="14886246453" fg:w="11100921"/><text x="23.1379%" y="143.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_pawn_captures (11,103,756 samples, 0.02%)</title><rect x="22.9050%" y="149" width="0.0171%" height="15" fill="rgb(233,25,53)" fg:x="14897347374" fg:w="11103756"/><text x="23.1550%" y="159.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (11,103,756 samples, 0.02%)</title><rect x="22.9050%" y="133" width="0.0171%" height="15" fill="rgb(210,40,34)" fg:x="14897347374" fg:w="11103756"/><text x="23.1550%" y="143.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (11,107,516 samples, 0.02%)</title><rect x="22.9647%" y="133" width="0.0171%" height="15" fill="rgb(241,220,44)" fg:x="14936186759" fg:w="11107516"/><text x="23.2147%" y="143.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (11,107,516 samples, 0.02%)</title><rect x="22.9647%" y="117" width="0.0171%" height="15" fill="rgb(235,28,35)" fg:x="14936186759" fg:w="11107516"/><text x="23.2147%" y="127.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAndAssign&gt;::bitand_assign (11,102,280 samples, 0.02%)</title><rect x="22.9818%" y="133" width="0.0171%" height="15" fill="rgb(210,56,17)" fg:x="14947294275" fg:w="11102280"/><text x="23.2318%" y="143.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAndAssign&gt;::bitand_assign (11,102,280 samples, 0.02%)</title><rect x="22.9818%" y="117" width="0.0171%" height="15" fill="rgb(224,130,29)" fg:x="14947294275" fg:w="11102280"/><text x="23.2318%" y="127.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (33,311,802 samples, 0.05%)</title><rect x="22.9988%" y="133" width="0.0512%" height="15" fill="rgb(235,212,8)" fg:x="14958396555" fg:w="33311802"/><text x="23.2488%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (22,206,760 samples, 0.03%)</title><rect x="23.0159%" y="117" width="0.0341%" height="15" fill="rgb(223,33,50)" fg:x="14969501597" fg:w="22206760"/><text x="23.2659%" y="127.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push (33,234,748 samples, 0.05%)</title><rect x="23.1268%" y="117" width="0.0511%" height="15" fill="rgb(219,149,13)" fg:x="15041642681" fg:w="33234748"/><text x="23.3768%" y="127.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push (33,234,748 samples, 0.05%)</title><rect x="23.1268%" y="101" width="0.0511%" height="15" fill="rgb(250,156,29)" fg:x="15041642681" fg:w="33234748"/><text x="23.3768%" y="111.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::try_push (33,234,748 samples, 0.05%)</title><rect x="23.1268%" y="85" width="0.0511%" height="15" fill="rgb(216,193,19)" fg:x="15041642681" fg:w="33234748"/><text x="23.3768%" y="95.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (22,206,717 samples, 0.03%)</title><rect x="23.1438%" y="69" width="0.0341%" height="15" fill="rgb(216,135,14)" fg:x="15052670712" fg:w="22206717"/><text x="23.3938%" y="79.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as arrayvec::arrayvec_impl::ArrayVecImpl&gt;::set_len (22,206,717 samples, 0.03%)</title><rect x="23.1438%" y="53" width="0.0341%" height="15" fill="rgb(241,47,5)" fg:x="15052670712" fg:w="22206717"/><text x="23.3938%" y="63.50"></text></g><g><title>&lt;modular_bitfield::specifiers::B6 as modular_bitfield::Specifier&gt;::into_bytes (16,656,925 samples, 0.03%)</title><rect x="23.1779%" y="69" width="0.0256%" height="15" fill="rgb(233,42,35)" fg:x="15074877429" fg:w="16656925"/><text x="23.4279%" y="79.50"></text></g><g><title>shiro::engine::common::chess_move::Move::with_start (60,894,006 samples, 0.09%)</title><rect x="23.1779%" y="117" width="0.0936%" height="15" fill="rgb(231,13,6)" fg:x="15074877429" fg:w="60894006"/><text x="23.4279%" y="127.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_start (60,894,006 samples, 0.09%)</title><rect x="23.1779%" y="101" width="0.0936%" height="15" fill="rgb(207,181,40)" fg:x="15074877429" fg:w="60894006"/><text x="23.4279%" y="111.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_start_checked (60,894,006 samples, 0.09%)</title><rect x="23.1779%" y="85" width="0.0936%" height="15" fill="rgb(254,173,49)" fg:x="15074877429" fg:w="60894006"/><text x="23.4279%" y="95.50"></text></g><g><title>modular_bitfield::private::proc::write_specifier (44,237,081 samples, 0.07%)</title><rect x="23.2035%" y="69" width="0.0680%" height="15" fill="rgb(221,1,38)" fg:x="15091534354" fg:w="44237081"/><text x="23.4535%" y="79.50"></text></g><g><title>&lt;modular_bitfield::private::push_pop::PopBuffer&lt;u8&gt; as modular_bitfield::private::traits::PopBits&gt;::pop_bits (10,959,676 samples, 0.02%)</title><rect x="23.2547%" y="53" width="0.0169%" height="15" fill="rgb(206,124,46)" fg:x="15124811759" fg:w="10959676"/><text x="23.5047%" y="63.50"></text></g><g><title>core::num::&lt;impl u8&gt;::checked_shr (10,959,676 samples, 0.02%)</title><rect x="23.2547%" y="37" width="0.0169%" height="15" fill="rgb(249,21,11)" fg:x="15124811759" fg:w="10959676"/><text x="23.5047%" y="47.50"></text></g><g><title>[unknown] (15,157,931,335 samples, 23.31%)</title><rect x="0.0001%" y="197" width="23.3056%" height="15" fill="rgb(222,201,40)" fg:x="45809" fg:w="15157931335"/><text x="0.2501%" y="207.50">[unknown]</text></g><g><title>shiro::engine::move_gen::gen_moves (904,193,434 samples, 1.39%)</title><rect x="21.9155%" y="181" width="1.3902%" height="15" fill="rgb(235,61,29)" fg:x="14253783710" fg:w="904193434"/><text x="22.1655%" y="191.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_all_moves (443,760,121 samples, 0.68%)</title><rect x="22.6234%" y="165" width="0.6823%" height="15" fill="rgb(219,207,3)" fg:x="14714217023" fg:w="443760121"/><text x="22.8734%" y="175.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_pawn_pushes (249,526,014 samples, 0.38%)</title><rect x="22.9220%" y="149" width="0.3837%" height="15" fill="rgb(222,56,46)" fg:x="14908451130" fg:w="249526014"/><text x="23.1720%" y="159.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (166,268,787 samples, 0.26%)</title><rect x="23.0500%" y="133" width="0.2556%" height="15" fill="rgb(239,76,54)" fg:x="14991708357" fg:w="166268787"/><text x="23.3000%" y="143.50"></text></g><g><title>shiro::engine::common::chess_move::Move::with_target (22,205,709 samples, 0.03%)</title><rect x="23.2715%" y="117" width="0.0341%" height="15" fill="rgb(231,124,27)" fg:x="15135771435" fg:w="22205709"/><text x="23.5215%" y="127.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_target (22,205,709 samples, 0.03%)</title><rect x="23.2715%" y="101" width="0.0341%" height="15" fill="rgb(249,195,6)" fg:x="15135771435" fg:w="22205709"/><text x="23.5215%" y="111.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_target_checked (22,205,709 samples, 0.03%)</title><rect x="23.2715%" y="85" width="0.0341%" height="15" fill="rgb(237,174,47)" fg:x="15135771435" fg:w="22205709"/><text x="23.5215%" y="95.50"></text></g><g><title>modular_bitfield::private::proc::write_specifier (22,205,709 samples, 0.03%)</title><rect x="23.2715%" y="69" width="0.0341%" height="15" fill="rgb(206,201,31)" fg:x="15135771435" fg:w="22205709"/><text x="23.5215%" y="79.50"></text></g><g><title>core::core_arch::x86_64::bmi2::_pext_u64 (699,521,883 samples, 1.08%)</title><rect x="23.3057%" y="197" width="1.0755%" height="15" fill="rgb(231,57,52)" fg:x="15157977144" fg:w="699521883"/><text x="23.5557%" y="207.50"></text></g><g><title>core::cmp::PartialEq::ne (122,032,341 samples, 0.19%)</title><rect x="25.1480%" y="165" width="0.1876%" height="15" fill="rgb(248,177,22)" fg:x="16356212974" fg:w="122032341"/><text x="25.3980%" y="175.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (122,032,341 samples, 0.19%)</title><rect x="25.1480%" y="149" width="0.1876%" height="15" fill="rgb(215,211,37)" fg:x="16356212974" fg:w="122032341"/><text x="25.3980%" y="159.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (73,012,545 samples, 0.11%)</title><rect x="25.3356%" y="165" width="0.1123%" height="15" fill="rgb(241,128,51)" fg:x="16478245315" fg:w="73012545"/><text x="25.5856%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (50,885,799 samples, 0.08%)</title><rect x="25.3696%" y="149" width="0.0782%" height="15" fill="rgb(227,165,31)" fg:x="16500372061" fg:w="50885799"/><text x="25.6196%" y="159.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push (83,029,919 samples, 0.13%)</title><rect x="25.7108%" y="149" width="0.1277%" height="15" fill="rgb(228,167,24)" fg:x="16722247622" fg:w="83029919"/><text x="25.9608%" y="159.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push (83,029,919 samples, 0.13%)</title><rect x="25.7108%" y="133" width="0.1277%" height="15" fill="rgb(228,143,12)" fg:x="16722247622" fg:w="83029919"/><text x="25.9608%" y="143.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::try_push (83,029,919 samples, 0.13%)</title><rect x="25.7108%" y="117" width="0.1277%" height="15" fill="rgb(249,149,8)" fg:x="16722247622" fg:w="83029919"/><text x="25.9608%" y="127.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (71,949,878 samples, 0.11%)</title><rect x="25.7278%" y="101" width="0.1106%" height="15" fill="rgb(243,35,44)" fg:x="16733327663" fg:w="71949878"/><text x="25.9778%" y="111.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as arrayvec::arrayvec_impl::ArrayVecImpl&gt;::set_len (71,949,878 samples, 0.11%)</title><rect x="25.7278%" y="85" width="0.1106%" height="15" fill="rgb(246,89,9)" fg:x="16733327663" fg:w="71949878"/><text x="25.9778%" y="95.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (287,193,656 samples, 0.44%)</title><rect x="25.4479%" y="165" width="0.4416%" height="15" fill="rgb(233,213,13)" fg:x="16551257860" fg:w="287193656"/><text x="25.6979%" y="175.50"></text></g><g><title>shiro::engine::common::chess_move::Move::with_target (33,173,975 samples, 0.05%)</title><rect x="25.8384%" y="149" width="0.0510%" height="15" fill="rgb(233,141,41)" fg:x="16805277541" fg:w="33173975"/><text x="26.0884%" y="159.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_target (33,173,975 samples, 0.05%)</title><rect x="25.8384%" y="133" width="0.0510%" height="15" fill="rgb(239,167,4)" fg:x="16805277541" fg:w="33173975"/><text x="26.0884%" y="143.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_target_checked (33,173,975 samples, 0.05%)</title><rect x="25.8384%" y="117" width="0.0510%" height="15" fill="rgb(209,217,16)" fg:x="16805277541" fg:w="33173975"/><text x="26.0884%" y="127.50"></text></g><g><title>modular_bitfield::private::proc::write_specifier (33,173,975 samples, 0.05%)</title><rect x="25.8384%" y="101" width="0.0510%" height="15" fill="rgb(219,88,35)" fg:x="16805277541" fg:w="33173975"/><text x="26.0884%" y="111.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_dg (576,367,641 samples, 0.89%)</title><rect x="25.0374%" y="181" width="0.8862%" height="15" fill="rgb(220,193,23)" fg:x="16284256220" fg:w="576367641"/><text x="25.2874%" y="191.50"></text></g><g><title>shiro::engine::move_gen::masks::pext_dg_lookup (22,172,345 samples, 0.03%)</title><rect x="25.8894%" y="165" width="0.0341%" height="15" fill="rgb(230,90,52)" fg:x="16838451516" fg:w="22172345"/><text x="26.1394%" y="175.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_enpassant (16,604,580 samples, 0.03%)</title><rect x="25.9235%" y="181" width="0.0255%" height="15" fill="rgb(252,106,19)" fg:x="16860623861" fg:w="16604580"/><text x="26.1735%" y="191.50"></text></g><g><title>core::cmp::PartialEq::ne (353,998,269 samples, 0.54%)</title><rect x="27.4461%" y="165" width="0.5443%" height="15" fill="rgb(206,74,20)" fg:x="17850929876" fg:w="353998269"/><text x="27.6961%" y="175.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (353,998,269 samples, 0.54%)</title><rect x="27.4461%" y="149" width="0.5443%" height="15" fill="rgb(230,138,44)" fg:x="17850929876" fg:w="353998269"/><text x="27.6961%" y="159.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (583,088,572 samples, 0.90%)</title><rect x="27.9904%" y="165" width="0.8965%" height="15" fill="rgb(235,182,43)" fg:x="18204928145" fg:w="583088572"/><text x="28.2404%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (477,638,199 samples, 0.73%)</title><rect x="28.1526%" y="149" width="0.7344%" height="15" fill="rgb(242,16,51)" fg:x="18310378518" fg:w="477638199"/><text x="28.4026%" y="159.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push (1,880,428,449 samples, 2.89%)</title><rect x="35.3318%" y="149" width="2.8912%" height="15" fill="rgb(248,9,4)" fg:x="22979730639" fg:w="1880428449"/><text x="35.5818%" y="159.50">ar..</text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push (1,880,428,449 samples, 2.89%)</title><rect x="35.3318%" y="133" width="2.8912%" height="15" fill="rgb(210,31,22)" fg:x="22979730639" fg:w="1880428449"/><text x="35.5818%" y="143.50">ar..</text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::try_push (1,880,428,449 samples, 2.89%)</title><rect x="35.3318%" y="117" width="2.8912%" height="15" fill="rgb(239,54,39)" fg:x="22979730639" fg:w="1880428449"/><text x="35.5818%" y="127.50">ar..</text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (1,508,407,771 samples, 2.32%)</title><rect x="35.9038%" y="101" width="2.3192%" height="15" fill="rgb(230,99,41)" fg:x="23351751317" fg:w="1508407771"/><text x="36.1538%" y="111.50">a..</text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as arrayvec::arrayvec_impl::ArrayVecImpl&gt;::set_len (1,508,407,771 samples, 2.32%)</title><rect x="35.9038%" y="85" width="2.3192%" height="15" fill="rgb(253,106,12)" fg:x="23351751317" fg:w="1508407771"/><text x="36.1538%" y="95.50">&lt;..</text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (6,790,419,828 samples, 10.44%)</title><rect x="28.8869%" y="165" width="10.4404%" height="15" fill="rgb(213,46,41)" fg:x="18788016717" fg:w="6790419828"/><text x="29.1369%" y="175.50">shiro::engine::..</text></g><g><title>shiro::engine::common::chess_move::Move::with_target (718,277,457 samples, 1.10%)</title><rect x="38.2230%" y="149" width="1.1044%" height="15" fill="rgb(215,133,35)" fg:x="24860159088" fg:w="718277457"/><text x="38.4730%" y="159.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_target (718,277,457 samples, 1.10%)</title><rect x="38.2230%" y="133" width="1.1044%" height="15" fill="rgb(213,28,5)" fg:x="24860159088" fg:w="718277457"/><text x="38.4730%" y="143.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_target_checked (718,277,457 samples, 1.10%)</title><rect x="38.2230%" y="117" width="1.1044%" height="15" fill="rgb(215,77,49)" fg:x="24860159088" fg:w="718277457"/><text x="38.4730%" y="127.50"></text></g><g><title>modular_bitfield::private::proc::write_specifier (718,277,457 samples, 1.10%)</title><rect x="38.2230%" y="101" width="1.1044%" height="15" fill="rgb(248,100,22)" fg:x="24860159088" fg:w="718277457"/><text x="38.4730%" y="111.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_hv (8,913,745,768 samples, 13.71%)</title><rect x="25.9491%" y="181" width="13.7051%" height="15" fill="rgb(208,67,9)" fg:x="16877228441" fg:w="8913745768"/><text x="26.1991%" y="191.50">shiro::engine::move_g..</text></g><g><title>shiro::engine::move_gen::masks::pext_hv_lookup (212,537,664 samples, 0.33%)</title><rect x="39.3273%" y="165" width="0.3268%" height="15" fill="rgb(219,133,21)" fg:x="25578436545" fg:w="212537664"/><text x="39.5773%" y="175.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_king_castle (11,107,559 samples, 0.02%)</title><rect x="39.6541%" y="181" width="0.0171%" height="15" fill="rgb(246,46,29)" fg:x="25790974209" fg:w="11107559"/><text x="39.9041%" y="191.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (11,107,559 samples, 0.02%)</title><rect x="39.6541%" y="165" width="0.0171%" height="15" fill="rgb(246,185,52)" fg:x="25790974209" fg:w="11107559"/><text x="39.9041%" y="175.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (11,105,344 samples, 0.02%)</title><rect x="39.7480%" y="165" width="0.0171%" height="15" fill="rgb(252,136,11)" fg:x="25852036699" fg:w="11105344"/><text x="39.9980%" y="175.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (11,105,344 samples, 0.02%)</title><rect x="39.7480%" y="149" width="0.0171%" height="15" fill="rgb(219,138,53)" fg:x="25852036699" fg:w="11105344"/><text x="39.9980%" y="159.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::leading_zeros (11,284,490 samples, 0.02%)</title><rect x="39.7736%" y="165" width="0.0174%" height="15" fill="rgb(211,51,23)" fg:x="25868683939" fg:w="11284490"/><text x="40.0236%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (11,284,490 samples, 0.02%)</title><rect x="39.7736%" y="149" width="0.0174%" height="15" fill="rgb(247,221,28)" fg:x="25868683939" fg:w="11284490"/><text x="40.0236%" y="159.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (277,613,978 samples, 0.43%)</title><rect x="39.7910%" y="165" width="0.4268%" height="15" fill="rgb(251,222,45)" fg:x="25879968429" fg:w="277613978"/><text x="40.0410%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (255,386,744 samples, 0.39%)</title><rect x="39.8251%" y="149" width="0.3927%" height="15" fill="rgb(217,162,53)" fg:x="25902195663" fg:w="255386744"/><text x="40.0751%" y="159.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push (238,682,979 samples, 0.37%)</title><rect x="41.1226%" y="149" width="0.3670%" height="15" fill="rgb(229,93,14)" fg:x="26746063843" fg:w="238682979"/><text x="41.3726%" y="159.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push (238,682,979 samples, 0.37%)</title><rect x="41.1226%" y="133" width="0.3670%" height="15" fill="rgb(209,67,49)" fg:x="26746063843" fg:w="238682979"/><text x="41.3726%" y="143.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::try_push (238,682,979 samples, 0.37%)</title><rect x="41.1226%" y="117" width="0.3670%" height="15" fill="rgb(213,87,29)" fg:x="26746063843" fg:w="238682979"/><text x="41.3726%" y="127.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (205,372,690 samples, 0.32%)</title><rect x="41.1738%" y="101" width="0.3158%" height="15" fill="rgb(205,151,52)" fg:x="26779374132" fg:w="205372690"/><text x="41.4238%" y="111.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as arrayvec::arrayvec_impl::ArrayVecImpl&gt;::set_len (205,372,690 samples, 0.32%)</title><rect x="41.1738%" y="85" width="0.3158%" height="15" fill="rgb(253,215,39)" fg:x="26779374132" fg:w="205372690"/><text x="41.4238%" y="95.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (988,144,970 samples, 1.52%)</title><rect x="40.2178%" y="165" width="1.5193%" height="15" fill="rgb(221,220,41)" fg:x="26157582407" fg:w="988144970"/><text x="40.4678%" y="175.50"></text></g><g><title>shiro::engine::common::chess_move::Move::with_target (160,980,555 samples, 0.25%)</title><rect x="41.4896%" y="149" width="0.2475%" height="15" fill="rgb(218,133,21)" fg:x="26984746822" fg:w="160980555"/><text x="41.7396%" y="159.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_target (160,980,555 samples, 0.25%)</title><rect x="41.4896%" y="133" width="0.2475%" height="15" fill="rgb(221,193,43)" fg:x="26984746822" fg:w="160980555"/><text x="41.7396%" y="143.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_target_checked (160,980,555 samples, 0.25%)</title><rect x="41.4896%" y="117" width="0.2475%" height="15" fill="rgb(240,128,52)" fg:x="26984746822" fg:w="160980555"/><text x="41.7396%" y="127.50"></text></g><g><title>modular_bitfield::private::proc::write_specifier (160,980,555 samples, 0.25%)</title><rect x="41.4896%" y="101" width="0.2475%" height="15" fill="rgb(253,114,12)" fg:x="26984746822" fg:w="160980555"/><text x="41.7396%" y="111.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_king_normal (1,360,294,470 samples, 2.09%)</title><rect x="39.6712%" y="181" width="2.0915%" height="15" fill="rgb(215,223,47)" fg:x="25802081768" fg:w="1360294470"/><text x="39.9212%" y="191.50">s..</text></g><g><title>shiro::engine::move_gen::masks::king_lookup (16,648,861 samples, 0.03%)</title><rect x="41.7371%" y="165" width="0.0256%" height="15" fill="rgb(248,225,23)" fg:x="27145727377" fg:w="16648861"/><text x="41.9871%" y="175.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitOr&gt;::bitor (11,110,213 samples, 0.02%)</title><rect x="41.7884%" y="165" width="0.0171%" height="15" fill="rgb(250,108,0)" fg:x="27179112469" fg:w="11110213"/><text x="42.0384%" y="175.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitOr&gt;::bitor (11,110,213 samples, 0.02%)</title><rect x="41.7884%" y="149" width="0.0171%" height="15" fill="rgb(228,208,7)" fg:x="27179112469" fg:w="11110213"/><text x="42.0384%" y="159.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::Not&gt;::not (77,845,742 samples, 0.12%)</title><rect x="41.8055%" y="165" width="0.1197%" height="15" fill="rgb(244,45,10)" fg:x="27190222682" fg:w="77845742"/><text x="42.0555%" y="175.50"></text></g><g><title>&lt;u64 as core::ops::bit::Not&gt;::not (77,845,742 samples, 0.12%)</title><rect x="41.8055%" y="149" width="0.1197%" height="15" fill="rgb(207,125,25)" fg:x="27190222682" fg:w="77845742"/><text x="42.0555%" y="159.50"></text></g><g><title>core::cmp::PartialEq::ne (11,109,796 samples, 0.02%)</title><rect x="41.9252%" y="165" width="0.0171%" height="15" fill="rgb(210,195,18)" fg:x="27268068424" fg:w="11109796"/><text x="42.1752%" y="175.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (11,109,796 samples, 0.02%)</title><rect x="41.9252%" y="149" width="0.0171%" height="15" fill="rgb(249,80,12)" fg:x="27268068424" fg:w="11109796"/><text x="42.1752%" y="159.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (22,485,111 samples, 0.03%)</title><rect x="41.9423%" y="165" width="0.0346%" height="15" fill="rgb(221,65,9)" fg:x="27279178220" fg:w="22485111"/><text x="42.1923%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (16,474,729 samples, 0.03%)</title><rect x="41.9515%" y="149" width="0.0253%" height="15" fill="rgb(235,49,36)" fg:x="27285188602" fg:w="16474729"/><text x="42.2015%" y="159.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_knight (167,892,085 samples, 0.26%)</title><rect x="41.7627%" y="181" width="0.2581%" height="15" fill="rgb(225,32,20)" fg:x="27162376238" fg:w="167892085"/><text x="42.0127%" y="191.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (28,604,992 samples, 0.04%)</title><rect x="41.9768%" y="165" width="0.0440%" height="15" fill="rgb(215,141,46)" fg:x="27301663331" fg:w="28604992"/><text x="42.2268%" y="175.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (72,195,176 samples, 0.11%)</title><rect x="42.3492%" y="165" width="0.1110%" height="15" fill="rgb(250,160,47)" fg:x="27543831527" fg:w="72195176"/><text x="42.5992%" y="175.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (72,195,176 samples, 0.11%)</title><rect x="42.3492%" y="149" width="0.1110%" height="15" fill="rgb(216,222,40)" fg:x="27543831527" fg:w="72195176"/><text x="42.5992%" y="159.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitOr&gt;::bitor (11,076,298 samples, 0.02%)</title><rect x="42.4602%" y="165" width="0.0170%" height="15" fill="rgb(234,217,39)" fg:x="27616026703" fg:w="11076298"/><text x="42.7102%" y="175.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitOr&gt;::bitor (11,076,298 samples, 0.02%)</title><rect x="42.4602%" y="149" width="0.0170%" height="15" fill="rgb(207,178,40)" fg:x="27616026703" fg:w="11076298"/><text x="42.7102%" y="159.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::Not&gt;::not (27,756,431 samples, 0.04%)</title><rect x="42.4772%" y="165" width="0.0427%" height="15" fill="rgb(221,136,13)" fg:x="27627103001" fg:w="27756431"/><text x="42.7272%" y="175.50"></text></g><g><title>&lt;u64 as core::ops::bit::Not&gt;::not (27,756,431 samples, 0.04%)</title><rect x="42.4772%" y="149" width="0.0427%" height="15" fill="rgb(249,199,10)" fg:x="27627103001" fg:w="27756431"/><text x="42.7272%" y="159.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::Shr&lt;__RhsT&gt;&gt;::shr (11,099,645 samples, 0.02%)</title><rect x="42.5199%" y="165" width="0.0171%" height="15" fill="rgb(249,222,13)" fg:x="27654859432" fg:w="11099645"/><text x="42.7699%" y="175.50"></text></g><g><title>&lt;u64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (11,099,645 samples, 0.02%)</title><rect x="42.5199%" y="149" width="0.0171%" height="15" fill="rgb(244,185,38)" fg:x="27654859432" fg:w="11099645"/><text x="42.7699%" y="159.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_pawn_captures (352,320,205 samples, 0.54%)</title><rect x="42.0208%" y="181" width="0.5417%" height="15" fill="rgb(236,202,9)" fg:x="27330268323" fg:w="352320205"/><text x="42.2708%" y="191.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (11,092,188 samples, 0.02%)</title><rect x="42.5455%" y="165" width="0.0171%" height="15" fill="rgb(250,229,37)" fg:x="27671496340" fg:w="11092188"/><text x="42.7955%" y="175.50"></text></g><g><title>shiro::engine::common::chess_move::Move::with_start (11,092,188 samples, 0.02%)</title><rect x="42.5455%" y="149" width="0.0171%" height="15" fill="rgb(206,174,23)" fg:x="27671496340" fg:w="11092188"/><text x="42.7955%" y="159.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_start (11,092,188 samples, 0.02%)</title><rect x="42.5455%" y="133" width="0.0171%" height="15" fill="rgb(211,33,43)" fg:x="27671496340" fg:w="11092188"/><text x="42.7955%" y="143.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_start_checked (11,092,188 samples, 0.02%)</title><rect x="42.5455%" y="117" width="0.0171%" height="15" fill="rgb(245,58,50)" fg:x="27671496340" fg:w="11092188"/><text x="42.7955%" y="127.50"></text></g><g><title>modular_bitfield::private::proc::write_specifier (11,092,188 samples, 0.02%)</title><rect x="42.5455%" y="101" width="0.0171%" height="15" fill="rgb(244,68,36)" fg:x="27671496340" fg:w="11092188"/><text x="42.7955%" y="111.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (200,141,499 samples, 0.31%)</title><rect x="42.8783%" y="165" width="0.3077%" height="15" fill="rgb(232,229,15)" fg:x="27887999952" fg:w="200141499"/><text x="43.1283%" y="175.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (200,141,499 samples, 0.31%)</title><rect x="42.8783%" y="149" width="0.3077%" height="15" fill="rgb(254,30,23)" fg:x="27887999952" fg:w="200141499"/><text x="43.1283%" y="159.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAndAssign&gt;::bitand_assign (127,695,001 samples, 0.20%)</title><rect x="43.1861%" y="165" width="0.1963%" height="15" fill="rgb(235,160,14)" fg:x="28088141451" fg:w="127695001"/><text x="43.4361%" y="175.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAndAssign&gt;::bitand_assign (127,695,001 samples, 0.20%)</title><rect x="43.1861%" y="149" width="0.1963%" height="15" fill="rgb(212,155,44)" fg:x="28088141451" fg:w="127695001"/><text x="43.4361%" y="159.50"></text></g><g><title>core::cmp::PartialEq::ne (11,075,835 samples, 0.02%)</title><rect x="43.3824%" y="165" width="0.0170%" height="15" fill="rgb(226,2,50)" fg:x="28215836452" fg:w="11075835"/><text x="43.6324%" y="175.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (11,075,835 samples, 0.02%)</title><rect x="43.3824%" y="149" width="0.0170%" height="15" fill="rgb(234,177,6)" fg:x="28215836452" fg:w="11075835"/><text x="43.6324%" y="159.50"></text></g><g><title>shiro::engine::common::constants::rank_from_pos (88,846,883 samples, 0.14%)</title><rect x="43.3994%" y="165" width="0.1366%" height="15" fill="rgb(217,24,9)" fg:x="28226912287" fg:w="88846883"/><text x="43.6494%" y="175.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (22,161,699 samples, 0.03%)</title><rect x="43.5360%" y="165" width="0.0341%" height="15" fill="rgb(220,13,46)" fg:x="28315759170" fg:w="22161699"/><text x="43.7860%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (16,617,153 samples, 0.03%)</title><rect x="43.5446%" y="149" width="0.0255%" height="15" fill="rgb(239,221,27)" fg:x="28321303716" fg:w="16617153"/><text x="43.7946%" y="159.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::unbounded_shr (55,532,584 samples, 0.09%)</title><rect x="43.5786%" y="165" width="0.0854%" height="15" fill="rgb(222,198,25)" fg:x="28343474050" fg:w="55532584"/><text x="43.8286%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::unbounded_shr (55,532,584 samples, 0.09%)</title><rect x="43.5786%" y="149" width="0.0854%" height="15" fill="rgb(211,99,13)" fg:x="28343474050" fg:w="55532584"/><text x="43.8286%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::unchecked_shr (55,532,584 samples, 0.09%)</title><rect x="43.5786%" y="133" width="0.0854%" height="15" fill="rgb(232,111,31)" fg:x="28343474050" fg:w="55532584"/><text x="43.8286%" y="143.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push (11,084,865 samples, 0.02%)</title><rect x="43.6640%" y="149" width="0.0170%" height="15" fill="rgb(245,82,37)" fg:x="28399006634" fg:w="11084865"/><text x="43.9140%" y="159.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push (11,084,865 samples, 0.02%)</title><rect x="43.6640%" y="133" width="0.0170%" height="15" fill="rgb(227,149,46)" fg:x="28399006634" fg:w="11084865"/><text x="43.9140%" y="143.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::try_push (11,084,865 samples, 0.02%)</title><rect x="43.6640%" y="117" width="0.0170%" height="15" fill="rgb(218,36,50)" fg:x="28399006634" fg:w="11084865"/><text x="43.9140%" y="127.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (22,174,250 samples, 0.03%)</title><rect x="43.6640%" y="165" width="0.0341%" height="15" fill="rgb(226,80,48)" fg:x="28399006634" fg:w="22174250"/><text x="43.9140%" y="175.50"></text></g><g><title>shiro::engine::common::chess_move::Move::with_start (11,089,385 samples, 0.02%)</title><rect x="43.6811%" y="149" width="0.0171%" height="15" fill="rgb(238,224,15)" fg:x="28410091499" fg:w="11089385"/><text x="43.9311%" y="159.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_start (11,089,385 samples, 0.02%)</title><rect x="43.6811%" y="133" width="0.0171%" height="15" fill="rgb(241,136,10)" fg:x="28410091499" fg:w="11089385"/><text x="43.9311%" y="143.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_start_checked (11,089,385 samples, 0.02%)</title><rect x="43.6811%" y="117" width="0.0171%" height="15" fill="rgb(208,32,45)" fg:x="28410091499" fg:w="11089385"/><text x="43.9311%" y="127.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_all_moves (12,580,294,938 samples, 19.34%)</title><rect x="24.3812%" y="197" width="19.3424%" height="15" fill="rgb(207,135,9)" fg:x="15857499027" fg:w="12580294938"/><text x="24.6312%" y="207.50">shiro::engine::move_gen::MoveG..</text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_pawn_pushes (755,205,437 samples, 1.16%)</title><rect x="42.5625%" y="181" width="1.1611%" height="15" fill="rgb(206,86,44)" fg:x="27682588528" fg:w="755205437"/><text x="42.8125%" y="191.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_promotions (16,613,081 samples, 0.03%)</title><rect x="43.6981%" y="165" width="0.0255%" height="15" fill="rgb(245,177,15)" fg:x="28421180884" fg:w="16613081"/><text x="43.9481%" y="175.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push (11,070,949 samples, 0.02%)</title><rect x="43.7066%" y="149" width="0.0170%" height="15" fill="rgb(206,64,50)" fg:x="28426723016" fg:w="11070949"/><text x="43.9566%" y="159.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push (11,070,949 samples, 0.02%)</title><rect x="43.7066%" y="133" width="0.0170%" height="15" fill="rgb(234,36,40)" fg:x="28426723016" fg:w="11070949"/><text x="43.9566%" y="143.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::try_push (11,070,949 samples, 0.02%)</title><rect x="43.7066%" y="117" width="0.0170%" height="15" fill="rgb(213,64,8)" fg:x="28426723016" fg:w="11070949"/><text x="43.9566%" y="127.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitOr&gt;::bitor (1,326,430,101 samples, 2.04%)</title><rect x="43.9889%" y="181" width="2.0394%" height="15" fill="rgb(210,75,36)" fg:x="28610309940" fg:w="1326430101"/><text x="44.2389%" y="191.50">&lt;..</text></g><g><title>&lt;u64 as core::ops::bit::BitOr&gt;::bitor (1,326,430,101 samples, 2.04%)</title><rect x="43.9889%" y="165" width="2.0394%" height="15" fill="rgb(229,88,21)" fg:x="28610309940" fg:w="1326430101"/><text x="44.2389%" y="175.50">&lt;..</text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (11,096,340 samples, 0.02%)</title><rect x="46.1748%" y="165" width="0.0171%" height="15" fill="rgb(252,204,47)" fg:x="30032023764" fg:w="11096340"/><text x="46.4248%" y="175.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (11,096,340 samples, 0.02%)</title><rect x="46.1748%" y="149" width="0.0171%" height="15" fill="rgb(208,77,27)" fg:x="30032023764" fg:w="11096340"/><text x="46.4248%" y="159.50"></text></g><g><title>core::cmp::PartialEq::ne (38,824,024 samples, 0.06%)</title><rect x="46.1919%" y="165" width="0.0597%" height="15" fill="rgb(221,76,26)" fg:x="30043120104" fg:w="38824024"/><text x="46.4419%" y="175.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (38,824,024 samples, 0.06%)</title><rect x="46.1919%" y="149" width="0.0597%" height="15" fill="rgb(225,139,18)" fg:x="30043120104" fg:w="38824024"/><text x="46.4419%" y="159.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_check_and_pin_masks (170,071,689 samples, 0.26%)</title><rect x="46.0283%" y="181" width="0.2615%" height="15" fill="rgb(230,137,11)" fg:x="29936740041" fg:w="170071689"/><text x="46.2783%" y="191.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (19,313,700 samples, 0.03%)</title><rect x="46.2601%" y="165" width="0.0297%" height="15" fill="rgb(212,28,1)" fg:x="30087498030" fg:w="19313700"/><text x="46.5101%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (13,786,661 samples, 0.02%)</title><rect x="46.2686%" y="149" width="0.0212%" height="15" fill="rgb(248,164,17)" fg:x="30093025069" fg:w="13786661"/><text x="46.5186%" y="159.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitOrAssign&gt;::bitor_assign (16,636,700 samples, 0.03%)</title><rect x="46.3069%" y="165" width="0.0256%" height="15" fill="rgb(222,171,42)" fg:x="30117900960" fg:w="16636700"/><text x="46.5569%" y="175.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitOrAssign&gt;::bitor_assign (16,636,700 samples, 0.03%)</title><rect x="46.3069%" y="149" width="0.0256%" height="15" fill="rgb(243,84,45)" fg:x="30117900960" fg:w="16636700"/><text x="46.5569%" y="159.50"></text></g><g><title>core::cmp::PartialEq::ne (144,234,892 samples, 0.22%)</title><rect x="46.3324%" y="165" width="0.2218%" height="15" fill="rgb(252,49,23)" fg:x="30134537660" fg:w="144234892"/><text x="46.5824%" y="175.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (144,234,892 samples, 0.22%)</title><rect x="46.3324%" y="149" width="0.2218%" height="15" fill="rgb(215,19,7)" fg:x="30134537660" fg:w="144234892"/><text x="46.5824%" y="159.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::leading_zeros (12,839,696 samples, 0.02%)</title><rect x="46.5542%" y="165" width="0.0197%" height="15" fill="rgb(238,81,41)" fg:x="30278772552" fg:w="12839696"/><text x="46.8042%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (12,839,696 samples, 0.02%)</title><rect x="46.5542%" y="149" width="0.0197%" height="15" fill="rgb(210,199,37)" fg:x="30278772552" fg:w="12839696"/><text x="46.8042%" y="159.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (38,830,248 samples, 0.06%)</title><rect x="46.5739%" y="165" width="0.0597%" height="15" fill="rgb(244,192,49)" fg:x="30291612248" fg:w="38830248"/><text x="46.8239%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (22,191,171 samples, 0.03%)</title><rect x="46.5995%" y="149" width="0.0341%" height="15" fill="rgb(226,211,11)" fg:x="30308251325" fg:w="22191171"/><text x="46.8495%" y="159.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::unbounded_shr (11,095,968 samples, 0.02%)</title><rect x="46.6422%" y="165" width="0.0171%" height="15" fill="rgb(236,162,54)" fg:x="30335988838" fg:w="11095968"/><text x="46.8922%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::unbounded_shr (11,095,968 samples, 0.02%)</title><rect x="46.6422%" y="149" width="0.0171%" height="15" fill="rgb(220,229,9)" fg:x="30335988838" fg:w="11095968"/><text x="46.8922%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::unchecked_shr (11,095,968 samples, 0.02%)</title><rect x="46.6422%" y="133" width="0.0171%" height="15" fill="rgb(250,87,22)" fg:x="30335988838" fg:w="11095968"/><text x="46.8922%" y="143.50"></text></g><g><title>shiro::engine::move_gen::masks::pext_dg_lookup (16,621,509 samples, 0.03%)</title><rect x="46.6592%" y="165" width="0.0256%" height="15" fill="rgb(239,43,17)" fg:x="30347084806" fg:w="16621509"/><text x="46.9092%" y="175.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::new (2,025,797,171 samples, 3.11%)</title><rect x="43.7237%" y="197" width="3.1147%" height="15" fill="rgb(231,177,25)" fg:x="28437793965" fg:w="2025797171"/><text x="43.9737%" y="207.50">shi..</text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_seen_by_enemy (356,779,406 samples, 0.55%)</title><rect x="46.2898%" y="181" width="0.5486%" height="15" fill="rgb(219,179,1)" fg:x="30106811730" fg:w="356779406"/><text x="46.5398%" y="191.50"></text></g><g><title>shiro::engine::move_gen::masks::pext_hv_lookup (99,884,821 samples, 0.15%)</title><rect x="46.6848%" y="165" width="0.1536%" height="15" fill="rgb(238,219,53)" fg:x="30363706315" fg:w="99884821"/><text x="46.9348%" y="175.50"></text></g><g><title>core::cmp::PartialEq::ne (22,158,243 samples, 0.03%)</title><rect x="53.8835%" y="149" width="0.0341%" height="15" fill="rgb(232,167,36)" fg:x="35045767763" fg:w="22158243"/><text x="54.1335%" y="159.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (22,158,243 samples, 0.03%)</title><rect x="53.8835%" y="133" width="0.0341%" height="15" fill="rgb(244,19,51)" fg:x="35045767763" fg:w="22158243"/><text x="54.1335%" y="143.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (27,892,914 samples, 0.04%)</title><rect x="53.9176%" y="149" width="0.0429%" height="15" fill="rgb(224,6,22)" fg:x="35067926006" fg:w="27892914"/><text x="54.1676%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (27,892,914 samples, 0.04%)</title><rect x="53.9176%" y="133" width="0.0429%" height="15" fill="rgb(224,145,5)" fg:x="35067926006" fg:w="27892914"/><text x="54.1676%" y="143.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (38,778,334 samples, 0.06%)</title><rect x="53.9605%" y="149" width="0.0596%" height="15" fill="rgb(234,130,49)" fg:x="35095818920" fg:w="38778334"/><text x="54.2105%" y="159.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_dg (132,475,899 samples, 0.20%)</title><rect x="53.8580%" y="165" width="0.2037%" height="15" fill="rgb(254,6,2)" fg:x="35029153112" fg:w="132475899"/><text x="54.1080%" y="175.50"></text></g><g><title>shiro::engine::move_gen::masks::pext_dg_lookup (27,031,757 samples, 0.04%)</title><rect x="54.0201%" y="149" width="0.0416%" height="15" fill="rgb(208,96,46)" fg:x="35134597254" fg:w="27031757"/><text x="54.2701%" y="159.50"></text></g><g><title>core::cmp::PartialEq::ne (49,917,113 samples, 0.08%)</title><rect x="54.2509%" y="149" width="0.0767%" height="15" fill="rgb(239,3,39)" fg:x="35284711636" fg:w="49917113"/><text x="54.5009%" y="159.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::cmp::PartialEq&lt;u64&gt;&gt;::eq (49,917,113 samples, 0.08%)</title><rect x="54.2509%" y="133" width="0.0767%" height="15" fill="rgb(233,210,1)" fg:x="35284711636" fg:w="49917113"/><text x="54.5009%" y="143.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (66,596,724 samples, 0.10%)</title><rect x="54.3277%" y="149" width="0.1024%" height="15" fill="rgb(244,137,37)" fg:x="35334628749" fg:w="66596724"/><text x="54.5777%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (66,596,723 samples, 0.10%)</title><rect x="54.3277%" y="133" width="0.1024%" height="15" fill="rgb(240,136,2)" fg:x="35334628750" fg:w="66596723"/><text x="54.5777%" y="143.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push (205,270,090 samples, 0.32%)</title><rect x="55.3123%" y="133" width="0.3156%" height="15" fill="rgb(239,18,37)" fg:x="35975042451" fg:w="205270090"/><text x="55.5623%" y="143.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push (205,270,090 samples, 0.32%)</title><rect x="55.3123%" y="117" width="0.3156%" height="15" fill="rgb(218,185,22)" fg:x="35975042451" fg:w="205270090"/><text x="55.5623%" y="127.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::try_push (205,270,090 samples, 0.32%)</title><rect x="55.3123%" y="101" width="0.3156%" height="15" fill="rgb(225,218,4)" fg:x="35975042451" fg:w="205270090"/><text x="55.5623%" y="111.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (166,451,050 samples, 0.26%)</title><rect x="55.3720%" y="85" width="0.2559%" height="15" fill="rgb(230,182,32)" fg:x="36013861491" fg:w="166451050"/><text x="55.6220%" y="95.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as arrayvec::arrayvec_impl::ArrayVecImpl&gt;::set_len (166,451,050 samples, 0.26%)</title><rect x="55.3720%" y="69" width="0.2559%" height="15" fill="rgb(242,56,43)" fg:x="36013861491" fg:w="166451050"/><text x="55.6220%" y="79.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (912,269,367 samples, 1.40%)</title><rect x="54.4301%" y="149" width="1.4026%" height="15" fill="rgb(233,99,24)" fg:x="35401225473" fg:w="912269367"/><text x="54.6801%" y="159.50"></text></g><g><title>shiro::engine::common::chess_move::Move::with_target (133,182,299 samples, 0.20%)</title><rect x="55.6279%" y="133" width="0.2048%" height="15" fill="rgb(234,209,42)" fg:x="36180312541" fg:w="133182299"/><text x="55.8779%" y="143.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_target (133,182,299 samples, 0.20%)</title><rect x="55.6279%" y="117" width="0.2048%" height="15" fill="rgb(227,7,12)" fg:x="36180312541" fg:w="133182299"/><text x="55.8779%" y="127.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_target_checked (133,182,299 samples, 0.20%)</title><rect x="55.6279%" y="101" width="0.2048%" height="15" fill="rgb(245,203,43)" fg:x="36180312541" fg:w="133182299"/><text x="55.8779%" y="111.50"></text></g><g><title>modular_bitfield::private::proc::write_specifier (133,182,299 samples, 0.20%)</title><rect x="55.6279%" y="85" width="0.2048%" height="15" fill="rgb(238,205,33)" fg:x="36180312541" fg:w="133182299"/><text x="55.8779%" y="95.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_hv (1,207,492,607 samples, 1.86%)</title><rect x="54.0702%" y="165" width="1.8565%" height="15" fill="rgb(231,56,7)" fg:x="35167169952" fg:w="1207492607"/><text x="54.3202%" y="175.50">s..</text></g><g><title>shiro::engine::move_gen::masks::pext_hv_lookup (61,167,719 samples, 0.09%)</title><rect x="55.8327%" y="149" width="0.0940%" height="15" fill="rgb(244,186,29)" fg:x="36313494840" fg:w="61167719"/><text x="56.0827%" y="159.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_king_castle (22,172,032 samples, 0.03%)</title><rect x="55.9267%" y="165" width="0.0341%" height="15" fill="rgb(234,111,31)" fg:x="36374662559" fg:w="22172032"/><text x="56.1767%" y="175.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (11,097,012 samples, 0.02%)</title><rect x="55.9438%" y="149" width="0.0171%" height="15" fill="rgb(241,149,10)" fg:x="36385737579" fg:w="11097012"/><text x="56.1938%" y="159.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (11,077,282 samples, 0.02%)</title><rect x="55.9694%" y="149" width="0.0170%" height="15" fill="rgb(249,206,44)" fg:x="36402386101" fg:w="11077282"/><text x="56.2194%" y="159.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push (22,200,646 samples, 0.03%)</title><rect x="56.0547%" y="133" width="0.0341%" height="15" fill="rgb(251,153,30)" fg:x="36457864938" fg:w="22200646"/><text x="56.3047%" y="143.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push (22,200,646 samples, 0.03%)</title><rect x="56.0547%" y="117" width="0.0341%" height="15" fill="rgb(239,152,38)" fg:x="36457864938" fg:w="22200646"/><text x="56.3047%" y="127.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::try_push (22,200,646 samples, 0.03%)</title><rect x="56.0547%" y="101" width="0.0341%" height="15" fill="rgb(249,139,47)" fg:x="36457864938" fg:w="22200646"/><text x="56.3047%" y="111.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (22,200,646 samples, 0.03%)</title><rect x="56.0547%" y="85" width="0.0341%" height="15" fill="rgb(244,64,35)" fg:x="36457864938" fg:w="22200646"/><text x="56.3047%" y="95.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as arrayvec::arrayvec_impl::ArrayVecImpl&gt;::set_len (22,200,646 samples, 0.03%)</title><rect x="56.0547%" y="69" width="0.0341%" height="15" fill="rgb(216,46,15)" fg:x="36457864938" fg:w="22200646"/><text x="56.3047%" y="79.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (72,146,692 samples, 0.11%)</title><rect x="55.9864%" y="149" width="0.1109%" height="15" fill="rgb(250,74,19)" fg:x="36413463383" fg:w="72146692"/><text x="56.2364%" y="159.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_king_normal (99,932,542 samples, 0.15%)</title><rect x="55.9608%" y="165" width="0.1536%" height="15" fill="rgb(249,42,33)" fg:x="36396834591" fg:w="99932542"/><text x="56.2108%" y="175.50"></text></g><g><title>shiro::engine::move_gen::masks::king_lookup (11,157,058 samples, 0.02%)</title><rect x="56.0973%" y="149" width="0.0172%" height="15" fill="rgb(242,149,17)" fg:x="36485610075" fg:w="11157058"/><text x="56.3473%" y="159.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitOr&gt;::bitor (11,102,344 samples, 0.02%)</title><rect x="56.2327%" y="149" width="0.0171%" height="15" fill="rgb(244,29,21)" fg:x="36573675081" fg:w="11102344"/><text x="56.4827%" y="159.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitOr&gt;::bitor (11,102,344 samples, 0.02%)</title><rect x="56.2327%" y="133" width="0.0171%" height="15" fill="rgb(220,130,37)" fg:x="36573675081" fg:w="11102344"/><text x="56.4827%" y="143.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (74,225,404 samples, 0.11%)</title><rect x="56.2583%" y="149" width="0.1141%" height="15" fill="rgb(211,67,2)" fg:x="36590312347" fg:w="74225404"/><text x="56.5083%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (74,225,404 samples, 0.11%)</title><rect x="56.2583%" y="133" width="0.1141%" height="15" fill="rgb(235,68,52)" fg:x="36590312347" fg:w="74225404"/><text x="56.5083%" y="143.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push (48,833,391 samples, 0.08%)</title><rect x="56.5002%" y="133" width="0.0751%" height="15" fill="rgb(246,142,3)" fg:x="36747616847" fg:w="48833391"/><text x="56.7502%" y="143.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push (48,833,391 samples, 0.08%)</title><rect x="56.5002%" y="117" width="0.0751%" height="15" fill="rgb(241,25,7)" fg:x="36747616847" fg:w="48833391"/><text x="56.7502%" y="127.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::try_push (48,833,391 samples, 0.08%)</title><rect x="56.5002%" y="101" width="0.0751%" height="15" fill="rgb(242,119,39)" fg:x="36747616847" fg:w="48833391"/><text x="56.7502%" y="111.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (48,833,391 samples, 0.08%)</title><rect x="56.5002%" y="85" width="0.0751%" height="15" fill="rgb(241,98,45)" fg:x="36747616847" fg:w="48833391"/><text x="56.7502%" y="95.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as arrayvec::arrayvec_impl::ArrayVecImpl&gt;::set_len (48,833,391 samples, 0.08%)</title><rect x="56.5002%" y="69" width="0.0751%" height="15" fill="rgb(254,28,30)" fg:x="36747616847" fg:w="48833391"/><text x="56.7502%" y="79.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_knight (310,828,039 samples, 0.48%)</title><rect x="56.1145%" y="165" width="0.4779%" height="15" fill="rgb(241,142,54)" fg:x="36496767133" fg:w="310828039"/><text x="56.3645%" y="175.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (143,057,421 samples, 0.22%)</title><rect x="56.3724%" y="149" width="0.2200%" height="15" fill="rgb(222,85,15)" fg:x="36664537751" fg:w="143057421"/><text x="56.6224%" y="159.50"></text></g><g><title>shiro::engine::common::chess_move::Move::with_target (11,144,934 samples, 0.02%)</title><rect x="56.5753%" y="133" width="0.0171%" height="15" fill="rgb(210,85,47)" fg:x="36796450238" fg:w="11144934"/><text x="56.8253%" y="143.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_target (11,144,934 samples, 0.02%)</title><rect x="56.5753%" y="117" width="0.0171%" height="15" fill="rgb(224,206,25)" fg:x="36796450238" fg:w="11144934"/><text x="56.8253%" y="127.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_target_checked (11,144,934 samples, 0.02%)</title><rect x="56.5753%" y="101" width="0.0171%" height="15" fill="rgb(243,201,19)" fg:x="36796450238" fg:w="11144934"/><text x="56.8253%" y="111.50"></text></g><g><title>modular_bitfield::private::proc::write_specifier (11,144,934 samples, 0.02%)</title><rect x="56.5753%" y="85" width="0.0171%" height="15" fill="rgb(236,59,4)" fg:x="36796450238" fg:w="11144934"/><text x="56.8253%" y="95.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (16,678,123 samples, 0.03%)</title><rect x="56.6265%" y="149" width="0.0256%" height="15" fill="rgb(254,179,45)" fg:x="36829765211" fg:w="16678123"/><text x="56.8765%" y="159.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (16,678,123 samples, 0.03%)</title><rect x="56.6265%" y="133" width="0.0256%" height="15" fill="rgb(226,14,10)" fg:x="36829765211" fg:w="16678123"/><text x="56.8765%" y="143.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_pawn_captures (61,011,813 samples, 0.09%)</title><rect x="56.5924%" y="165" width="0.0938%" height="15" fill="rgb(244,27,41)" fg:x="36807595172" fg:w="61011813"/><text x="56.8424%" y="175.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAndAssign&gt;::bitand_assign (11,103,990 samples, 0.02%)</title><rect x="56.8286%" y="149" width="0.0171%" height="15" fill="rgb(235,35,32)" fg:x="36961210251" fg:w="11103990"/><text x="57.0786%" y="159.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAndAssign&gt;::bitand_assign (11,103,990 samples, 0.02%)</title><rect x="56.8286%" y="133" width="0.0171%" height="15" fill="rgb(218,68,31)" fg:x="36961210251" fg:w="11103990"/><text x="57.0786%" y="143.50"></text></g><g><title>shiro::engine::core::bitboard::Bitboard::pop_leftmost (41,257,111 samples, 0.06%)</title><rect x="56.8542%" y="149" width="0.0634%" height="15" fill="rgb(207,120,37)" fg:x="36977860791" fg:w="41257111"/><text x="57.1042%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (41,257,111 samples, 0.06%)</title><rect x="56.8542%" y="133" width="0.0634%" height="15" fill="rgb(227,98,0)" fg:x="36977860791" fg:w="41257111"/><text x="57.1042%" y="143.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as arrayvec::arrayvec_impl::ArrayVecImpl&gt;::set_len (27,792,922 samples, 0.04%)</title><rect x="57.1439%" y="69" width="0.0427%" height="15" fill="rgb(207,7,3)" fg:x="37166325259" fg:w="27792922"/><text x="57.3939%" y="79.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push (130,080,090 samples, 0.20%)</title><rect x="57.0236%" y="133" width="0.2000%" height="15" fill="rgb(206,98,19)" fg:x="37088076459" fg:w="130080090"/><text x="57.2736%" y="143.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push (130,080,090 samples, 0.20%)</title><rect x="57.0236%" y="117" width="0.2000%" height="15" fill="rgb(217,5,26)" fg:x="37088076459" fg:w="130080090"/><text x="57.2736%" y="127.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::try_push (130,080,090 samples, 0.20%)</title><rect x="57.0236%" y="101" width="0.2000%" height="15" fill="rgb(235,190,38)" fg:x="37088076459" fg:w="130080090"/><text x="57.2736%" y="111.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (51,831,290 samples, 0.08%)</title><rect x="57.1439%" y="85" width="0.0797%" height="15" fill="rgb(247,86,24)" fg:x="37166325259" fg:w="51831290"/><text x="57.3939%" y="95.50"></text></g><g><title>core::ptr::write (24,038,368 samples, 0.04%)</title><rect x="57.1867%" y="69" width="0.0370%" height="15" fill="rgb(205,101,16)" fg:x="37194118181" fg:w="24038368"/><text x="57.4367%" y="79.50"></text></g><g><title>shiro::engine::common::chess_move::Move::with_start (119,949,295 samples, 0.18%)</title><rect x="57.2236%" y="133" width="0.1844%" height="15" fill="rgb(246,168,33)" fg:x="37218156549" fg:w="119949295"/><text x="57.4736%" y="143.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_start (119,949,295 samples, 0.18%)</title><rect x="57.2236%" y="117" width="0.1844%" height="15" fill="rgb(231,114,1)" fg:x="37218156549" fg:w="119949295"/><text x="57.4736%" y="127.50"></text></g><g><title>shiro::engine::common::chess_move::Move::set_start_checked (119,949,295 samples, 0.18%)</title><rect x="57.2236%" y="101" width="0.1844%" height="15" fill="rgb(207,184,53)" fg:x="37218156549" fg:w="119949295"/><text x="57.4736%" y="111.50"></text></g><g><title>modular_bitfield::private::proc::write_specifier (119,949,294 samples, 0.18%)</title><rect x="57.2236%" y="85" width="0.1844%" height="15" fill="rgb(224,95,51)" fg:x="37218156550" fg:w="119949294"/><text x="57.4736%" y="95.50"></text></g><g><title>&lt;modular_bitfield::private::push_pop::PopBuffer&lt;u8&gt; as modular_bitfield::private::traits::PopBits&gt;::pop_bits (50,099,976 samples, 0.08%)</title><rect x="57.3310%" y="69" width="0.0770%" height="15" fill="rgb(212,188,45)" fg:x="37288005868" fg:w="50099976"/><text x="57.5810%" y="79.50"></text></g><g><title>core::num::&lt;impl u8&gt;::checked_shr (50,099,976 samples, 0.08%)</title><rect x="57.3310%" y="53" width="0.0770%" height="15" fill="rgb(223,154,38)" fg:x="37288005868" fg:w="50099976"/><text x="57.5810%" y="63.50"></text></g><g><title>shiro::engine::move_gen::gen_moves (6,880,411,795 samples, 10.58%)</title><rect x="46.8384%" y="197" width="10.5788%" height="15" fill="rgb(251,22,52)" fg:x="30463591136" fg:w="6880411795"/><text x="47.0884%" y="207.50">shiro::engine::..</text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_all_moves (2,342,580,631 samples, 3.60%)</title><rect x="53.8154%" y="181" width="3.6018%" height="15" fill="rgb(229,209,22)" fg:x="35001422300" fg:w="2342580631"/><text x="54.0654%" y="191.50">shir..</text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::gen_moves_pawn_pushes (475,395,946 samples, 0.73%)</title><rect x="56.6862%" y="165" width="0.7309%" height="15" fill="rgb(234,138,34)" fg:x="36868606985" fg:w="475395946"/><text x="56.9362%" y="175.50"></text></g><g><title>shiro::engine::move_gen::MoveGen&lt;_,_,_,_,_,_&gt;::add_move (324,885,029 samples, 0.50%)</title><rect x="56.9176%" y="149" width="0.4995%" height="15" fill="rgb(212,95,11)" fg:x="37019117902" fg:w="324885029"/><text x="57.1676%" y="159.50"></text></g><g><title>&lt;shiro::engine::core::BoardState as core::clone::Clone&gt;::clone (3,022,883,273 samples, 4.65%)</title><rect x="59.6320%" y="181" width="4.6477%" height="15" fill="rgb(240,179,47)" fg:x="38784568854" fg:w="3022883273"/><text x="59.8820%" y="191.50">&lt;shir..</text></g><g><title>[libc.so.6] (3,022,883,273 samples, 4.65%)</title><rect x="59.6320%" y="165" width="4.6477%" height="15" fill="rgb(240,163,11)" fg:x="38784568854" fg:w="3022883273"/><text x="59.8820%" y="175.50">[libc..</text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitAndAssign&gt;::bitand_assign (49,980,515 samples, 0.08%)</title><rect x="64.2798%" y="181" width="0.0768%" height="15" fill="rgb(236,37,12)" fg:x="41807452127" fg:w="49980515"/><text x="64.5298%" y="191.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAndAssign&gt;::bitand_assign (49,980,515 samples, 0.08%)</title><rect x="64.2798%" y="165" width="0.0768%" height="15" fill="rgb(232,164,16)" fg:x="41807452127" fg:w="49980515"/><text x="64.5298%" y="175.50"></text></g><g><title>&lt;shiro::engine::core::bitboard::Bitboard as core::ops::bit::BitOrAssign&gt;::bitor_assign (760,574,702 samples, 1.17%)</title><rect x="64.3566%" y="181" width="1.1694%" height="15" fill="rgb(244,205,15)" fg:x="41857432642" fg:w="760574702"/><text x="64.6066%" y="191.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitOrAssign&gt;::bitor_assign (760,574,702 samples, 1.17%)</title><rect x="64.3566%" y="165" width="1.1694%" height="15" fill="rgb(223,117,47)" fg:x="41857432642" fg:w="760574702"/><text x="64.6066%" y="175.50"></text></g><g><title>[libc.so.6] (5,096,276,445 samples, 7.84%)</title><rect x="65.5260%" y="181" width="7.8356%" height="15" fill="rgb(244,107,35)" fg:x="42618007344" fg:w="5096276445"/><text x="65.7760%" y="191.50">[libc.so.6]</text></g><g><title>shiro::engine::common::chess_move::Move::promo (11,087,461 samples, 0.02%)</title><rect x="73.3616%" y="181" width="0.0170%" height="15" fill="rgb(205,140,8)" fg:x="47714283789" fg:w="11087461"/><text x="73.6116%" y="191.50"></text></g><g><title>shiro::engine::common::chess_move::Move::promo_or_err (11,087,461 samples, 0.02%)</title><rect x="73.3616%" y="165" width="0.0170%" height="15" fill="rgb(228,84,46)" fg:x="47714283789" fg:w="11087461"/><text x="73.6116%" y="175.50"></text></g><g><title>modular_bitfield::private::proc::read_specifier (11,087,461 samples, 0.02%)</title><rect x="73.3616%" y="149" width="0.0170%" height="15" fill="rgb(254,188,9)" fg:x="47714283789" fg:w="11087461"/><text x="73.6116%" y="159.50"></text></g><g><title>shiro::engine::common::chess_move::Move::start (11,089,100 samples, 0.02%)</title><rect x="73.3787%" y="181" width="0.0170%" height="15" fill="rgb(206,112,54)" fg:x="47725371250" fg:w="11089100"/><text x="73.6287%" y="191.50"></text></g><g><title>shiro::engine::common::chess_move::Move::start_or_err (11,089,100 samples, 0.02%)</title><rect x="73.3787%" y="165" width="0.0170%" height="15" fill="rgb(216,84,49)" fg:x="47725371250" fg:w="11089100"/><text x="73.6287%" y="175.50"></text></g><g><title>modular_bitfield::private::proc::read_specifier (11,089,100 samples, 0.02%)</title><rect x="73.3787%" y="149" width="0.0170%" height="15" fill="rgb(214,194,35)" fg:x="47725371250" fg:w="11089100"/><text x="73.6287%" y="159.50"></text></g><g><title>&lt;modular_bitfield::private::push_pop::PushBuffer&lt;u8&gt; as modular_bitfield::private::traits::PushBits&gt;::push_bits (11,089,100 samples, 0.02%)</title><rect x="73.3787%" y="133" width="0.0170%" height="15" fill="rgb(249,28,3)" fg:x="47725371250" fg:w="11089100"/><text x="73.6287%" y="143.50"></text></g><g><title>&lt;shiro::engine::core::PieceType as modular_bitfield::Specifier&gt;::from_bytes (11,081,092 samples, 0.02%)</title><rect x="73.4213%" y="133" width="0.0170%" height="15" fill="rgb(222,56,52)" fg:x="47753115663" fg:w="11081092"/><text x="73.6713%" y="143.50"></text></g><g><title>shiro::engine::core::BoardState::get_peice_bb_mut (33,291,089 samples, 0.05%)</title><rect x="73.3957%" y="181" width="0.0512%" height="15" fill="rgb(245,217,50)" fg:x="47736460350" fg:w="33291089"/><text x="73.6457%" y="191.50"></text></g><g><title>shiro::engine::core::Piece::ptype (22,181,494 samples, 0.03%)</title><rect x="73.4128%" y="165" width="0.0341%" height="15" fill="rgb(213,201,24)" fg:x="47747569945" fg:w="22181494"/><text x="73.6628%" y="175.50"></text></g><g><title>shiro::engine::core::Piece::ptype_or_err (16,635,776 samples, 0.03%)</title><rect x="73.4213%" y="149" width="0.0256%" height="15" fill="rgb(248,116,28)" fg:x="47753115663" fg:w="16635776"/><text x="73.6713%" y="159.50"></text></g><g><title>shiro::engine::core::Flags::set_has_ep (15,371,759,759 samples, 23.63%)</title><rect x="73.4469%" y="181" width="23.6344%" height="15" fill="rgb(219,72,43)" fg:x="47769751439" fg:w="15371759759"/><text x="73.6969%" y="191.50">shiro::engine::core::Flags::set_has_ep</text></g><g><title>shiro::engine::core::Flags::set_has_ep_checked (15,371,759,759 samples, 23.63%)</title><rect x="73.4469%" y="165" width="23.6344%" height="15" fill="rgb(209,138,14)" fg:x="47769751439" fg:w="15371759759"/><text x="73.6969%" y="175.50">shiro::engine::core::Flags::set_has_ep..</text></g><g><title>modular_bitfield::private::proc::write_specifier (15,371,759,759 samples, 23.63%)</title><rect x="73.4469%" y="149" width="23.6344%" height="15" fill="rgb(222,18,33)" fg:x="47769751439" fg:w="15371759759"/><text x="73.6969%" y="159.50">modular_bitfield::private::proc::write..</text></g><g><title>shiro::engine::core::Flags::set_turn (66,587,296 samples, 0.10%)</title><rect x="97.0813%" y="181" width="0.1024%" height="15" fill="rgb(213,199,7)" fg:x="63141511198" fg:w="66587296"/><text x="97.3313%" y="191.50"></text></g><g><title>shiro::engine::core::Flags::set_turn_checked (66,587,296 samples, 0.10%)</title><rect x="97.0813%" y="165" width="0.1024%" height="15" fill="rgb(250,110,10)" fg:x="63141511198" fg:w="66587296"/><text x="97.3313%" y="175.50"></text></g><g><title>modular_bitfield::private::proc::write_specifier (66,587,296 samples, 0.10%)</title><rect x="97.0813%" y="149" width="0.1024%" height="15" fill="rgb(248,123,6)" fg:x="63141511198" fg:w="66587296"/><text x="97.3313%" y="159.50"></text></g><g><title>shiro::engine::perft::make_move (25,864,136,278 samples, 39.77%)</title><rect x="57.4171%" y="197" width="39.7666%" height="15" fill="rgb(206,91,31)" fg:x="37344002931" fg:w="25864136278"/><text x="57.6671%" y="207.50">shiro::engine::perft::make_move</text></g><g><title>&lt;arrayvec::arrayvec::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (177,532,422 samples, 0.27%)</title><rect x="98.3530%" y="181" width="0.2730%" height="15" fill="rgb(211,154,13)" fg:x="63968635242" fg:w="177532422"/><text x="98.6030%" y="191.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::len (16,657,821 samples, 0.03%)</title><rect x="98.6004%" y="165" width="0.0256%" height="15" fill="rgb(225,148,7)" fg:x="64129509843" fg:w="16657821"/><text x="98.8504%" y="175.50"></text></g><g><title>[libc.so.6] (716,038,345 samples, 1.10%)</title><rect x="98.6260%" y="181" width="1.1009%" height="15" fill="rgb(220,160,43)" fg:x="64146167664" fg:w="716038345"/><text x="98.8760%" y="191.50"></text></g><g><title>all (65,039,832,602 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(213,52,39)" fg:x="0" fg:w="65039832602"/><text x="0.2500%" y="239.50"></text></g><g><title>game (65,039,832,602 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(243,137,7)" fg:x="0" fg:w="65039832602"/><text x="0.2500%" y="223.50">game</text></g><g><title>shiro::engine::perft::perft_simple (1,831,693,393 samples, 2.82%)</title><rect x="97.1837%" y="197" width="2.8163%" height="15" fill="rgb(230,79,13)" fg:x="63208139209" fg:w="1831693393"/><text x="97.4337%" y="207.50">sh..</text></g><g><title>core::ptr::drop_in_place&lt;arrayvec::arrayvec::ArrayVec&lt;shiro::engine::common::chess_move::Move,256_usize&gt;&gt; (177,626,593 samples, 0.27%)</title><rect x="99.7269%" y="181" width="0.2731%" height="15" fill="rgb(247,105,23)" fg:x="64862206009" fg:w="177626593"/><text x="99.9769%" y="191.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as core::ops::drop::Drop&gt;::drop (177,626,593 samples, 0.27%)</title><rect x="99.7269%" y="165" width="0.2731%" height="15" fill="rgb(223,179,41)" fg:x="64862206009" fg:w="177626593"/><text x="99.9769%" y="175.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::clear (177,626,593 samples, 0.27%)</title><rect x="99.7269%" y="149" width="0.2731%" height="15" fill="rgb(218,9,34)" fg:x="64862206009" fg:w="177626593"/><text x="99.9769%" y="159.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::clear (177,626,593 samples, 0.27%)</title><rect x="99.7269%" y="133" width="0.2731%" height="15" fill="rgb(222,106,8)" fg:x="64862206009" fg:w="177626593"/><text x="99.9769%" y="143.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::truncate (177,626,593 samples, 0.27%)</title><rect x="99.7269%" y="117" width="0.2731%" height="15" fill="rgb(211,220,0)" fg:x="64862206009" fg:w="177626593"/><text x="99.9769%" y="127.50"></text></g></svg></svg>